settings
{
	main
	{
		Description: "Defend Castle v0.6.c121 by HuKuTa94#2589 modified by ShuriZma#2349 - J1K6F (Code Version: v090) - Defend the gate, kill enemies and don't allow them to damage the gate! Torb, Brig and Rein can repair the gate but beware! You never know what the enemy might be hiding until now! Special Thanks to: Shingen#21859 for the Abilities, LemonAid#11644 for the Hero Talents & Josbird for teaching me about Menus! Find the Original Mode on: workshop.codes/BQEGS PS: SHINGEN PLS COME BACK"
		Mode Name: "Defend Castle v0.6.c121"
	}
	lobby
	{
		Max Spectators: 0
		Max Team 1 Players: 4
		Max Team 2 Players: 0
		Return To Lobby: Never
		Swap Teams After Match: No
	}
	modes
	{
		Escort
		{
			enabled maps
			{
				Havana
			}
		}
		Team Deathmatch
		{
			enabled maps
			{
			}
		}
		General
		{
			Game Mode Start: Immediately
			Spawn Health Packs: Disabled
		}
	}
	workshop
	{
		Ana can nano herself even if there are other players only if no player targeted: On
		Story Heroes: Off
	}
	extensions
	{
		Beam Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
		Spawn More Dummy Bots
		Energy Explosion Effects
	}
}
variables {
    global:
        0: GatePosition
        1: ZenSpawnPositions
        2: SpawnPositionMaxId
        3: LoopIterator1
        4: BigBossSpawnPositions
        5: PlayerSpawnPositions
        6: GateHealthChase
        7: GateHealth
        8: GateMaxHealth
        9: GateProgressBarColorCurrent
        10: GateProgressBarColorComponent
        11: GateHealthEvent
        12: BastionTargetPositions
        13: SniperPositions
        14: BallSpawnPositions
        15: ZenRespawnTime
        16: TimeMin
        17: TimeSec
        18: DefaultCurrentBot
        19: DefaultHeroBotsPool
        20: DefaultHeroBotsPoolCurrentId
        21: IsDebug
        22: BotOrisaParent
        23: IsStoryHeroes
        24: BotOrisaChild
        25: GateRepairPosition
        26: BotOrisaTargetPosition
        27: BotEchoRespawnPosition
        28: BotEchoTeleportPositions
        29: UpgradeGateMaxHealthValue
        30: UpgradeGateMaxHealthHudId
        31: UpgradePlayerMaxHealthValue
        32: UpgradePlayerMaxHealthHudId
        33: UpgradeCriticalDamageValue
        34: UpgradeCriticalDamageHudId
        35: UpgradeMaxAmmoValue
        36: UpgradeMaxAmmoHudId
        37: UpgradeMaxAmmoMaxValue
        38: UpgradePlayerMaxHealthMaxValue
        39: UpgradeCriticalDamageMaxValue
        40: UpgradeGateMaxHealthMaxValue
        41: DamageDone
        42: IsDebugAINavigation
        43: GameLogicCountOfUniqueHeroes
        44: IsNewWaveGameLogicProcessing
        45: AutoRepair
        46: UpgradePerkSharpshooterValue
        47: Perk
        48: MaxHealthDone
        49: StartMoney
        50: Time5Min
        51: SelfNanoWorkshopSetting
        52: ShopCamPos
        53: ShopBasePos
        54: ShopPosAngle
        55: activeBoss
        56: bossTrigger
        57: bossRotation
        58: lastBoss
        59: Time10Min
        61: challengeCount
        62: UpgradeBossHealthValue
        112: AllPos
        113: AllDir
        114: firstpos
        115: secondpos
        116: firstpoint2
        117: secondpoint2
        118: second
        119: z
        120: Wall_ID
        121: showwalls
        122: is_Grounded
        123: g_beamType
        124: x
        125: NodePositions
        126: NodeConnections
        127: DistanceMatrix
    player:
        0: BotSeePlayer
        1: BotDoesUniqueBehaviour
        2: BotEffects
        3: BotRayCastHitPosition
        4: BotEventPosition
        5: CurrentHero
        6: IsDead
        7: IsRespawning
        8: BotBastionArtilleryDidShotsCount
        9: BotCounter
        10: HasBadStatus
        11: EventHealth
        12: HealOverTimeId
        13: BotIsOrisaChild
        14: BotEchoCapturedPlayer
        15: BotPlayersInRadius
        16: BotLoopIterator2
        17: BotWidowShotTime
        18: BotWidowTeleportTime
        19: IsNanoed
        20: AbilityHUD
        21: Lucio_Dash_Active
        22: Lucio_Dash_Icon
        23: AnaEntityID
        24: Abilities
        25: Money
        26: HeroTalentText
        27: DamageDealt
        28: PlayerHealth
        29: AbilityCountdown
        30: HP_Pool
        31: Effects__
        32: Ability_Projectile1
        33: Ability_End
        34: Storm_Projectile
        35: Storm_EndPoint
        36: Storm_Effects
        37: Feared_until
        38: Modification_Damage
        39: Ability_Projectile2
        40: Ability_Position
        41: Chain_Reaction_On
        42: Chain_Reaction_Immune
        43: Ability_Active
        44: Ability_Resource
        45: secondWindActive
        46: isInMenu
        47: ReinPin
        48: PlayerFacing
        49: isBoss
        50: Gen_Direction
        51: Gen_Available
        52: Ability_Player
        53: Ability_Countdown
        54: lastSecondWind
        105: filterpos
        106: lastsavedpos
        107: closestbodypos
        108: fullbodypos
        109: prevpos_intersection
        110: active_wall
        111: closestwall
        112: x_
        113: intersection_length
        114: thickness
        115: BotCancelPathFinding
        116: BotLoopIterator1
        117: BotTempArray
        118: BotTargetPlayer
        119: BotTargetPosition
        120: BotClosestNodeIdToTarget
        121: BotClosestNodeIdToBot
        122: BotPrevNodeId
        123: BotNextNodeId
        124: BotNextNodePosition
        125: BotCurrentDistanceToTarget
        126: BotShortestDistanceToTarget
        127: BotIsPathFinding
}
subroutines {
    0: BotBastionArtilleryDamage
    1: BotBastionFlameGunDamage
    2: BotBastionRespawn
    3: GateProgressBarColor
    4: BotZenyattaRespawn
    5: BotWidowRespawn
    6: BotBallRespawn
    7: GameLogicAddNextHeroInGame
    8: BotOrisaRespawn
    9: BotLandingFromSky
    10: BotEchoRespawn
    11: BotEchoDetachPlayer
    12: BotEchoFlyToPlayer
    13: BotEchoFlyToPortal
    14: GameLogicSetBotProperties
    15: DisablePlayer
    16: BotApearFromUnderground
    17: BotReinRespawn
    18: PlayerInit
    19: BotInit
    20: PlayerRespawn
    21: BotRespawn
    22: BotWidowBadStatus
    23: GameLogicWave0
    24: Refund
    25: EnablePlayer
    26: GateRepair
    124: BotStartPathFinding
    125: BotGetClosestNodeIdToTarget
    126: BotGetNextNodeIdAndPosition
    127: BotResetPathFinding
}

disabled rule("=== PATH BUILDER MODE IMPORT ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("MAP: HAVANA") {
    event {
        Ongoing - Global;
    }
    conditions {
        Current Map == Map(Havana);
    }
    actions {
        Set Global Variable(NodePositions, Array(Vector(147.588, 6.425, -46.749), Vector(136.181, 6.425, -57.159), Vector(130.189, 6.425, -63.781), Vector(123.305, 6.425, -57.983), Vector(125.678, 6.504, -46.633), Vector(114.485, 7.471, -46.699), Vector(138.743, 6.425, -32.974), Vector(126.498, 6.425, -39.92), Vector(124.572, 10.434, -34.3), Vector(138.605, 5.359, -18.647), Vector(119.009, 2.331, -31.024), Vector(121.138, 5.228, -19.933), Vector(126.722, 6.425, -29.505), Vector(102.762, 3.157, -33.609), Vector(76.03, 7.418, -74.087), Vector(83.72, 9.425, -33.744), Vector(97.439, 7.238, -42.379), Vector(86.252, 12.416, -47.261), Vector(65.178, 11.425, -73.187), Vector(97.466, 7.269, -50.596), Vector(113.039, 7.424, -37.337), Vector(106.179, 7.45, -46.143), Vector(90.086, 7.411, -44.653), Vector(78.752, 7.418, -62.14), Vector(82.124, 7.428, -44.229), Vector(90.675, 7.231, -51.234), Vector(85.717, 4.692, -63.446), Vector(90.83, 4.33, -70.697), Vector(102.425, 2.387, -72.817), Vector(81.443, 4.425, -81.648), Vector(70.743, 6.418, -81.495), Vector(69.738, 6.419, -96.344), Vector(127.586, 12.643, -63.344), Vector(118.911, 13.468, -58.008), Vector(102.885, 1.092, -56.579), Vector(100.009, 2.967, -67.139), Vector(106.703, 0.465, -44.628), Vector(81.695, 7.418, -52.14), Vector(126.979, 12.393, -55.079), Vector(153.72, 18.578, -21.745), Vector(155.301, 18.619, -17.595), Vector(133.043, 10.425, -26.625), Vector(114.646, 7.278, -57.336), Vector(95.16, 3.688, -81.194), Vector(78.456, 5.418, -93.581), Vector(75.455, 5.418, -101.492), Vector(148.071, 9.432, -32.123), Vector(146.706, 9.425, -27.858), Vector(144.273, 9.445, -63.119), Vector(144.278, 9.454, -58.447)));
        Set Global Variable(NodeConnections, Array(Array(1, 6, 4, 7), Array(2, 1, 4, 6, 7, 0, 49), Array(1, 3), Array(2, 4, 42), Array(3, 1, 5, 7, 6, 1, 0), Array(4, 7, 20, 21, 19, 16, 42), Array(7, 1, 4, 1, 9, 12, 0, 46), Array(4, 5, 6, 1, 1, 12, 0), Array(7, 41), Array(6, 11), Array(11, 13), Array(9, 10, 13), Array(6, 7, 10), Array(10, 16, 36), Array(18, 23, 30), Array(17, 24), Array(13, 19, 22, 21, 25, 5), Array(15, 22, 25, 23), Array(14), Array(16, 21, 22, 26, 27, 35, 25, 5), Array(5, 13, 10), Array(19, 16, 5, 13, 22, 34), Array(16, 19, 21, 24, 25), Array(14, 25, 26, 37), Array(22, 15, 37), Array(23, 22, 19, 16, 26, 27, 35, 37), Array(25, 19, 27, 35, 29), Array(19, 26, 25, 29, 35, 43), Array(35, 34, 43), Array(27, 26, 30, 43, 44), Array(29, 14, 31), Array(30, 29, 45), Array(33, 38, 1, 48), Array(32, 38, 42), Array(35, 36, 28), Array(28, 19, 25, 27, 26, 34), Array(13, 34), Array(25, 23, 24), Array(5, 4, 1, 6, 1, 32, 33, 0), Array(40), Array(39), Array(6, 8, 47, 46), Array(3, 5, 34), Array(28, 27, 29, 44), Array(29, 43, 45), Array(44, 31), Array(6, 47), Array(46, 41), Array(49, 32), Array(1, 0, 6, 48)));
        Set Global Variable(DistanceMatrix, Array(Array(0, 1, 2, 2, 1, 2, 1, 1, 5, 2, 3, 3, 2, 4, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 5, 5, 6, 7, 4, 5, 4, 4, 5, 5, 5, 0, 0, 4, 3, 5, 6, 7, 2, 3, 3, 2), Array(1, 0, 1, 2, 1, 2, 1, 1, 5, 2, 3, 3, 2, 4, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 5, 5, 6, 7, 3, 4, 4, 4, 5, 5, 4, 0, 0, 4, 3, 5, 6, 7, 2, 3, 2, 1), Array(2, 1, 0, 1, 2, 3, 2, 2, 6, 3, 4, 4, 3, 5, 7, 7, 4, 8, 8, 4, 4, 4, 5, 6, 6, 5, 5, 5, 4, 6, 7, 8, 4, 5, 3, 4, 4, 6, 5, 0, 0, 5, 2, 5, 6, 7, 3, 4, 3, 2), Array(2, 2, 1, 0, 1, 2, 2, 2, 6, 3, 4, 4, 3, 4, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 3, 5, 6, 7, 5, 6, 2, 3, 3, 5, 6, 0, 0, 5, 1, 4, 5, 6, 3, 4, 4, 3), Array(1, 1, 2, 1, 0, 1, 1, 1, 5, 2, 3, 3, 2, 3, 5, 5, 2, 6, 6, 2, 2, 2, 3, 4, 4, 3, 3, 3, 4, 4, 5, 6, 4, 5, 3, 3, 4, 4, 5, 0, 0, 4, 2, 4, 5, 6, 2, 3, 3, 2), Array(2, 2, 3, 2, 1, 0, 2, 1, 6, 3, 2, 3, 2, 2, 4, 4, 1, 5, 5, 1, 1, 1, 2, 3, 3, 2, 2, 2, 3, 3, 4, 5, 5, 6, 2, 2, 3, 3, 6, 0, 0, 5, 1, 3, 4, 5, 3, 4, 4, 3), Array(1, 1, 2, 2, 1, 2, 0, 1, 4, 1, 2, 2, 1, 3, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 5, 5, 6, 7, 4, 5, 4, 4, 4, 5, 5, 0, 0, 3, 3, 5, 6, 7, 1, 2, 3, 2), Array(1, 1, 2, 2, 1, 1, 1, 0, 5, 2, 2, 3, 1, 3, 5, 5, 2, 6, 6, 2, 2, 2, 3, 4, 4, 3, 3, 3, 4, 4, 5, 6, 4, 5, 3, 3, 4, 4, 5, 0, 0, 4, 2, 4, 5, 6, 2, 3, 3, 2), Array(2, 2, 3, 3, 2, 2, 2, 1, 0, 3, 3, 4, 2, 4, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 5, 5, 6, 7, 5, 6, 4, 4, 5, 5, 6, 0, 0, 1, 3, 5, 6, 7, 2, 2, 4, 3), Array(2, 2, 3, 3, 2, 3, 1, 2, 5, 0, 2, 1, 2, 2, 6, 6, 3, 7, 7, 4, 4, 4, 4, 5, 5, 4, 5, 5, 5, 6, 7, 8, 5, 6, 4, 5, 3, 5, 6, 0, 0, 4, 4, 6, 7, 8, 2, 3, 4, 3), Array(4, 4, 5, 5, 4, 3, 3, 4, 7, 2, 0, 1, 4, 1, 5, 5, 2, 6, 6, 3, 4, 3, 3, 4, 4, 3, 4, 4, 4, 5, 6, 7, 7, 8, 3, 4, 2, 4, 8, 0, 0, 6, 4, 5, 6, 7, 4, 5, 6, 5), Array(3, 3, 4, 4, 3, 3, 2, 3, 6, 1, 1, 0, 3, 1, 5, 5, 2, 6, 6, 3, 4, 3, 3, 4, 4, 3, 4, 4, 4, 5, 6, 7, 6, 7, 3, 4, 2, 4, 7, 0, 0, 5, 4, 5, 6, 7, 3, 4, 5, 4), Array(2, 2, 3, 3, 2, 2, 1, 1, 5, 2, 1, 2, 0, 2, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 5, 5, 6, 7, 5, 6, 4, 4, 3, 5, 6, 0, 0, 4, 3, 5, 6, 7, 2, 3, 4, 3), Array(4, 4, 5, 4, 3, 2, 4, 3, 8, 3, 1, 2, 4, 0, 4, 4, 1, 5, 5, 2, 3, 2, 2, 3, 3, 2, 3, 3, 3, 4, 5, 6, 7, 8, 2, 3, 1, 3, 8, 0, 0, 7, 3, 4, 5, 6, 5, 6, 6, 5), Array(6, 6, 7, 6, 5, 4, 6, 5, 10, 7, 5, 6, 6, 4, 0, 4, 3, 5, 1, 3, 5, 4, 3, 1, 3, 2, 2, 3, 4, 2, 1, 2, 9, 10, 4, 3, 5, 2, 10, 0, 0, 9, 5, 3, 3, 3, 7, 8, 8, 7), Array(6, 6, 7, 6, 5, 4, 6, 5, 10, 7, 5, 6, 6, 4, 3, 0, 3, 1, 4, 3, 5, 3, 2, 2, 1, 2, 3, 3, 4, 4, 4, 5, 9, 10, 4, 3, 5, 2, 10, 0, 0, 9, 5, 4, 5, 6, 7, 8, 8, 7), Array(3, 3, 4, 3, 2, 1, 3, 2, 7, 4, 2, 3, 3, 1, 3, 3, 0, 4, 4, 1, 2, 1, 1, 2, 2, 1, 2, 2, 3, 3, 4, 5, 6, 7, 2, 2, 2, 2, 7, 0, 0, 6, 2, 3, 4, 5, 4, 5, 5, 4), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 4, 5, 5, 3, 2, 1, 2, 0, 3, 2, 4, 2, 1, 1, 2, 1, 2, 2, 3, 3, 3, 4, 8, 9, 3, 2, 4, 2, 9, 0, 0, 8, 4, 3, 4, 5, 6, 7, 7, 6), Array(7, 7, 8, 7, 6, 5, 7, 6, 11, 8, 6, 7, 7, 5, 1, 5, 4, 6, 0, 4, 6, 5, 4, 2, 4, 3, 3, 4, 5, 3, 2, 3, 10, 11, 5, 4, 6, 3, 11, 0, 0, 10, 6, 4, 4, 4, 8, 9, 9, 8), Array(3, 3, 4, 3, 2, 1, 3, 2, 7, 4, 3, 4, 3, 2, 3, 3, 1, 4, 4, 0, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 3, 4, 6, 7, 2, 1, 3, 2, 7, 0, 0, 6, 2, 2, 3, 4, 4, 5, 5, 4), Array(3, 3, 4, 3, 2, 1, 3, 2, 7, 3, 1, 2, 3, 1, 5, 5, 2, 6, 6, 2, 0, 2, 3, 4, 4, 3, 3, 3, 4, 4, 5, 6, 6, 7, 3, 3, 2, 4, 7, 0, 0, 6, 2, 4, 5, 6, 4, 5, 5, 4), Array(3, 3, 4, 3, 2, 1, 3, 2, 7, 4, 2, 3, 3, 1, 4, 3, 1, 4, 5, 1, 2, 0, 1, 3, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 1, 2, 2, 3, 7, 0, 0, 6, 2, 3, 4, 5, 4, 5, 5, 4), Array(4, 4, 5, 4, 3, 2, 4, 3, 8, 5, 3, 4, 4, 2, 3, 2, 1, 3, 4, 1, 3, 1, 0, 2, 1, 1, 2, 2, 3, 3, 4, 5, 7, 8, 2, 2, 3, 2, 8, 0, 0, 7, 3, 3, 4, 5, 5, 6, 6, 5), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 4, 5, 5, 3, 1, 3, 2, 4, 2, 2, 4, 3, 2, 0, 2, 1, 1, 2, 3, 2, 2, 3, 8, 9, 3, 2, 4, 1, 9, 0, 0, 8, 4, 3, 3, 4, 6, 7, 7, 6), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 4, 5, 5, 3, 3, 1, 2, 2, 4, 2, 4, 2, 1, 2, 0, 2, 3, 3, 4, 4, 4, 5, 8, 9, 3, 3, 4, 1, 9, 0, 0, 8, 4, 4, 5, 6, 6, 7, 7, 6), Array(4, 4, 5, 4, 3, 2, 4, 3, 8, 5, 3, 4, 4, 2, 2, 3, 1, 4, 3, 1, 3, 2, 1, 1, 2, 0, 1, 1, 2, 2, 3, 4, 7, 8, 2, 1, 3, 1, 8, 0, 0, 7, 3, 2, 3, 4, 5, 6, 6, 5), Array(4, 4, 5, 4, 3, 2, 4, 3, 8, 5, 4, 5, 4, 3, 3, 4, 2, 5, 4, 1, 3, 2, 2, 2, 3, 1, 0, 1, 2, 1, 2, 3, 7, 8, 2, 1, 3, 2, 8, 0, 0, 7, 3, 2, 2, 3, 5, 6, 6, 5), Array(4, 4, 5, 4, 3, 2, 4, 3, 8, 5, 4, 5, 4, 3, 3, 4, 2, 5, 4, 1, 3, 2, 2, 2, 3, 1, 1, 0, 2, 1, 2, 3, 7, 8, 2, 1, 3, 2, 8, 0, 0, 7, 3, 1, 2, 3, 5, 6, 6, 5), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 4, 5, 5, 3, 4, 5, 3, 6, 5, 2, 4, 3, 3, 3, 4, 2, 2, 2, 0, 2, 3, 4, 8, 9, 1, 1, 2, 3, 9, 0, 0, 8, 4, 1, 2, 3, 6, 7, 7, 6), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 5, 6, 5, 4, 2, 5, 3, 6, 3, 2, 4, 3, 3, 3, 4, 2, 1, 1, 2, 0, 1, 2, 8, 9, 3, 2, 4, 3, 9, 0, 0, 8, 4, 1, 1, 2, 6, 7, 7, 6), Array(6, 6, 7, 6, 5, 4, 6, 5, 10, 7, 6, 7, 6, 5, 1, 5, 4, 6, 2, 3, 5, 4, 4, 2, 4, 3, 2, 2, 3, 1, 0, 1, 9, 10, 4, 3, 5, 3, 10, 0, 0, 9, 5, 2, 2, 2, 7, 8, 8, 7), Array(6, 6, 7, 6, 5, 4, 6, 5, 10, 7, 6, 7, 6, 5, 2, 6, 4, 7, 3, 3, 5, 4, 4, 3, 5, 3, 2, 2, 3, 1, 1, 0, 9, 10, 4, 3, 5, 4, 10, 0, 0, 9, 5, 2, 2, 1, 7, 8, 8, 7), Array(2, 1, 2, 3, 2, 2, 2, 2, 6, 3, 4, 4, 3, 4, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 4, 5, 6, 7, 0, 1, 3, 4, 4, 5, 1, 0, 0, 5, 2, 5, 6, 7, 3, 4, 1, 2), Array(2, 2, 3, 2, 2, 2, 2, 3, 6, 3, 4, 4, 3, 4, 6, 6, 3, 7, 7, 3, 3, 3, 4, 5, 5, 4, 4, 4, 3, 5, 6, 7, 1, 0, 2, 3, 3, 5, 1, 0, 0, 5, 1, 4, 5, 6, 3, 4, 2, 3), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 5, 3, 4, 5, 2, 4, 5, 3, 6, 5, 2, 4, 3, 3, 3, 4, 2, 2, 2, 1, 3, 4, 5, 8, 9, 0, 1, 1, 3, 9, 0, 0, 8, 4, 2, 3, 4, 6, 7, 7, 6), Array(4, 4, 5, 4, 3, 2, 4, 3, 8, 5, 4, 5, 4, 3, 3, 4, 2, 5, 4, 1, 3, 2, 2, 2, 3, 1, 1, 1, 1, 2, 3, 4, 7, 8, 1, 0, 2, 2, 8, 0, 0, 7, 3, 2, 3, 4, 5, 6, 6, 5), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 4, 2, 3, 5, 1, 5, 5, 2, 6, 6, 3, 4, 3, 3, 4, 4, 3, 3, 3, 2, 4, 5, 6, 8, 9, 1, 2, 0, 4, 9, 0, 0, 8, 4, 3, 4, 5, 6, 7, 7, 6), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 4, 5, 5, 3, 2, 2, 2, 3, 3, 2, 4, 3, 2, 1, 1, 1, 2, 2, 3, 3, 3, 4, 8, 9, 3, 2, 4, 0, 9, 0, 0, 8, 4, 3, 4, 5, 6, 7, 7, 6), Array(1, 1, 2, 2, 1, 1, 1, 2, 5, 2, 3, 3, 2, 3, 5, 5, 2, 6, 6, 2, 2, 2, 3, 4, 4, 3, 3, 3, 4, 4, 5, 6, 1, 1, 3, 3, 4, 4, 0, 0, 0, 4, 2, 4, 5, 6, 2, 3, 2, 2), Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1), Array(2, 2, 3, 3, 2, 3, 1, 2, 1, 2, 3, 3, 2, 4, 7, 7, 4, 8, 8, 4, 4, 4, 5, 6, 6, 5, 5, 5, 6, 6, 7, 8, 5, 6, 5, 5, 5, 6, 6, 0, 0, 0, 4, 6, 7, 8, 1, 1, 4, 3), Array(3, 3, 2, 1, 2, 1, 3, 2, 7, 4, 3, 4, 3, 3, 5, 5, 2, 6, 6, 2, 2, 2, 3, 4, 4, 3, 3, 3, 2, 4, 5, 6, 6, 7, 1, 2, 2, 4, 7, 0, 0, 6, 0, 3, 4, 5, 4, 5, 5, 4), Array(5, 5, 6, 5, 4, 3, 5, 4, 9, 6, 5, 6, 5, 4, 3, 5, 3, 6, 4, 2, 4, 3, 3, 3, 4, 2, 2, 1, 1, 1, 2, 3, 8, 9, 2, 2, 3, 3, 9, 0, 0, 8, 4, 0, 1, 2, 6, 7, 7, 6), Array(6, 6, 7, 6, 5, 4, 6, 5, 10, 7, 6, 7, 6, 5, 3, 6, 4, 7, 4, 3, 5, 4, 4, 4, 5, 3, 2, 2, 2, 1, 2, 2, 9, 10, 3, 3, 4, 4, 10, 0, 0, 9, 5, 1, 0, 1, 7, 8, 8, 7), Array(7, 7, 8, 7, 6, 5, 7, 6, 11, 8, 7, 8, 7, 6, 3, 7, 5, 8, 4, 4, 6, 5, 5, 4, 6, 4, 3, 3, 3, 2, 2, 1, 10, 11, 4, 4, 5, 5, 11, 0, 0, 10, 6, 2, 1, 0, 8, 9, 9, 8), Array(2, 2, 3, 3, 2, 3, 1, 2, 3, 2, 3, 3, 2, 4, 7, 7, 4, 8, 8, 4, 4, 4, 5, 6, 6, 5, 5, 5, 6, 6, 7, 8, 5, 6, 5, 5, 5, 6, 6, 0, 0, 2, 4, 6, 7, 8, 0, 1, 4, 3), Array(3, 3, 4, 4, 3, 4, 2, 3, 2, 3, 4, 4, 3, 5, 8, 8, 5, 9, 9, 5, 5, 5, 6, 7, 7, 6, 6, 6, 7, 7, 8, 9, 6, 7, 6, 6, 6, 7, 7, 0, 0, 1, 5, 7, 8, 9, 1, 0, 5, 4), Array(2, 2, 3, 4, 3, 3, 2, 3, 6, 3, 4, 4, 3, 5, 7, 7, 4, 8, 8, 4, 4, 4, 5, 6, 6, 5, 5, 5, 5, 6, 7, 8, 1, 2, 4, 5, 5, 6, 2, 0, 0, 5, 3, 6, 7, 8, 3, 4, 0, 1), Array(1, 1, 2, 3, 2, 3, 1, 2, 5, 2, 3, 3, 2, 4, 7, 7, 4, 8, 8, 4, 4, 4, 5, 6, 6, 5, 5, 5, 6, 6, 7, 8, 2, 3, 5, 5, 5, 6, 3, 0, 0, 4, 4, 6, 7, 8, 2, 3, 1)));
    }
}

rule ("SUBROUTINE: BOT - RESET PATH FINDING") {
    event {
        Subroutine;
        BotResetPathFinding;
    }
    actions {
        Set Player Variable(Event Player, BotTargetPlayer, -1);
        Set Player Variable(Event Player, BotTargetPosition, -1);
        Set Player Variable(Event Player, BotPrevNodeId, -1);
        Set Player Variable(Event Player, BotClosestNodeIdToTarget, -1);
        Set Player Variable(Event Player, BotNextNodeId, -1);
        Set Player Variable(Event Player, BotNextNodePosition, -1);
        Set Player Variable(Event Player, BotIsPathFinding, False);
        Set Player Variable(Event Player, BotCancelPathFinding, False);
        Stop Throttle In Direction(Event Player);
    }
}

rule ("SUBROUTINE: BOT - START PATH FINDING") {
    event {
        Subroutine;
        BotStartPathFinding;
    }
    actions {
        "if eventPlayer.BotIsPathFinding == true:\r\n        return"
        Call Subroutine(BotGetNextNodeIdAndPosition);
        "eventPlayer.startFacing(directionTowards(eventPlayer.getPosition(), eventPlayer.BotNextNodePosition), 360, Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)"
        Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 1, To World, Replace existing throttle, Direction and Magnitude);
        Set Player Variable(Event Player, BotIsPathFinding, True);
    }
}

rule ("SUBROUTINE: BOT - GET NEXT NODE ID AND POSITION") {
    event {
        Subroutine;
        BotGetNextNodeIdAndPosition;
    }
    actions {
        "BOT JUST START FOLLOW PATH OR LOST NEXT NODE"
        If(Compare((Event Player).BotPrevNodeId, ==, -1));
            Set Player Variable(Event Player, BotClosestNodeIdToBot, Index Of Array Value(Global.NodePositions, First Of(Sorted Array(Filtered Array(Global.NodePositions, Is In Line of Sight(Add(Position Of(Event Player), Vector(0, 2, 0)), Current Array Element, Barriers Do Not Block LOS)), Distance Between(Position Of(Event Player), Current Array Element)))));
            Call Subroutine(BotGetClosestNodeIdToTarget);
        End;
        "NEXT NODE IS TARGET (DISTANCE TO TARGET NODE = 1)"
        If(Compare(Value In Array(Value In Array(Global.DistanceMatrix, (Event Player).BotClosestNodeIdToBot), (Event Player).BotClosestNodeIdToTarget), ==, 1));
            Set Player Variable(Event Player, BotNextNodeId, (Event Player).BotClosestNodeIdToTarget);
        Else;
            Set Player Variable(Event Player, BotShortestDistanceToTarget, 999);
            Set Player Variable(Event Player, BotCurrentDistanceToTarget, (Event Player).BotShortestDistanceToTarget);
            Set Player Variable(Event Player, BotTempArray, Value In Array(Global.NodeConnections, (Event Player).BotClosestNodeIdToBot));
            For Player Variable(Event Player, BotLoopIterator1, 0, Count Of((Event Player).BotTempArray), 1);
                Set Player Variable(Event Player, BotCurrentDistanceToTarget, Value In Array(Value In Array(Global.DistanceMatrix, Value In Array((Event Player).BotTempArray, (Event Player).BotLoopIterator1)), (Event Player).BotClosestNodeIdToTarget));
                If(Compare((Event Player).BotCurrentDistanceToTarget, <, (Event Player).BotShortestDistanceToTarget));
                    Set Player Variable(Event Player, BotShortestDistanceToTarget, (Event Player).BotCurrentDistanceToTarget);
                    Set Player Variable(Event Player, BotNextNodeId, Value In Array((Event Player).BotTempArray, (Event Player).BotLoopIterator1));
                End;
            End;
        End;
        "NEXT NODE IS HIGHER THAN BOT AND BOT DIDN'T REACH CLOSEST NODE"
        If(And(Compare(Subtract(Y Component Of(Position Of(Event Player)), Y Component Of(Value In Array(Global.NodePositions, (Event Player).BotNextNodeId))), <, -3), Compare((Event Player).BotPrevNodeId, !=, (Event Player).BotClosestNodeIdToBot)));
            Set Player Variable(Event Player, BotPrevNodeId, (Event Player).BotClosestNodeIdToBot);
            Set Player Variable(Event Player, BotNextNodeId, (Event Player).BotClosestNodeIdToBot);
        Else If(And(Compare(Value In Array(Value In Array(Global.DistanceMatrix, (Event Player).BotClosestNodeIdToBot), (Event Player).BotClosestNodeIdToTarget), ==, 1), Is In Line of Sight(Add(Position Of(Event Player), Vector(0, 1.6, 0)), Add((Event Player).BotTargetPosition, Vector(0, 2, 0)), Barriers Do Not Block LOS)));
            Set Player Variable(Event Player, BotNextNodePosition, (Event Player).BotTargetPosition);
            Abort;
        Else If(And(Not(Is In Line of Sight(Add(Position Of(Event Player), Vector(0, 1.6, 0)), Add(Value In Array(Global.NodePositions, (Event Player).BotNextNodeId), Vector(0, 2, 0)), Barriers Do Not Block LOS)), Compare((Event Player).BotPrevNodeId, !=, (Event Player).BotClosestNodeIdToBot)));
            Set Player Variable(Event Player, BotPrevNodeId, (Event Player).BotClosestNodeIdToBot);
            Set Player Variable(Event Player, BotNextNodeId, (Event Player).BotClosestNodeIdToBot);
        End;
        Set Player Variable(Event Player, BotNextNodePosition, Value In Array(Global.NodePositions, (Event Player).BotNextNodeId));
    }
}

rule ("SUBROUTINE: BOT - GET CLOSEST NODE ID AND POSITION TO TARGET") {
    event {
        Subroutine;
        BotGetClosestNodeIdToTarget;
    }
    actions {
        Set Player Variable(Event Player, BotTargetPosition, If-Then-Else(Compare((Event Player).BotTargetPlayer, !=, -1), Position Of((Event Player).BotTargetPlayer), (Event Player).BotTargetPosition));
        Set Player Variable(Event Player, BotClosestNodeIdToTarget, Index Of Array Value(Global.NodePositions, First Of(Sorted Array(Filtered Array(Global.NodePositions, Is In Line of Sight(Add((Event Player).BotTargetPosition, Vector(0, 2, 0)), Current Array Element, Barriers Do Not Block LOS)), Distance Between((Event Player).BotTargetPosition, Current Array Element)))));
    }
}

rule ("BOT: PATH FINDING - START") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Or(Compare((Event Player).BotTargetPosition, !=, -1), Compare((Event Player).BotTargetPlayer, !=, -1)) == True;
    }
    actions {
        Start Rule(BotStartPathFinding, Restart Rule);
    }
}

rule ("BOT: PATH FINDING - CANCEL") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        (Event Player).BotIsPathFinding == True;
        (Event Player).BotCancelPathFinding == True;
    }
    actions {
        Start Rule(BotResetPathFinding, Restart Rule);
    }
}

rule ("BOT: PATH FINDING - LOST THE NODE") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        (Event Player).BotIsPathFinding == True;
        Is In Line of Sight(Add(Position Of(Event Player), Vector(0, 1.6, 0)), Add((Event Player).BotNextNodePosition, Vector(0, 2.5, 0)), Barriers Do Not Block LOS) == False;
        Speed Of In Direction(Event Player, Throttle Of(Event Player)) < 2;
    }
    actions {
        Wait(0.5, Abort When False);
        "RESET PREV NODE ID TO INFORM BOT THAT IT LOST NEXT NODE"
        Set Player Variable(Event Player, BotPrevNodeId, -1);
        "TRY FIND NEW NEXT NODE"
        Call Subroutine(BotGetNextNodeIdAndPosition);
        Start Facing(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodeId), 360, To World, Direction and Turn Rate);
        Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 1, To World, Replace existing throttle, Direction and Magnitude);
    }
}

rule ("BOT: PATH FINDING - REACHED THE NODE") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        (Event Player).BotIsPathFinding == True;
        (Event Player).BotClosestNodeIdToTarget >= 0;
        Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(X Component Of((Event Player).BotNextNodePosition), 0, Z Component Of((Event Player).BotNextNodePosition))) < 0.85;
    }
    actions {
        Set Player Variable(Event Player, BotPrevNodeId, (Event Player).BotNextNodeId);
        Set Player Variable(Event Player, BotClosestNodeIdToBot, (Event Player).BotNextNodeId);
        "BOT'S TARGET IS PLAYER"
        If(Compare((Event Player).BotTargetPlayer, !=, -1));
            Call Subroutine(BotGetClosestNodeIdToTarget);
        End;
        Set Player Variable(Event Player, BotCurrentDistanceToTarget, Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Vector(X Component Of((Event Player).BotTargetPosition), 0, Z Component Of((Event Player).BotTargetPosition))));
        "BOT REACHED THE TARGET NODE OR TARGET POSITION"
        If(Or(Compare((Event Player).BotNextNodeId, ==, (Event Player).BotClosestNodeIdToTarget), Compare((Event Player).BotCurrentDistanceToTarget, <=, 0.85)));
            "BOT DIDN'T REACH TARGET POSITION"
            If(Compare((Event Player).BotCurrentDistanceToTarget, >, 0.85));
                Set Player Variable(Event Player, BotNextNodePosition, (Event Player).BotTargetPosition);
                Skip(6);
            Else;
                Call Subroutine(BotResetPathFinding);
                Abort;
            End;
        End;
        "CONTINUE FOLLOW PATH"
        Call Subroutine(BotGetNextNodeIdAndPosition);
        //lbl_0:
        Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 1, To World, Replace existing throttle, Direction and Magnitude);
    }
}

disabled rule("=== PATH BUILDER MODE IMPORT ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("GLOBAL: GAME MODE INIT - WORKSHOP SETTINGS") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(IsDebug, False);
        Set Global Variable(IsDebugAINavigation, False);
        Set Global Variable(GateMaxHealth, Workshop Setting Integer(Custom String("DEFEND CASTLE", Null, Null, Null), Custom String("GATE MAX HEALTH", Null, Null, Null), 500, 100, 1000, 0));
        Set Global Variable(IsStoryHeroes, Workshop Setting Toggle(Custom String("DEFEND CASTLE", Null, Null, Null), Custom String("Story Heroes", Null, Null, Null), True, 0));
        Set Global Variable(SelfNanoWorkshopSetting, Workshop Setting Toggle(Custom String("Ana Self Nano", Null, Null, Null), Custom String("Ana can nano herself even if there are other players (only if no player targeted)", Null, Null, Null), False, 0));
    }
}

rule ("GLOBAL: GAME MODE INIT - COMMON PROPERTIES") {
    event {
        Ongoing - Global;
    }
    actions {
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("DEFEND CASTLE v0.6.c121 BY HUKUTA94#2589\r\nmodified by ShuriZma#2349\r\nDiscord: discord.shurizma.de\r\n{0}", Custom String("Special Thanks to:\nShingen#21859 for the Abilities,\nLemonAid#11644 for the Hero Talents &\nJosbird for teaching me about Menus{0}", Custom String("{0}", Custom String("   \nPS: SHINGEN PLS COME BACK", Null, Null, Null), Null, Null), Null, Null), Null, Null), Right, -1000, Null, Null, Color(White), Visible To, Default Visibility);
        Set Global Variable(GateRepairPosition, Vector(153, 8, -46.5));
        Set Global Variable(GatePosition, Vector(148.8, 6, -46.4));
        Set Global Variable(BallSpawnPositions, Array(Vector(104, 7, -46), Vector(106, 2, -31)));
        Set Global Variable(SniperPositions, Array(Vector(154, 18, -22.6), Vector(86, 12, -46.6), Vector(80.88, 11.3, -71.6), Vector(98, 9, -19)));
        Set Global Variable(ZenSpawnPositions, Array(Vector(79.5, 5, -100), Vector(90, 4, -88), Vector(65, 11, -70), Vector(85, 4, -68), Vector(96, 2, -73), Vector(84, 7, -47), Vector(95, 9, -34), Vector(108, 1.7, -28), Vector(113, 7, -37), Vector(123, 5, -19), Vector(144, 5, -19), Vector(123, 6, -39), Vector(123, 6, -61), Vector(129, 6, -30.5), Vector(135, 6, -63)));
        Set Global Variable(PlayerSpawnPositions, Array(Vector(153.3, 10, -63.8), Vector(153.3, 10, -61.7), Vector(153.3, 10, -31.7), Vector(153.3, 10, -29.6)));
        Set Global Variable(BigBossSpawnPositions, Array(Vector(78, 4, -84), Vector(95, 4, -82)));
        Set Global Variable(BastionTargetPositions, Array(Vector(131, 12, -62), Vector(115, 7, -46), Objective Position(2), Vector(136, 10, -27)));
        Set Global Variable(SpawnPositionMaxId, 2);
        Set Global Variable(BotOrisaTargetPosition, Vector(104, 7, -46));
        Set Global Variable(BotEchoRespawnPosition, Vector(130, 23, -44));
        Set Global Variable(BotEchoTeleportPositions, Array(Vector(88, 23, -79), Vector(108, 18, -27)));
        Set Global Variable(DefaultHeroBotsPool, Array(Hero(Zenyatta), Hero(Widowmaker), Null, Hero(Bastion), Hero(Echo), Hero(Bastion)));
        Set Global Variable(ZenRespawnTime, 10);
        Set Global Variable(GameLogicCountOfUniqueHeroes, 5);
        Set Global Variable(lastBoss, Array(Null, Null, Null, Null));
        Create Effect(All Players(Team 1), Ring, Color(Sky Blue), Vector(186, 11, -46.5), 9, Visible To Position and Radius);
    }
}

disabled rule("PLAYER: DEBUG - PRESS  INTERACT")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Host Player == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		disabled Modify Player Score(Event Player, 10);
		disabled Global.GateHealth -= 5;
		disabled Start Rule(GateProgressBarColor, Restart Rule);
		Global.TimeSec = 59;
		Set Status(Event Player, Null, Phased Out, 9999);
		disabled Set Ultimate Charge(Event Player, 100);
		disabled Kill(Event Player, Null);
		disabled Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Objective Position(2), Vector(0, 0, 0));
	}
}

rule ("GLOBAL: DEBUG - AI NAVIGATION") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.IsDebugAINavigation == True;
    }
    actions {
        For Global Variable(LoopIterator1, 0, Count Of(Global.NodePositions), 1);
            Create Effect(All Players(All Teams), Sphere, Color(Red), Value In Array(Global.NodePositions, Global.LoopIterator1), 0.85, Visible To);
            Create In-World Text(All Players(All Teams), Custom String("NODE {0}", Global.LoopIterator1, Null, Null), Value In Array(Global.NodePositions, Global.LoopIterator1), 1.2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
        End;
    }
}

disabled rule("GLOBAL: DEBUG - CREATE BOTS")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is In Setup == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Objective Position(2), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Orisa), Team 2, -1, Objective Position(2), Vector(0, 0, 0));
	}
}

disabled rule("PLAYER: DEBUG - INFOS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.IsDebug == True;
		Host Player == Event Player;
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("POS {0}\r\nFACING {1}", Position Of(Event Player), Facing Direction Of(Event Player)),
			Null, Null, Left, -99, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String("SERVER PERFORMANCE\r\nLOAD {0}%\r\nPEAK {1}%\r\nAVG {2}%", Server Load,
			Server Load Peak, Server Load Average), Null, Null, Left, -99, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		disabled Create Progress Bar HUD Text(Event Player, 45, Custom String("45 / 100 KILLS"), Left, -99, Color(Blue), Color(White),
			Visible To Values and Color, Default Visibility);
		disabled Create HUD Text(Event Player, Custom String("{0}", Hero Icon String(Hero Of(Event Player))), Null, Custom String(
			"LEVEL 1 - 50 AMMO CLIP"), Left, -99, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		"ЭФФЕКТ С ОФФСЕТОМ ОТ ПОЗИЦИИ ГЛАЗ"
		disabled Create Beam Effect(All Players(All Teams), Bad Beam, Eye Position(Event Player) - Vector(0, 0.700, 0) + Facing Direction Of(
			Event Player) * 3, Eye Position(Event Player) + Facing Direction Of(Event Player) * 50, Color(Purple),
			Visible To Position and Radius);
	}
}

disabled rule("=== TEAM UPGRADES ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("GLOBAL: TEAM UPGRADES - INIT") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable At Index(UpgradeMaxAmmoMaxValue, 0, 250);
        Set Global Variable At Index(UpgradeMaxAmmoMaxValue, 1, 500);
        Set Global Variable At Index(UpgradeMaxAmmoMaxValue, 2, 1000);
        Set Global Variable At Index(UpgradeCriticalDamageMaxValue, 0, 10);
        Set Global Variable At Index(UpgradeCriticalDamageMaxValue, 1, 10);
        Set Global Variable At Index(UpgradeCriticalDamageMaxValue, 2, 10);
        Set Global Variable At Index(UpgradePlayerMaxHealthMaxValue, 0, 2500);
        Set Global Variable At Index(UpgradePlayerMaxHealthMaxValue, 1, 5000);
        Set Global Variable At Index(UpgradePlayerMaxHealthMaxValue, 2, 10000);
        Set Global Variable At Index(UpgradeGateMaxHealthMaxValue, 0, Round To Integer(Add(Global.GateMaxHealth, Multiply(Global.GateMaxHealth, 0.5)), Up));
        Set Global Variable At Index(UpgradeGateMaxHealthMaxValue, 1, Multiply(2, First Of(Global.UpgradeGateMaxHealthMaxValue)));
        Set Global Variable At Index(UpgradeGateMaxHealthMaxValue, 2, Multiply(2, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 1)));
        Abort If(Compare(Global.IsDebug, ==, False));
        Set Global Variable At Index(UpgradeMaxAmmoMaxValue, 0, 1);
        Set Global Variable At Index(UpgradeCriticalDamageMaxValue, 0, 1);
        Set Global Variable At Index(UpgradePlayerMaxHealthMaxValue, 0, 1);
        Set Global Variable At Index(UpgradeGateMaxHealthMaxValue, 0, 1);
        Set Global Variable At Index(UpgradeMaxAmmoMaxValue, 1, 1);
        Set Global Variable At Index(UpgradeCriticalDamageMaxValue, 1, 1);
        Set Global Variable At Index(UpgradePlayerMaxHealthMaxValue, 1, 1);
        Set Global Variable At Index(UpgradeGateMaxHealthMaxValue, 1, 1);
        Set Global Variable At Index(UpgradeMaxAmmoMaxValue, 2, 1);
        Set Global Variable At Index(UpgradeCriticalDamageMaxValue, 2, 1);
        Set Global Variable At Index(UpgradePlayerMaxHealthMaxValue, 2, 1);
        Set Global Variable At Index(UpgradeGateMaxHealthMaxValue, 2, 1);
    }
}

rule ("GLOBAL: UPGRADE - GATE'S MAX HEALTH - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeGateMaxHealthValue >= First Of(Global.UpgradeGateMaxHealthMaxValue);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("GATE'S MAX HEALTH UNLOCKED!", Null, Null, Null));
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Global.GatePosition, 5);
        Play Effect(All Players(All Teams), Buff Impact Sound, Color(Green), Global.GatePosition, 100);
        Set Global Variable(GateMaxHealth, First Of(Global.UpgradeGateMaxHealthMaxValue));
        Set Global Variable(GateHealth, Global.GateMaxHealth);
        Destroy HUD Text(First Of(Global.UpgradeGateMaxHealthHudId));
        Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("GATE'S MAX HEALTH: {0} HP", First Of(Global.UpgradeGateMaxHealthMaxValue), Null, Null), Right, 1, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeGateMaxHealthHudId, 0, Last Text ID);
        Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String("2X GATE REPAIR", Null, Null, Null), Custom String("REPAIR GATE {0}/{1} HP", Global.UpgradeGateMaxHealthValue, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 1), Null), Left, 12, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeGateMaxHealthHudId, 1, Last Text ID);
        Start Rule(GateProgressBarColor, Restart Rule);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - GATE'S MAX HEALTH 2 - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeGateMaxHealthValue >= Value In Array(Global.UpgradeGateMaxHealthMaxValue, 1);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("2X GATE REPAIR UNLOCKED!", Null, Null, Null));
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Global.GatePosition, 5);
        Play Effect(All Players(All Teams), Buff Impact Sound, Color(Green), Global.GatePosition, 100);
        Destroy HUD Text(Value In Array(Global.UpgradeGateMaxHealthHudId, 1));
        Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("2X GATE REPAIR", Null, Null, Null), Right, 2, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeGateMaxHealthHudId, 1, Last Text ID);
        Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String("2X AUTO-REPAIR", Null, Null, Null), Custom String("REPAIR GATE {0}/{1} HP", Global.UpgradeGateMaxHealthValue, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 2), Null), Left, 12, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeGateMaxHealthHudId, 2, Last Text ID);
        Set Global Variable(GateHealth, Global.GateMaxHealth);
        Start Rule(GateProgressBarColor, Restart Rule);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - GATE'S MAX HEALTH 3 - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeGateMaxHealthValue >= Value In Array(Global.UpgradeGateMaxHealthMaxValue, 2);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("2X AUTO-REPAIR UNLOCKED!", Null, Null, Null));
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Global.GatePosition, 5);
        Play Effect(All Players(All Teams), Buff Impact Sound, Color(Green), Global.GatePosition, 100);
        Destroy HUD Text(Value In Array(Global.UpgradeGateMaxHealthHudId, 2));
        Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("2X AUTO-REPAIR", Null, Null, Null), Right, 3, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeGateMaxHealthHudId, 2, Last Text ID);
        Set Global Variable(GateHealth, Global.GateMaxHealth);
        Start Rule(GateProgressBarColor, Restart Rule);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("PLAYER: UPGRADE - PLAYER'S MAX HEALTH - DEALT HEALING") {
    event {
        Player Received Healing;
        Team 1;
        All;
    }
    conditions {
        Is Game In Progress == True;
        "@Condition healer != eventPlayer"
        Global.UpgradePlayerMaxHealthValue < Value In Array(Global.UpgradePlayerMaxHealthMaxValue, 2);
    }
    actions {
        Modify Global Variable(UpgradePlayerMaxHealthValue, Add, Event Healing);
    }
}

rule ("GLOBAL: UPGRADE - PLAYER'S MAX HEALTH - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradePlayerMaxHealthValue >= First Of(Global.UpgradePlayerMaxHealthMaxValue);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("PLAYER'S MAX HEALTH UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(First Of(Global.UpgradePlayerMaxHealthHudId));
        Create HUD Text(All Players(Team 1), Icon String(Plus), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("PLAYER'S MAX HEALTH +50%", Null, Null, Null), Right, 4, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradePlayerMaxHealthHudId, 0, Last Text ID);
        Create HUD Text(All Players(Team 1), Icon String(Plus), Custom String("Up You Go: You respawn twice as fast", Null, Null, Null), Custom String("HEAL PLAYERS {0}/{1} HP", Round To Integer(Global.UpgradePlayerMaxHealthValue, Down), Value In Array(Global.UpgradePlayerMaxHealthMaxValue, 1), Null), Left, 13, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradePlayerMaxHealthHudId, 1, Last Text ID);
        For Global Variable(LoopIterator1, 0, Number Of Players(Team 1), 1);
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Position Of(Value In Array(All Players(Team 1), Global.LoopIterator1)), 1);
            Play Effect(All Players(All Teams), Buff Impact Sound, Color(Yellow), Position Of(Value In Array(All Players(Team 1), Global.LoopIterator1)), 100);
        End;
        Set Global Variable(MaxHealthDone, 50);
        Set Player Variable(All Players(Team 1), PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((All Players(Team 1)).Abilities, 14), 5)));
        Set Max Health(All Players(Team 1), (All Players(Team 1)).PlayerHealth);
        Heal(All Players(Team 1), Null, 9999);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - PERK UP YOU GO - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradePlayerMaxHealthValue >= Value In Array(Global.UpgradePlayerMaxHealthMaxValue, 1);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("UP YOU GO UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(Value In Array(Global.UpgradePlayerMaxHealthHudId, 1));
        Create HUD Text(All Players(Team 1), Icon String(Plus), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("Up You Go", Null, Null, Null), Right, 5, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradePlayerMaxHealthHudId, 1, Last Text ID);
        Create HUD Text(All Players(Team 1), Icon String(Plus), Custom String("PLAYER'S MAX HEALTH +100%", Null, Null, Null), Custom String("HEAL PLAYERS {0}/{1} HP", Round To Integer(Global.UpgradePlayerMaxHealthValue, Down), Value In Array(Global.UpgradePlayerMaxHealthMaxValue, 2), Null), Left, 13, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradePlayerMaxHealthHudId, 2, Last Text ID);
        Set Respawn Max Time(All Players(Team 1), 5);
        Heal(All Players(Team 1), Null, 9999);
        For Global Variable(LoopIterator1, 0, Number Of Players(Team 1), 1);
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Position Of(Value In Array(All Players(Team 1), Global.LoopIterator1)), 1);
            Play Effect(All Players(All Teams), Buff Impact Sound, Color(Yellow), Position Of(Value In Array(All Players(Team 1), Global.LoopIterator1)), 100);
        End;
        Set Global Variable At Index(Perk, 2, 1);
        Create HUD Text(All Players(Team 1), Null, Null, Custom String("Up You Go", Null, Null, Null), Left, 917, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Set Player Variable At Index(All Players(Team 1), AbilityHUD, 17, Last Text ID);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - PLAYER'S MAX HEALTH 2 - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradePlayerMaxHealthValue >= Value In Array(Global.UpgradePlayerMaxHealthMaxValue, 2);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("PLAYER'S MAX HEALTH 2 UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(Value In Array(Global.UpgradePlayerMaxHealthHudId, 2));
        Create HUD Text(All Players(Team 1), Icon String(Plus), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("PLAYER'S MAX HEALTH +100%", Null, Null, Null), Right, 6, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradePlayerMaxHealthHudId, 2, Last Text ID);
        For Global Variable(LoopIterator1, 0, Number Of Players(Team 1), 1);
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Position Of(Value In Array(All Players(Team 1), Global.LoopIterator1)), 1);
            Play Effect(All Players(All Teams), Buff Impact Sound, Color(Yellow), Position Of(Value In Array(All Players(Team 1), Global.LoopIterator1)), 100);
        End;
        Set Global Variable(MaxHealthDone, 150);
        Set Player Variable(All Players(Team 1), PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((All Players(Team 1)).Abilities, 14), 5)));
        Set Max Health(All Players(Team 1), (All Players(Team 1)).PlayerHealth);
        Heal(All Players(Team 1), Null, 9999);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("PLAYER: UPGRADE - CRITICAL DAMAGE - DEALT KILL") {
    event {
        Player Dealt Final Blow;
        Team 1;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Event Was Critical Hit == True;
        Hero Of(Victim) == Hero(Widowmaker);
        Global.UpgradeCriticalDamageValue < First Of(Global.UpgradeCriticalDamageMaxValue);
    }
    actions {
        Modify Global Variable(UpgradeCriticalDamageValue, Add, 1);
        Small Message(All Players(Team 1), Custom String("CRITICAL DAMAGE CHALLENGE +1", Null, Null, Null));
    }
}

rule ("GLOBAL: UPGRADE - CRITICAL DAMAGE - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeCriticalDamageValue >= First Of(Global.UpgradeCriticalDamageMaxValue);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("CRITICAL DAMAGE 150% UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(First Of(Global.UpgradeCriticalDamageHudId));
        Create HUD Text(All Players(Team 1), Icon String(Skull), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("CRITICAL DAMAGE 150%", Null, Null, Null), Right, 7, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeCriticalDamageHudId, 0, Last Text ID);
        Create HUD Text(All Players(Team 1), Icon String(Skull), Custom String("Sharpshooter: Deal 40% more damage to enemies that are further than 15 meters away", Null, Null, Null), Custom String("KILL ECHO {0}/{1}", Global.UpgradePerkSharpshooterValue, Value In Array(Global.UpgradeCriticalDamageMaxValue, 1), Null), Left, 14, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeCriticalDamageHudId, 1, Last Text ID);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("PLAYER: UPGRADE - CRITICAL DAMAGE - UNLOCKED") {
    event {
        Player Dealt Damage;
        Team 1;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Event Was Critical Hit == True;
        Global.UpgradeCriticalDamageValue >= First Of(Global.UpgradeCriticalDamageMaxValue);
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 0.5));
    }
}

rule ("PLAYER: UPGRADE - PERK SHARPSHOOTER - DEALT KILL") {
    event {
        Player Dealt Final Blow;
        Team 1;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Hero Of(Victim) == Hero(Echo);
        Global.UpgradePerkSharpshooterValue < Value In Array(Global.UpgradeCriticalDamageMaxValue, 1);
        Global.UpgradeCriticalDamageValue >= First Of(Global.UpgradeCriticalDamageMaxValue);
    }
    actions {
        Modify Global Variable(UpgradePerkSharpshooterValue, Add, 1);
        Small Message(All Players(Team 1), Custom String("SHARPSHOOTER CHALLENGE +1", Null, Null, Null));
    }
}

rule ("GLOBAL: UPGRADE - PERK SHARPSHOOTER - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradePerkSharpshooterValue >= Value In Array(Global.UpgradeCriticalDamageMaxValue, 1);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("SHARPSHOOTER UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(Value In Array(Global.UpgradeCriticalDamageHudId, 1));
        Create HUD Text(All Players(Team 1), Icon String(Skull), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("Sharpshooter", Null, Null, Null), Right, 8, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeCriticalDamageHudId, 1, Last Text ID);
        Create HUD Text(All Players(Team 1), Icon String(Skull), Custom String("-10% BOSS HEALTH", Null, Null, Null), Custom String("KILL Bosses {0}/{1}", Global.UpgradeBossHealthValue, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2), Null), Left, 14, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeCriticalDamageHudId, 2, Last Text ID);
        Set Global Variable At Index(Perk, 0, 1);
        Create HUD Text(All Players(Team 1), Null, Null, Custom String("Sharpshooter", Null, Null, Null), Left, 918, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Set Player Variable At Index(All Players(Team 1), AbilityHUD, 18, Last Text ID);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - -10% BOSS HEALTH - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeBossHealthValue >= Value In Array(Global.UpgradeCriticalDamageMaxValue, 2);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("-10% BOSS HEALTH UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(Value In Array(Global.UpgradeCriticalDamageHudId, 2));
        Create HUD Text(All Players(Team 1), Icon String(Skull), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("-10% BOSS HEALTH", Null, Null, Null), Right, 9, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeCriticalDamageHudId, 2, Last Text ID);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("PLAYER: UPGRADE - MAX AMMO - DEALT KILL") {
    event {
        Player Dealt Final Blow;
        Team 1;
        All;
    }
    conditions {
        Is Game In Progress == True;
        Hero Of(Victim) == Hero(Zenyatta);
        Global.UpgradeMaxAmmoValue < Value In Array(Global.UpgradeMaxAmmoMaxValue, 2);
    }
    actions {
        If(Compare((Event Player).isBoss, ==, 1));
            Modify Global Variable(UpgradeMaxAmmoValue, Add, 10);
        Else;
            Modify Global Variable(UpgradeMaxAmmoValue, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - MAX AMMO - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeMaxAmmoValue >= First Of(Global.UpgradeMaxAmmoMaxValue);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("MAX AMMO 200% UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(First Of(Global.UpgradeMaxAmmoHudId));
        Create HUD Text(All Players(Team 1), Icon String(Asterisk), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("MAX AMMO 200%", Null, Null, Null), Right, 10, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeMaxAmmoHudId, 0, Last Text ID);
        Create HUD Text(All Players(Team 1), Icon String(Asterisk), Custom String("Bulletstorm: Your weapon can hold unlimited ammo", Null, Null, Null), Custom String("KILL {0}: {1}/{2}", Hero(Zenyatta), Global.UpgradeMaxAmmoValue, Value In Array(Global.UpgradeMaxAmmoMaxValue, 1)), Left, 15, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeMaxAmmoHudId, 1, Last Text ID);
        For Global Variable(LoopIterator1, 0, Number Of Players(Team 1), 1);
            Set Max Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 0, Multiply(Max Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 0), 2));
            Set Max Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 1, Multiply(Max Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 1), 2));
            Set Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 0, Max Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 0));
            Set Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 1, Max Ammo(Value In Array(All Players(Team 1), Global.LoopIterator1), 1));
        End;
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - PERK BULLETSTORM - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeMaxAmmoValue >= Value In Array(Global.UpgradeMaxAmmoMaxValue, 1);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("BULLETSTORM UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(Value In Array(Global.UpgradeMaxAmmoHudId, 1));
        Create HUD Text(All Players(Team 1), Icon String(Asterisk), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("Bulletstorm", Null, Null, Null), Right, 11, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeMaxAmmoHudId, 1, Last Text ID);
        Create HUD Text(All Players(Team 1), Icon String(Asterisk), Custom String("+50% DAMAGE", Null, Null, Null), Custom String("KILL {0}: {1}/{2}", Hero(Zenyatta), Global.UpgradeMaxAmmoValue, Value In Array(Global.UpgradeMaxAmmoMaxValue, 2)), Left, 15, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeMaxAmmoHudId, 2, Last Text ID);
        Set Global Variable At Index(Perk, 1, 1);
        Create HUD Text(All Players(Team 1), Null, Null, Custom String("Bulletstorm", Null, Null, Null), Left, 919, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Set Player Variable At Index(All Players(Team 1), AbilityHUD, 19, Last Text ID);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

rule ("GLOBAL: UPGRADE - +50% DAMAGE - DONE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.UpgradeMaxAmmoValue >= Value In Array(Global.UpgradeMaxAmmoMaxValue, 1);
    }
    actions {
        Big Message(All Players(Team 1), Custom String("+50% DAMAGE UNLOCKED!", Null, Null, Null));
        Destroy HUD Text(Value In Array(Global.UpgradeMaxAmmoHudId, 2));
        Create HUD Text(All Players(Team 1), Icon String(Asterisk), Custom String("{0}", Icon String(Checkmark), Null, Null), Custom String("+50% DAMAGE", Null, Null, Null), Right, 12, Color(Green), Color(Green), Color(Green), Visible To, Default Visibility);
        Set Global Variable At Index(UpgradeMaxAmmoHudId, 2, Last Text ID);
        Set Global Variable(DamageDone, 50);
        Set Player Variable(All Players(Team 1), DamageDealt, Add(Add(100, Global.DamageDone), Multiply(Value In Array((All Players(Team 1)).Abilities, 13), 5)));
        Set Damage Dealt(All Players(Team 1), (All Players(Team 1)).DamageDealt);
        Modify Global Variable(challengeCount, Add, 1);
    }
}

disabled rule("=== GAME PHASES ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("GLOBAL: ASEMBLING PHASE - MAKE CHALLENGES HUDS") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        If(Global.IsDebug);
            Set Match Time(1);
        Else;
            Disable Inspector Recording;
            Set Match Time(20);
        End;
        Create In-World Text(All Players(Team 1), Custom String("  {0}\r\nREPAIR\r\n  {1}", Hero Icon String(Hero(Torbjörn)), Ability Icon String(Hero(Bastion), Button(Secondary Fire)), Null), Add(Global.GatePosition, Vector(0, 1.4, 0)), 1.2, Do Not Clip, Visible To, Color(White), Default Visibility);
        Create HUD Text(All Players(Team 1), Null, Null, Custom String("TEAM CHALLENGES", Null, Null, Null), Left, 11, Null, Null, Color(White), Visible To, Default Visibility);
        "UPGRADE - GATE'S MAX HEALTH"
        Create HUD Text(All Players(Team 1), Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Custom String("GATE'S MAX HEALTH: {0} HP", First Of(Global.UpgradeGateMaxHealthMaxValue), Null, Null), Custom String("REPAIR GATE {0}/{1} HP", Global.UpgradeGateMaxHealthValue, First Of(Global.UpgradeGateMaxHealthMaxValue), Null), Left, 12, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeGateMaxHealthHudId, 0, Last Text ID);
        "hudSubheader(getPlayers(Team.1), \"  \\r\\n  \", HudPosition.LEFT, 2, Color.WHITE, HudReeval.VISIBILITY, SpecVisibility.DEFAULT)\r\nUPGRADE - PLAYER'S MAX HEALTH"
        Create HUD Text(All Players(Team 1), Icon String(Plus), Custom String("PLAYER'S MAX HEALTH +50%", Null, Null, Null), Custom String("HEAL PLAYERS {0}/{1} HP", Round To Integer(Global.UpgradePlayerMaxHealthValue, Down), First Of(Global.UpgradePlayerMaxHealthMaxValue), Null), Left, 13, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradePlayerMaxHealthHudId, 0, Last Text ID);
        "hudSubheader(getPlayers(Team.1), \" \\r\\n \", HudPosition.LEFT, 4, Color.WHITE, HudReeval.VISIBILITY, SpecVisibility.DEFAULT)\r\nUPGRADE - CRITICAL DAMAGE"
        Create HUD Text(All Players(Team 1), Icon String(Skull), Custom String("CRITICAL DAMAGE 150%", Null, Null, Null), Custom String("KILL WIDOW WITH HEADSHOT: {0}/{1}", Global.UpgradeCriticalDamageValue, First Of(Global.UpgradeCriticalDamageMaxValue), Null), Left, 14, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeCriticalDamageHudId, 0, Last Text ID);
        "hudSubheader(getPlayers(Team.1), \" \\r\\n \", HudPosition.LEFT, 6, Color.WHITE, HudReeval.VISIBILITY, SpecVisibility.DEFAULT)\r\nUPGRADE - MAX AMMO"
        Create HUD Text(All Players(Team 1), Icon String(Asterisk), Custom String("MAX AMMO 200%", Null, Null, Null), Custom String("KILL {0}: {1}/{2}", Hero(Zenyatta), Global.UpgradeMaxAmmoValue, First Of(Global.UpgradeMaxAmmoMaxValue)), Left, 15, Color(Orange), Color(White), Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(UpgradeMaxAmmoHudId, 0, Last Text ID);
        Create HUD Text(All Players(Team 1), Custom String("HOLD {0} - Reload to open the shop", Input Binding String(Button(Reload)), Null, Null), Null, Null, Top, 1000, Color(Yellow), Null, Null, Visible To and String, Default Visibility);
    }
}

rule ("GLOBAL: SETUP PHASE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is In Setup == True;
    }
    actions {
        If(Global.IsDebug);
            Set Match Time(1);
        Else;
            Set Match Time(20);
        End;
        Set Objective Description(All Players(All Teams), Custom String("DEFEND GATE", Null, Null, Null), Visible To and String);
    }
}

rule ("GLOBAL: GAME IN PROGRESS") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        Set Match Time(3599);
        Pause Match Time;
        Disable Built-In Game Mode Scoring;
        Disable Built-In Game Mode Announcer;
        Disable Built-In Game Mode Completion;
        Disable Game Mode HUD(All Players(All Teams));
        Disable Game Mode In-World UI(All Players(All Teams));
        Set Global Variable(GateHealth, Global.GateMaxHealth);
        Set Global Variable(GateHealthChase, Global.GateHealth);
        Set Global Variable(GateProgressBarColorComponent, 255);
        Set Global Variable(GateProgressBarColorCurrent, Color(White));
        Create Progress Bar HUD Text(All Players(Team 1), Divide(Multiply(Global.GateHealthChase, 100), Global.GateMaxHealth), Custom String("GATE {0}/{1}", Global.GateHealth, Global.GateMaxHealth, Null), Top, 1, Global.GateProgressBarColorCurrent, Color(White), Visible To Values and Color, Default Visibility);
        Create HUD Text(All Players(Team 1), Null, Null, Custom String("SURVIVED TIME:  {0}:{1}", Global.TimeMin, If-Then-Else(Compare(Global.TimeSec, <, 10), Custom String("0{0}", Global.TimeSec, Null, Null), Global.TimeSec), Null), Top, 2, Null, Null, Color(White), Visible To and String, Default Visibility);
        Start Rule(GameLogicWave0, Do Nothing);
    }
}

disabled rule("=== GAME - MAIN LOGIC ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("GLOBAL: DEFEAT") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.IsDebug == False;
        Global.GateHealth <= 0;
    }
    actions {
        Declare Team Victory(Team 2);
    }
}

rule ("GLOBAL: TIMER - MAIN GAME LOOP") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        "@Condition GateHealth > 0"
        Wait(1, Ignore Condition);
        Modify Global Variable(TimeSec, Add, 1);
        If(Compare(Global.TimeSec, ==, 60));
            Set Global Variable(TimeSec, 0);
            Modify Global Variable(TimeMin, Add, 1);
            Set Global Variable(Time5Min, Round To Integer(Divide(Global.TimeMin, 5), Down));
            Set Global Variable(Time10Min, Round To Integer(Divide(Global.TimeMin, 10), Down));
            Modify Global Variable(SpawnPositionMaxId, Add, 1);
        Else If(Compare(Global.TimeSec, ==, 30));
            Modify Global Variable(SpawnPositionMaxId, Add, 1);
        End;
        Loop If Condition Is True;
    }
}

rule ("SUBROUTINE: GAME LOGIC - ADD NEXT HERO IN GAME") {
    event {
        Subroutine;
        GameLogicAddNextHeroInGame;
    }
    actions {
        "REDUCE RESPAWN TIME FOR ZENS\r\nZenRespawnTime -= 1.5\r\nZenRespawnTime = max(1, ZenRespawnTime)\r\n([player for player in getPlayers(Team.2) if player.getCurrentHero() == DefaultHeroBotsPool[0]]).setRespawnTime(ZenRespawnTime)\r\nALL HEROES WAS ADDED IN GAME"
        Abort If(Compare(Global.DefaultHeroBotsPoolCurrentId, ==, Subtract(Count Of(Global.DefaultHeroBotsPool), 1)));
        Modify Global Variable(DefaultHeroBotsPoolCurrentId, Add, 1);
        "ВРЕМЕННЫЙ КОСТЫЛЬ ЧТОБЫ ЭХО ЗАМЕНИЛА ХАМСТЕРА"
        If(Compare(Value In Array(Global.DefaultHeroBotsPool, Global.DefaultHeroBotsPoolCurrentId), ==, Hero(Echo)));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Wrecking Ball)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Wrecking Ball))))));
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(0.05, Ignore Condition);
            Create Dummy Bot(Hero(Echo), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
            Abort;
        End;
        "ABORT IF NEXT HERO IN ARRAY ORDER IS NULL"
        Abort If(Compare(Value In Array(Global.DefaultHeroBotsPool, Global.DefaultHeroBotsPoolCurrentId), ==, Null));
        "WAITING FOR ANY ZEN TO DIE"
        Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
        "REPLACE HIM TO A NEW HERO"
        Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
        Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
        Wait(0.05, Ignore Condition);
        Create Dummy Bot(Value In Array(Global.DefaultHeroBotsPool, Global.DefaultHeroBotsPoolCurrentId), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
    }
}

rule ("SUBROUTINE: GAME LOGIC - SET BOT PROPERTIES") {
    event {
        Subroutine;
        GameLogicSetBotProperties;
    }
    actions {
        Abort If(Compare((Event Player).BotIsOrisaChild, ==, True));
        If(Compare(Global.TimeMin, >=, 10));
            If(Compare(Filtered Array(Global.lastBoss, Compare(Current Array Element, ==, Hero Of(Event Player))), ==, False));
                If(Compare(Global.activeBoss, ==, False));
                    If(Compare(Global.bossTrigger, <, Global.TimeMin));
                        Set Global Variable(bossTrigger, Global.TimeMin);
                        Set Global Variable(activeBoss, Event Player);
                        Set Player Variable(Event Player, isBoss, 1);
                        Big Message(All Players(Team 1), Custom String("BOSS SPAWNED - {0}", Hero Of(Event Player), Null, Null));
                    End;
                End;
            End;
        End;
        "PROPERTIES BY DEFAULT"
        Set Gravity(Event Player, 100);
        Set Damage Dealt(Event Player, 100);
        Set Respawn Max Time(Event Player, 10);
        Start Scaling Player(Event Player, 1, False);
        "INDIVIDUAL HERO'S PROPERTIES"
        If(Compare(Hero Of(Event Player), ==, Hero(Zenyatta)));
            If(Compare((Event Player).isBoss, ==, 1));
                Set Move Speed(Event Player, 30);
                Set Max Health(Event Player, Divide(Multiply(5, Add(100, Multiply(Global.TimeMin, 10))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
                Start Scaling Player(Event Player, 1.5, False);
            Else;
                If(Compare(Add(Add(20, Multiply(3, Number Of Players(Team 1))), Multiply(3, Global.TimeMin)), >, 75));
                    Set Move Speed(Event Player, 75);
                Else;
                    Set Move Speed(Event Player, Add(Add(20, Multiply(3, Number Of Players(Team 1))), Multiply(3, Global.TimeMin)));
                End;
                Set Max Health(Event Player, Add(100, Multiply(Global.TimeMin, 10)));
            End;
        Else If(Compare(Hero Of(Event Player), ==, Hero(Wrecking Ball)));
            If(Compare((Event Player).isBoss, ==, 1));
                Set Move Speed(Event Player, 20);
                Set Max Health(Event Player, Divide(Multiply(5, Add(Add(70, Multiply(20, Number Of Players(Team 1))), Multiply(10, Global.TimeMin))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
                Start Scaling Player(Event Player, 2, False);
            Else;
                If(Compare(Add(Add(30, Global.TimeMin), Multiply(2.5, Global.Time5Min)), >, 40));
                    Set Move Speed(Event Player, 40);
                Else;
                    Set Move Speed(Event Player, Add(Add(30, Global.TimeMin), Multiply(2.5, Global.Time5Min)));
                End;
                Set Ultimate Charge(Event Player, 0);
                Set Max Health(Event Player, Add(Add(70, Multiply(20, Number Of Players(Team 1))), Multiply(10, Global.TimeMin)));
            End;
        Else If(Compare(Hero Of(Event Player), ==, Hero(Widowmaker)));
            If(Compare((Event Player).isBoss, ==, 1));
                Set Damage Dealt(Event Player, Multiply(2, Add(Add(85, Multiply(15, Number Of Players(Team 1))), Multiply(25, Global.Time5Min))));
                Set Move Speed(Event Player, 100);
                Set Max Health(Event Player, Divide(Multiply(5, Add(Add(100, Multiply(25, Number Of Players(Team 1))), Multiply(5, Global.TimeMin))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
                Start Scaling Player(Event Player, 2, False);
            Else;
                Set Player Variable(Event Player, BotCounter, 0);
                Set Damage Dealt(Event Player, Add(Add(85, Multiply(15, Number Of Players(Team 1))), Multiply(25, Global.Time5Min)));
                Set Move Speed(Event Player, 100);
                Set Max Health(Event Player, Add(Add(100, Multiply(25, Number Of Players(Team 1))), Multiply(5, Global.TimeMin)));
            End;
        Else If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
            If(Compare((Event Player).isBoss, ==, 1));
                Set Move Speed(Event Player, 50);
                Set Damage Dealt(Event Player, Add(Add(85, Multiply(5, Number Of Players(Team 1))), Multiply(5, Global.Time5Min)));
                Start Scaling Player(Event Player, 3, False);
                Set Max Health(Event Player, Divide(Multiply(5, Add(Add(155, Multiply(150, Number Of Players(Team 1))), Multiply(20, Global.TimeMin))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
            Else;
                Set Move Speed(Event Player, 80);
                Set Damage Dealt(Event Player, Add(Add(85, Multiply(5, Number Of Players(Team 1))), Multiply(5, Global.Time5Min)));
                Start Scaling Player(Event Player, 2, False);
                Set Max Health(Event Player, Add(Add(155, Multiply(150, Number Of Players(Team 1))), Multiply(20, Global.TimeMin)));
            End;
        Else If(Compare(Hero Of(Event Player), ==, Hero(Orisa)));
            If(Compare((Event Player).isBoss, ==, 1));
                Start Scaling Player(Event Player, 1.8, False);
                Set Max Health(Event Player, Divide(Multiply(5, Add(Add(220, Multiply(Number Of Players(Team 1), 80)), Multiply(50, Global.Time5Min))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
                Set Move Speed(Event Player, Add(30, Multiply(5, Global.Time5Min)));
            Else;
                Start Scaling Player(Event Player, 1.8, False);
                Set Max Health(Event Player, Add(Add(220, Multiply(Number Of Players(Team 1), 80)), Multiply(50, Global.Time5Min)));
                Set Move Speed(Event Player, Add(90, Multiply(5, Global.Time5Min)));
            End;
        Else If(Compare(Hero Of(Event Player), ==, Hero(Echo)));
            If(Compare((Event Player).isBoss, ==, 1));
                Set Gravity(Event Player, 40);
                Set Move Speed(Event Player, Add(70, Multiply(5, Global.Time5Min)));
                Set Respawn Max Time(Event Player, 18);
                Set Max Health(Event Player, Divide(Multiply(5, Add(Add(90, Multiply(25, Number Of Players(Team 1))), Multiply(15, Global.TimeMin))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
                Start Scaling Player(Event Player, 2, False);
            Else;
                Set Gravity(Event Player, 40);
                Set Move Speed(Event Player, Add(130, Multiply(5, Global.Time5Min)));
                Set Respawn Max Time(Event Player, 18);
                Set Max Health(Event Player, Add(Add(90, Multiply(25, Number Of Players(Team 1))), Multiply(15, Global.TimeMin)));
            End;
        Else If(Compare(Hero Of(Event Player), ==, Hero(Reinhardt)));
            If(Compare((Event Player).isBoss, ==, 1));
                Start Scaling Player(Event Player, 1.5, False);
                Set Move Speed(Event Player, 70);
                Set Damage Dealt(Event Player, Add(Add(100, Multiply(5, Number Of Players(Team 1))), Multiply(5, Global.Time5Min)));
                Set Respawn Max Time(Event Player, 15);
                Set Max Health(Event Player, Divide(Multiply(5, Add(Add(55, Multiply(25, Number Of Players(Team 1))), Multiply(15, Global.TimeMin))), If-Then-Else(Compare(Global.UpgradeBossHealthValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)), 0.1, 1)));
            Else;
                "eventPlayer.startScalingSize(0.85, false)"
                Set Move Speed(Event Player, 110);
                Set Damage Dealt(Event Player, Add(Add(100, Multiply(5, Number Of Players(Team 1))), Multiply(5, Global.Time5Min)));
                Set Respawn Max Time(Event Player, 15);
                Set Max Health(Event Player, Add(Add(55, Multiply(25, Number Of Players(Team 1))), Multiply(15, Global.TimeMin)));
            End;
        End;
        Wait(0.25, Ignore Condition);
        "FILL HEALTH"
        Heal(Event Player, Null, 100000);
    }
}

disabled rule("=== GATE ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule("SUBROUTINE: GATE REPAIR")
{
	event
	{
		Subroutine;
		GateRepair;
	}

	actions
	{
		Small Message(Event Player, Custom String("REPAIR +2% ULTIMATE"));
		"UPGRADE - GATE'S MAX HEALTH"
		If(Global.UpgradeGateMaxHealthValue < Global.UpgradeGateMaxHealthMaxValue[2]);
			If(Event Player.IsNanoed == 1);
				If(Global.UpgradeGateMaxHealthValue >= Global.UpgradeGateMaxHealthMaxValue[1]);
					Global.UpgradeGateMaxHealthValue += 100 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 20;
				Else;
					Global.UpgradeGateMaxHealthValue += 50 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 10;
				End;
			Else;
				If(Global.UpgradeGateMaxHealthValue >= Global.UpgradeGateMaxHealthMaxValue[1]);
					Global.UpgradeGateMaxHealthValue += 50 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 10;
				Else;
					Global.UpgradeGateMaxHealthValue += 25 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 5;
				End;
			End;
		End;
		"HEAL GATE"
		If(Event Player.IsNanoed == 1);
			If(Global.UpgradeGateMaxHealthValue >= Global.UpgradeGateMaxHealthMaxValue[1]);
				Global.GateHealth += 100 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 20;
			Else;
				Global.GateHealth += 50 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 10;
			End;
		Else;
			If(Global.UpgradeGateMaxHealthValue >= Global.UpgradeGateMaxHealthMaxValue[1]);
				Global.GateHealth += 50 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 10;
			Else;
				Global.GateHealth += 25 - (Number Of Players(Team 1) <= 3 ? Number Of Players(Team 1) : 3) * 5;
			End;
			If(Global.GateHealth > Global.GateMaxHealth);
				Global.GateHealth = Global.GateMaxHealth;
			Else;
				Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 2);
			End;
		End;
		"UPDATE GATE'S HEALTH BAR"
		Start Rule(GateProgressBarColor, Restart Rule);
	}
}

rule("TORB: GATE REPAIR")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Weapon(Event Player) == 2;
		Is Firing Primary(Event Player) == True;
		Global.GateHealth < Global.GateMaxHealth;
		Is In View Angle(Event Player, Global.GateRepairPosition, 80) == True;
		Distance Between(Position Of(Event Player), Global.GatePosition) < 3.500;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(GateRepair);
		Wait(Is Using Ability 2(Event Player) ? 0.350 : 0.700, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Brig: GATE REPAIR")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Firing Primary(Event Player) == True;
		Global.GateHealth < Global.GateMaxHealth;
		Is In View Angle(Event Player, Global.GateRepairPosition, 80) == True;
		Distance Between(Position Of(Event Player), Global.GatePosition) < 5;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(GateRepair);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rein: GATE REPAIR")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Firing Primary(Event Player) == True;
		Global.GateHealth < Global.GateMaxHealth;
		Is In View Angle(Event Player, Global.GateRepairPosition, 80) == True;
		Distance Between(Position Of(Event Player), Global.GatePosition) < 3;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Call Subroutine(GateRepair);
		Wait(0.850, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule ("SUBROUTINE: GATE PROGRESS BAR COLOR") {
    event {
        Subroutine;
        GateProgressBarColor;
    }
    actions {
        Stop Chasing Global Variable(GateHealthChase);
        Chase Global Variable Over Time(GateHealthChase, Global.GateHealth, 0.1, Destination and Duration);
        "GATE WAS DAMAGED"
        If(Compare(Global.GateHealth, <, Global.GateHealthEvent));
            For Global Variable(LoopIterator1, 0, 3, 1);
                Set Global Variable(GateProgressBarColorCurrent, Color(Red));
                Wait(0.03, Ignore Condition);
                Set Global Variable(GateProgressBarColorCurrent, Color(White));
                Wait(0.03, Ignore Condition);
            End;
        Else;
            Set Global Variable(GateProgressBarColorCurrent, Color(Green));
            Wait(0.03, Ignore Condition);
            Set Global Variable(GateProgressBarColorCurrent, Color(Yellow));
            Wait(0.03, Ignore Condition);
        End;
        Set Global Variable(GateHealthEvent, Global.GateHealth);
        Set Global Variable(GateProgressBarColorComponent, Divide(Multiply(Global.GateHealth, 255), Global.GateMaxHealth));
        Set Global Variable(GateProgressBarColorCurrent, Custom Color(255, Global.GateProgressBarColorComponent, Global.GateProgressBarColorComponent, 255));
    }
}

disabled rule("=== COMMON MECHANICS ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("ALL: INIT") {
    event {
        Player Joined Match;
        All;
        All;
    }
    actions {
        "ALL (COMMON) INIT"
        Set Player Variable(Event Player, IsDead, True);
        Disable Kill Feed(Event Player);
        Disable Game Mode In-World UI(Event Player);
        Disable Death Spectate Target HUD(Event Player);
        "BOT INIT"
        If(Is Dummy Bot(Event Player));
            Call Subroutine(BotInit);
        Else;
            Call Subroutine(PlayerInit);
    }
}

rule ("SUBROUTINE: BOT - INIT") {
    event {
        Subroutine;
        BotInit;
    }
    actions {
        "INIT VARS"
        Set Player Variable(Event Player, HasBadStatus, False);
        Set Player Variable(Event Player, IsRespawning, False);
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, False);
        Set Player Variable(Event Player, BotEventPosition, Vector(9999, 999, 9999));
        "DISABLE ALL FOR BOT"
        Disable Hero HUD(Event Player);
        Disable Messages(Event Player);
        Disable Text Chat(Event Player);
        Disable Scoreboard(Event Player);
        Disable Game Mode HUD(Event Player);
        Disable Death Spectate All Players(Event Player);
        Disable Voice Chat(Event Player, True, True, True);
        "INIT AI NAVIGATION VARS"
        Call Subroutine(BotResetPathFinding);
    }
}

rule ("SUBROUTINE: PLAYER - INIT") {
    event {
        Subroutine;
        PlayerInit;
    }
    actions {
        "STORY HEROES"
        If(Global.IsStoryHeroes);
            Reset Player Hero Availability(Event Player);
            Set Player Allowed Heroes(Event Player, Array(Hero(Ana), Hero(Brigitte), Hero(Mercy), Hero(Lúcio), Hero(Moira), Hero(Baptiste), Hero(Ashe), Hero(D.Va), Hero(Genji), Hero(Hanzo), Hero(Widowmaker), Hero(Cassidy), Hero(Reinhardt), Hero(Soldier: 76), Hero(Torbjörn), Hero(Tracer), Hero(Winston), Hero(Pharah)));
        End;
        "TEAM CHALLENGE - PLAYER'S MAX HEALTH"
        If(Compare(Global.UpgradePlayerMaxHealthValue, >=, First Of(Global.UpgradePlayerMaxHealthMaxValue)));
            Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
            Set Max Health(Event Player, (Event Player).PlayerHealth);
        End;
        If(Is Game In Progress);
            Disable Game Mode HUD(Event Player);
        End;
    }
}

rule ("ALL: RESPAWN") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        Or(Compare(Hero Of(Event Player), !=, (Event Player).CurrentHero), Compare((Event Player).IsDead, ==, True)) == True;
    }
    actions {
        Set Player Variable(Event Player, IsDead, False);
        "BOT RESPAWN"
        If(Is Dummy Bot(Event Player));
            Call Subroutine(BotRespawn);
            If(Global.IsDebugAINavigation);
                Create Beam Effect(All Players(All Teams), Good Beam, Eye Position(Event Player), (Event Player).BotNextNodePosition, Color(Green), Visible To Position and Radius);
            End;
        Else;
            Call Subroutine(PlayerRespawn);
        End;
        "MUST BE AFTER ALL RESPAWN SUBROUTINES!"
        Set Player Variable(Event Player, CurrentHero, Hero Of(Event Player));
    }
}

rule ("SUBROUTINE: BOT - RESPAWN") {
    event {
        Subroutine;
        BotRespawn;
    }
    actions {
        "RESET COMMON PROPERTIES"
        Set Player Variable(Event Player, IsRespawning, True);
        Enable Nameplates(Event Player, All Players(Team 1));
        Call Subroutine(BotResetPathFinding);
        "if eventPlayer.getCurrentHero() != eventPlayer.CurrentHero:"
        Call Subroutine(GameLogicSetBotProperties);
        "__end__()\r\nINDIVIDUAL HERO'S RESPAWN SCRIPTS"
        If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
            Call Subroutine(BotBastionRespawn);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Zenyatta)));
            Call Subroutine(BotZenyattaRespawn);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Widowmaker)));
            Call Subroutine(BotWidowRespawn);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Wrecking Ball)));
            Call Subroutine(BotBallRespawn);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Orisa)));
            Call Subroutine(BotOrisaRespawn);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Echo)));
            Call Subroutine(BotEchoRespawn);
        Else If(Compare(Hero Of(Event Player), ==, Hero(Reinhardt)));
            Call Subroutine(BotReinRespawn);
        End;
        Set Player Variable(Event Player, IsRespawning, False);
    }
}

rule ("SUBROUTINE: PLAYER - RESPAWN") {
    event {
        Subroutine;
        PlayerRespawn;
    }
    actions {
        "TEAM CHALLENGE - MAX AMMO"
        If(And(Compare(Hero Of(Event Player), !=, (Event Player).CurrentHero), Compare(Global.UpgradeMaxAmmoValue, >=, First Of(Global.UpgradeMaxAmmoMaxValue))));
            Set Max Ammo(Event Player, 0, Multiply(Ammo(Event Player, 0), 2));
            Set Max Ammo(Event Player, 1, Multiply(Ammo(Event Player, 1), 2));
            Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
            Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
        End;
        "MUST BE AFTER TEAM CHALLENGE MAX AMMO!\r\neventPlayer.CurrentHero = eventPlayer.getCurrentHero()\r\nPLAYER RESPAWN"
        Set Status(Event Player, Null, Phased Out, 3);
        Set Facing(Event Player, Vector(-1, 0, 0), To World);
        Teleport(Event Player, Value In Array(Global.PlayerSpawnPositions, If-Then-Else(Compare(Slot Of(Event Player), ==, Count Of(Global.PlayerSpawnPositions)), Random Integer(0, Subtract(Count Of(Global.PlayerSpawnPositions), 1)), Slot Of(Event Player))));
        Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
        Set Max Health(Event Player, (Event Player).PlayerHealth);
    }
}

rule ("PLAYER: DEATH") {
    event {
        Player Died;
        Team 1;
        All;
    }
    actions {
        If(Compare(Hero Of(Event Player), ==, Hero(Roadhog)));
            Modify Player Variable At Index(Event Player, Abilities, 8, Subtract, 1);
            Wait(If-Then-Else(Value In Array(Global.Perk, 2), 5, 10), Ignore Condition);
            Modify Player Variable At Index(Event Player, Abilities, 8, Add, 1);
        End;
        "if eventPlayer.lastSecondWind > 0:\r\neventPlayer.lastSecondWind = 0\r\n__end__()"
        Set Player Variable(Event Player, IsDead, True);
    }
}

rule ("BOT: DEATH") {
    event {
        Player Died;
        Team 2;
        All;
    }
    actions {
        If(Compare((Event Player).isBoss, ==, 1));
            If(Compare(Global.UpgradePerkSharpshooterValue, >=, Value In Array(Global.UpgradeCriticalDamageMaxValue, 1)));
                If(Compare(Global.UpgradeBossHealthValue, <, Value In Array(Global.UpgradeCriticalDamageMaxValue, 2)));
                    Modify Global Variable(UpgradeBossHealthValue, Add, 1);
                    Small Message(All Players(Team 1), Custom String("-10% BOSS HEALTH CHALLENGE +1", Null, Null, Null));
                End;
            End;
            Set Player Variable(Event Player, isBoss, 0);
            Set Global Variable(activeBoss, Null);
            Big Message(All Players(Team 1), Custom String("BOSS DIED - {0}", Hero Of(Event Player), Null, Null));
        End;
        Set Player Variable(Event Player, IsDead, True);
        Set Player Variable(Event Player, HasBadStatus, False);
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, False);
        Disable Nameplates(Event Player, All Players(Team 1));
        "eventPlayer.stopForcingButton(Button.ABILITY_1)\r\neventPlayer.stopForcingButton(Button.PRIMARY_FIRE)\r\neventPlayer.stopForcingButton(Button.SECONDARY_FIRE)\r\nBOT HAS 1 EFFECT IN VAR (NOT ARRAY)"
        Skip If(Not(Entity Exists((Event Player).BotEffects)), 1);
        Destroy Effect((Event Player).BotEffects);
        //lbl_0:
        Skip If(Compare(Count Of((Event Player).BotEffects), ==, 0), 3);
        For Player Variable(Event Player, BotLoopIterator1, 0, Count Of((Event Player).BotEffects), 1);
            Destroy Effect(Value In Array((Event Player).BotEffects, (Event Player).BotLoopIterator1));
        End;
        //lbl_1:
    }
}

disabled rule("=== BOT COMMON MECHANICS ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: BAD STATUS") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).HasBadStatus == False;
        Or(Or(Or(Or(Has Status(Event Player, Hacked), Has Status(Event Player, Frozen)), Has Status(Event Player, Knocked Down)), Has Status(Event Player, Asleep)), Has Status(Event Player, Stunned)) == True;
    }
    actions {
        Set Player Variable(Event Player, HasBadStatus, True);
        "PROCESS BAD STATUS"
        If(Compare(Hero Of(Event Player), ==, Hero(Widowmaker)));
            Start Rule(BotWidowBadStatus, Do Nothing);
        End;
        Wait Until(And(And(And(Not(Has Status(Event Player, Knocked Down)), Not(Has Status(Event Player, Asleep))), Not(Has Status(Event Player, Frozen))), Not(Has Status(Event Player, Stunned))), 15);
        Set Player Variable(Event Player, HasBadStatus, False);
    }
}

rule ("SUBROUTINE: BOT - LANDING FROM SKY") {
    event {
        Subroutine;
        BotLandingFromSky;
    }
    actions {
        Stop Throttle In Direction(Event Player);
        "SET RESPAWN POSITION"
        Set Player Variable(Event Player, BotEventPosition, Random Value In Array(Global.BigBossSpawnPositions));
        "CREATE EFFECTS\r\ncreateEffect(getAllPlayers(), Effect.LIGHT_SHAFT, Color.RED, eventPlayer.BotEventPosition, 3, EffectReeval.VISIBILITY)\r\neventPlayer.BotEffects = getLastCreatedEntity()\r\nRESPAWN IN LIGHT SHAFT EFFECT"
        Teleport(Event Player, Add((Event Player).BotEventPosition, Vector(0, 25, 0)));
        Wait(0.02, Ignore Condition);
        "SLOW LANDING"
        Set Gravity(Event Player, 50);
        While(Is In Air(Event Player));
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Add(Position Of(Event Player), Vector(0, -2.7, 0)), 2);
            Wait(0.25, Ignore Condition);
        End;
        Set Gravity(Event Player, 100);
        "destroyEffect(eventPlayer.BotEffects)\r\nLANDING EFFECTS"
        Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Effect, Custom Color(105, 87, 46, 255), Position Of(Event Player), 8);
        Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(White), Position Of(Event Player), 150);
    }
}

rule ("SUBROUTINE: BOT - APPEAR FROM UNDERGROUND") {
    event {
        Subroutine;
        BotApearFromUnderground;
    }
    actions {
        Set Status(Event Player, Null, Knocked Down, 1);
        Wait(0.2, Ignore Condition);
        Set Gravity(Event Player, 20);
        Disable Movement Collision With Environment(Event Player, True);
        Teleport(Event Player, Add(Value In Array(Global.ZenSpawnPositions, Random Integer(Min(Global.TimeMin, Subtract(Count Of(Global.ZenSpawnPositions), 10)), Min(Global.SpawnPositionMaxId, Subtract(Count Of(Global.ZenSpawnPositions), 4)))), Vector(0, -1.5, 0)));
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Custom Color(220, 175, 100, 255), Eye Position(Event Player), 3);
        Play Effect(All Players(All Teams), Sigma Accretion Impact Sound, Color(Gray), Eye Position(Event Player), 50);
        Apply Impulse(Event Player, Up, 3.5, To World, Cancel Contrary Motion);
        Wait(0.4, Ignore Condition);
        Clear Status(Event Player, Knocked Down);
        Set Gravity(Event Player, 100);
        Enable Movement Collision With Environment(Event Player);
    }
}

disabled rule("=== PLAYER MECHANICS ===")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("PLAYER: DARKNESS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		!Entity Exists(Event Player.BotEffects) == True;
	}

	actions
	{
		Disable Nameplates(Event Player, All Players(All Teams));
		Start Forcing Player Outlines(Event Player, All Players(All Teams), False, Color(White), Default);
		Create Effect(Event Player, Bad Aura, Color(Black), Update Every Frame(Eye Position(Event Player) + Vector(0, 2, 0)
			+ Facing Direction Of(Event Player) * 14), 25, Visible To Position and Radius);
		Event Player.BotEffects = Last Created Entity;
		Create Effect(Event Player, Bad Aura, Color(Black), Update Every Frame(Eye Position(Event Player) + World Vector Of(Vector(-5, 0,
			3), Event Player, Rotation) + Facing Direction Of(Event Player) * 10), 25, Visible To Position and Radius);
		Create Effect(Event Player, Bad Aura, Color(Black), Update Every Frame(Eye Position(Event Player) + World Vector Of(Vector(5, 0,
			3), Event Player, Rotation) + Facing Direction Of(Event Player) * 10), 25, Visible To Position and Radius);
	}
}

rule ("PLAYER: HEALTH REGEN") {
    event {
        Player Took Damage;
        Team 1;
        All;
    }
    actions {
        Stop Heal Over Time((Event Player).HealOverTimeId);
        Set Player Variable(Event Player, EventHealth, Health(Event Player));
        Wait(4, Ignore Condition);
        "TOOK DAMAGE, RESET REGENERATION TIMER"
        Loop If(And(Is Alive(Event Player), Compare((Event Player).EventHealth, >, Health(Event Player))));
        Start Heal Over Time(Event Player, Null, 3, Divide(Max Health(Event Player), 3));
        Set Player Variable(Event Player, HealOverTimeId, Last Heal Over Time ID);
    }
}

disabled rule("=== NERFS ===")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("REINHARDT: ANTI-CHARGE FOR BASTION & ORISA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Using Ability 1(Event Player) == True;
		Hero Of(Ray Cast Hit Player(Eye Position(Event Player) + Vector(0, 2, 0), Eye Position(Event Player) + Vector(0, 2, 0)
			+ Facing Direction Of(Event Player) * 2, All Living Players(Team 2), Event Player, True)) == (Hero(Bastion) == True || Hero(
			Orisa) == True);
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 1.500);
	}
}

rule ("HOG: ANTI-HOOK FOR BASTION & ORISA") {
    event {
        Player Dealt Damage;
        Team 1;
        Roadhog;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Or(Compare(Hero Of(Victim), ==, Hero(Bastion)), Compare(Hero Of(Victim), ==, Hero(Orisa))) == True;
    }
    actions {
        Set Status(Event Player, Null, Stunned, 0.005);
    }
}

disabled rule("=== ZENYATTA ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: ZEN - REACHED THE GATE") {
    event {
        Ongoing - Each Player;
        Team 2;
        Zenyatta;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotIsPathFinding == False;
    }
    actions {
        Set Ammo(Event Player, 0, 0);
        Communicate(Event Player, Hello);
        "BotResetPathFinding()"
        Wait(1.5, Ignore Condition);
        Abort If(Is Dead(Event Player));
        Kill(Event Player, Null);
    }
}

rule ("BOT: ZEN - DEATH") {
    event {
        Player Died;
        Team 2;
        Zenyatta;
    }
    actions {
        "EFFECT"
        Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Effect, Color(Red), Eye Position(Event Player), 2.5);
        Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Red), Eye Position(Event Player), 70);
        "DAMAGE AND APPLY IMPULSE TO PLAYERS"
        Set Player Variable(Event Player, BotPlayersInRadius, Players Within Radius(Position Of(Event Player), 2.5, All Teams, Surfaces And Enemy Barriers));
        For Player Variable(Event Player, BotLoopIterator1, 0, Count Of((Event Player).BotPlayersInRadius), 1);
            Apply Impulse(Value In Array((Event Player).BotPlayersInRadius, (Event Player).BotLoopIterator1), Direction Towards(Position Of(Event Player), Eye Position(Value In Array((Event Player).BotPlayersInRadius, (Event Player).BotLoopIterator1))), 5, To World, Incorporate Contrary Motion);
            If(Compare(Team Of(Value In Array((Event Player).BotPlayersInRadius, (Event Player).BotLoopIterator1)), ==, Team 1));
                Damage(Value In Array((Event Player).BotPlayersInRadius, (Event Player).BotLoopIterator1), Event Player, 50);
            End;
        End;
        "DAMAGE GATE"
        If(And(Compare(Distance Between(Position Of(Event Player), Global.GatePosition), <, 3), Is In Line of Sight(Eye Position(Event Player), Global.GatePosition, Enemy Barriers Block LOS)));
            If(Compare((Event Player).isBoss, ==, 1));
                Modify Global Variable(GateHealth, Subtract, 125);
            Else;
                Modify Global Variable(GateHealth, Subtract, 25);
            End;
            Start Rule(GateProgressBarColor, Restart Rule);
            Respawn(Event Player);
            Abort;
        End;
        "KILLED BY PLAYER"
        Teleport(Event Player, Vector(0, -999, 0));
        Wait(2, Ignore Condition);
        Respawn(Event Player);
        Wait(2, Ignore Condition);
    }
}

rule ("SUBROUTINE: ZEN - RESPAWN") {
    event {
        Subroutine;
        BotZenyattaRespawn;
    }
    actions {
        Call Subroutine(BotApearFromUnderground);
        Set Player Variable(Event Player, BotTargetPosition, Global.GatePosition);
        Set Player Variable(Event Player, BotIsPathFinding, True);
        Start Rule(BotStartPathFinding, Do Nothing);
        Start Facing(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 360, To World, Direction and Turn Rate);
    }
}

disabled rule("=== WRECKING BALL ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: BALL - REACHED THE GATE") {
    event {
        Ongoing - Each Player;
        Team 2;
        Wrecking Ball;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotIsPathFinding == False;
    }
    actions {
        "@Condition distance(eventPlayer.getPosition(), GatePosition) < 3"
        Start Holding Button(Event Player, Button(Ability 1));
        Set Ammo(Event Player, 0, 0);
        Wait(1, Ignore Condition);
        Set Ultimate Charge(Event Player, 100);
        Start Holding Button(Event Player, Button(Ultimate));
        Wait Until(Is Using Ultimate(Event Player), 0.6);
        Abort If(Is Dead(Event Player));
        Kill(Event Player, Null);
        Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(Orange), Eye Position(Event Player), 6);
        Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 250);
        If(And(Compare(Distance Between(Position Of(Event Player), Global.GatePosition), <, 3.5), Is In Line of Sight(Eye Position(Event Player), Global.GatePosition, Enemy Barriers Block LOS)));
            If(Compare((Event Player).isBoss, ==, 1));
                Modify Global Variable(GateHealth, Subtract, 300);
            Else;
                Modify Global Variable(GateHealth, Subtract, 150);
            End;
            Start Rule(GateProgressBarColor, Restart Rule);
        End;
        Damage(Players Within Radius(Eye Position(Event Player), 7, Team 1, Surfaces And All Barriers), Event Player, 200);
    }
}

rule ("BOT: BALL - ALTERNATIVE FORM") {
    event {
        Ongoing - Each Player;
        Team 2;
        Wrecking Ball;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is In Alternate Form(Event Player) == False;
    }
    actions {
        Start Holding Button(Event Player, Button(Ability 1));
        Wait Until(Is In Alternate Form(Event Player), 10);
        Stop Holding Button(Event Player, Button(Ability 1));
    }
}

rule ("BOT: BALL - DEATH") {
    event {
        Player Died;
        Team 2;
        Wrecking Ball;
    }
    actions {
        Stop Holding Button(Event Player, Button(Ability 1));
        Stop Holding Button(Event Player, Button(Ultimate));
    }
}

rule ("SUBROUTINE: BALL - RESPAWN") {
    event {
        Subroutine;
        BotBallRespawn;
    }
    actions {
        "RESPAWN IN AIR"
        Teleport(Event Player, Add(Random Value In Array(Global.BallSpawnPositions), Vector(0, 20, 0)));
        Stop Holding Button(Event Player, Button(Ultimate));
        Wait(0.25, Ignore Condition);
        "LANDING"
        Start Holding Button(Event Player, Button(Crouch));
        Wait Until(Is On Ground(Event Player), 9999);
        Stop Holding Button(Event Player, Button(Crouch));
        "LANDING IMPACT EFFECT"
        Play Effect(All Players(All Teams), Sigma Accretion Impact Sound, Color(White), Event Player, 150);
        Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(Gray), Position Of(Event Player), 10);
        Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Eye Position(Event Player), 1.5, Visible To Position and Radius);
        Set Player Variable(Event Player, BotEffects, Last Created Entity);
        "PATH FINDING TO GATE"
        Set Player Variable(Event Player, BotTargetPosition, Global.GatePosition);
        Set Player Variable(Event Player, BotIsPathFinding, True);
        Start Rule(BotStartPathFinding, Do Nothing);
    }
}

disabled rule("=== ECHO ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: ECHO - FLY ABILITY") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotIsPathFinding == False;
        Is Using Ability 1(Event Player) == False;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
        Press Button(Event Player, Button(Ability 1));
        Wait(0.3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BOT: ECHO - BEAM ABILITY") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        Is Using Ability 1(Event Player) == False;
        (Event Player).BotDoesUniqueBehaviour == True;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Ability 2), 0);
        Press Button(Event Player, Button(Ability 2));
    }
}

rule ("BOT: ECHO - BAD STATUS - RESET BEAM") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).HasBadStatus == True;
    }
    actions {
        "@Condition (eventPlayer.hasStatusEffect(Status.HACKED) or eventPlayer.hasStatusEffect(Status.FROZEN) or eventPlayer.hasStatusEffect(Status.KNOCKED_DOWN) or eventPlayer.hasStatusEffect(Status.ASLEEP) or eventPlayer.hasStatusEffect(Status.STUNNED)) == true"
        If((Event Player).BotDoesUniqueBehaviour);
            Call Subroutine(BotEchoDetachPlayer);
        End;
        Wait Until((Event Player).HasBadStatus, 7);
    }
}

rule ("BOT: ECHO - CAN'T SEE PORTAL - APPLY IMPULSE") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotDoesUniqueBehaviour == True;
        Is In Line of Sight(Position Of(Event Player), Global.BotEchoRespawnPosition, Barriers Do Not Block LOS) == False;
    }
    actions {
        Wait(0.3, Abort When False);
        Apply Impulse(Event Player, Vector(Random Integer(-1, 1), 1, Random Integer(-1, 1)), 20, To World, Incorporate Contrary Motion);
        Wait(1, Ignore Condition);
        If(Not(Is In Line of Sight(Position Of(Event Player), Global.BotEchoRespawnPosition, Barriers Do Not Block LOS)));
            Set Player Variable(Event Player, BotTargetPosition, Global.BotEchoRespawnPosition);
            Start Rule(BotStartPathFinding, Restart Rule);
        Else;
            Call Subroutine(BotResetPathFinding);
        End;
        Loop If Condition Is True;
    }
}

disabled rule("BOT: ECHO - MAIN LOGIC - BACKUP")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.IsRespawning == False;
	}

	actions
	{
		If(!Event Player.BotIsPathFinding);
			Event Player.BotSeePlayer = Sorted Array(Filtered Array(All Living Players(Team 1), Is In Line of Sight(Eye Position(Event Player),
				Eye Position(Current Array Element), Barriers Do Not Block LOS) == True), Distance Between(Position Of(Event Player),
				Position Of(Current Array Element)))[0];
		End;
		"NO PLAYERS IN VIEW RANGE"
		disabled If(Event Player.BotSeePlayer == Null);
		disabled Stop Throttle In Direction(Event Player);
		disabled End;
		"FLY TO PLAYER"
		If(Event Player.BotSeePlayer != Null && Distance Between(Position Of(Event Player), Position Of(Event Player.BotSeePlayer))
			> 4 && Event Player.BotDoesUniqueBehaviour == False);
			Event Player.BotTargetPlayer = Event Player.BotSeePlayer;
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotSeePlayer)), 300, To World,
				Direction and Turn Rate);
			Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotSeePlayer)),
				1, To World, Replace existing throttle, Direction and Magnitude);
			Start Holding Button(Event Player, Button(Jump));
		"ACTIVATE FOCUS BEAM"
		Else If(Event Player.BotSeePlayer != Null && Distance Between(Position Of(Event Player), Position Of(Event Player.BotSeePlayer))
				< 4 && Event Player.BotDoesUniqueBehaviour == False && Event Player.HasBadStatus == False);
			Event Player.BotDoesUniqueBehaviour = True;
			Set Status(Event Player.BotSeePlayer, Event Player, Stunned, 1);
			Set Status(Event Player.BotSeePlayer, Event Player, Hacked, 99999);
			Attach Players(Event Player.BotSeePlayer, Event Player, Vector(0, 0, 2));
			Press Button(Event Player, Button(Ability 2));
		"TELEPORT PLAYER TO AWAY"
		Else If(Event Player.BotDoesUniqueBehaviour && Distance Between(Position Of(Event Player.BotSeePlayer),
				Global.BotEchoRespawnPosition) < 4);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Global.BotEchoRespawnPosition, 1);
			Teleport(Event Player.BotSeePlayer, Random Value In Array(Global.BotEchoTeleportPositions));
			Set Status(Event Player.BotSeePlayer, Event Player, Knocked Down, 1);
			Call Subroutine(BotEchoDetachPlayer);
		"BEGIN TO FLY TO THE PORTAL"
		Else If(Event Player.BotDoesUniqueBehaviour == True);
			Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.BotEchoRespawnPosition), 100, To World,
				Direction and Turn Rate);
			"BOT SEES THE PORTAL"
			If(Is In Line of Sight(Position Of(Event Player), Global.BotEchoRespawnPosition, Barriers Do Not Block LOS));
				"RESET PATH FINDING"
				If(Event Player.BotIsPathFinding);
					Call Subroutine(BotResetPathFinding);
				End;
				Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Global.BotEchoRespawnPosition), 1,
					To World, Replace existing throttle, Direction and Magnitude);
			"BOT DOES NOT SEE THE PORTAL"
			Else If(!Event Player.BotIsPathFinding);
				Event Player.BotTargetPlayer = Event Player.BotSeePlayer;
				Stop Holding Button(Event Player, Button(Jump));
				Start Rule(BotStartPathFinding, Restart Rule);
			End;
		End;
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule ("BOT: ECHO - MAIN LOGIC - LOOP") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
    }
    actions {
        If(Compare((Event Player).BotDoesUniqueBehaviour, ==, False));
            Set Player Variable(Event Player, BotSeePlayer, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS))), Distance Between(Position Of(Event Player), Position Of(Current Array Element)))));
        End;
        "TELEPORT PLAYER SO FAR"
        If(And((Event Player).BotDoesUniqueBehaviour, Compare(Distance Between(Position Of((Event Player).BotEchoCapturedPlayer), Global.BotEchoRespawnPosition), <, 4)));
            Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Global.BotEchoRespawnPosition, 1);
            Teleport((Event Player).BotEchoCapturedPlayer, Random Value In Array(Global.BotEchoTeleportPositions));
            Set Status((Event Player).BotEchoCapturedPlayer, Event Player, Knocked Down, 1);
            Call Subroutine(BotEchoDetachPlayer);
        End;
        "BEGIN TO FLY TO THE PORTAL WITH A PLAYER"
        If((Event Player).BotDoesUniqueBehaviour);
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.BotEchoRespawnPosition), 100, To World, Direction and Turn Rate);
            "BOT SEES THE PORTAL"
            If(Is In Line of Sight(Position Of(Event Player), Global.BotEchoRespawnPosition, Barriers Do Not Block LOS));
                "RESET PATH FINDING"
                If((Event Player).BotIsPathFinding);
                    Call Subroutine(BotResetPathFinding);
                End;
                Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Global.BotEchoRespawnPosition), 1, To World, Replace existing throttle, Direction and Magnitude);
            Else If(Not((Event Player).BotIsPathFinding));
                Set Player Variable(Event Player, BotTargetPlayer, (Event Player).BotEchoCapturedPlayer);
                Stop Holding Button(Event Player, Button(Jump));
                Start Rule(BotStartPathFinding, Restart Rule);
            End;
        End;
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BOT: ECHO - DEFEND PORTAL") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).BotSeePlayer == Null;
        (Event Player).IsRespawning == False;
        (Event Player).BotIsPathFinding == False;
        (Event Player).BotDoesUniqueBehaviour == False;
    }
    actions {
        Call Subroutine(BotEchoFlyToPortal);
    }
}

rule ("BOT: ECHO - CAN SEE PLAYER") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).BotSeePlayer != Null;
        (Event Player).IsRespawning == False;
        (Event Player).BotDoesUniqueBehaviour == False;
        Is In Line of Sight(Eye Position(Event Player), Eye Position((Event Player).BotSeePlayer), Barriers Do Not Block LOS) == True;
    }
    actions {
        If((Event Player).BotIsPathFinding);
            Call Subroutine(BotResetPathFinding);
        End;
        Call Subroutine(BotEchoFlyToPlayer);
    }
}

rule ("BOT: ECHO - PATH FINDING TO PLAYER") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).BotSeePlayer != Null;
        (Event Player).IsRespawning == False;
        (Event Player).BotIsPathFinding == False;
        (Event Player).BotDoesUniqueBehaviour == False;
        Is In Line of Sight(Eye Position(Event Player), Eye Position((Event Player).BotSeePlayer), Barriers Do Not Block LOS) == False;
    }
    actions {
        Set Player Variable(Event Player, BotTargetPlayer, (Event Player).BotSeePlayer);
        Stop Holding Button(Event Player, Button(Jump));
        Call Subroutine(BotStartPathFinding);
    }
}

rule ("BOT: ECHO - ATTACH PLAYER BY BEAM") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).HasBadStatus == False;
        (Event Player).BotSeePlayer != Null;
        (Event Player).IsRespawning == False;
        (Event Player).BotEchoCapturedPlayer == Null;
        (Event Player).BotDoesUniqueBehaviour == False;
        Is In Line of Sight(Eye Position(Event Player), Eye Position((Event Player).BotSeePlayer), Barriers Do Not Block LOS) == True;
        Distance Between(Position Of(Event Player), Position Of((Event Player).BotSeePlayer)) < 3;
    }
    actions {
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, True);
        Set Player Variable(Event Player, BotEchoCapturedPlayer, (Event Player).BotSeePlayer);
        Set Status((Event Player).BotEchoCapturedPlayer, Event Player, Stunned, 0.7);
        Set Status((Event Player).BotEchoCapturedPlayer, Event Player, Hacked, 10);
        Attach Players((Event Player).BotEchoCapturedPlayer, Event Player, Vector(0, 0, 2));
        Press Button(Event Player, Button(Ability 2));
    }
}

rule ("BOT: ECHO - PLAYER DEAD") {
    event {
        Ongoing - Each Player;
        Team 2;
        Echo;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        Is Dead((Event Player).BotEchoCapturedPlayer) == True;
    }
    actions {
        If((Event Player).BotDoesUniqueBehaviour);
            Call Subroutine(BotEchoDetachPlayer);
        End;
        If((Event Player).BotIsPathFinding);
            Call Subroutine(BotResetPathFinding);
        End;
        Call Subroutine(BotEchoFlyToPortal);
    }
}

rule ("BOT: ECHO - DEATH") {
    event {
        Player Died;
        Team 2;
        Echo;
    }
    actions {
        Call Subroutine(BotEchoDetachPlayer);
        Stop Holding Button(Event Player, Button(Jump));
        Wait(5, Ignore Condition);
        Teleport(Event Player, Vector(0, 999, 0));
        Start Forcing Player To Be Hero(Event Player, Hero(Orisa));
    }
}

rule ("SUBROUTINE: ECHO - RESPAWN") {
    event {
        Subroutine;
        BotEchoRespawn;
    }
    actions {
        Set Player Variable(Event Player, BotCounter, 0);
        Set Player Variable(Event Player, BotEffects, Empty Array);
        Create Effect(All Players(All Teams), Good Aura, Color(Sky Blue), Global.BotEchoRespawnPosition, (Event Player).BotCounter, Visible To Position and Radius);
        Modify Player Variable(Event Player, BotEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Bad Aura, Color(Sky Blue), Global.BotEchoRespawnPosition, (Event Player).BotCounter, Visible To Position and Radius);
        Modify Player Variable(Event Player, BotEffects, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Energy Sound, Color(White), Global.BotEchoRespawnPosition, 200, Visible To);
        Modify Player Variable(Event Player, BotEffects, Append To Array, Last Created Entity);
        Chase Player Variable Over Time(Event Player, BotCounter, 3, 0.8, Destination and Duration);
        Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(Sky Blue), Global.BotEchoRespawnPosition, 12);
        Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Null, Global.BotEchoRespawnPosition, 100);
        Wait(3, Ignore Condition);
        Teleport(Event Player, Global.BotEchoRespawnPosition);
        Play Effect(All Players(All Teams), Good Explosion, Color(White), Global.BotEchoRespawnPosition, 2.5);
        Play Effect(All Players(All Teams), Debuff Impact Sound, Null, Global.BotEchoRespawnPosition, 100);
    }
}

rule ("SUBROUTINE: ECHO - FLY TO PLAYER") {
    event {
        Subroutine;
        BotEchoFlyToPlayer;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position((Event Player).BotSeePlayer)), 300, To World, Direction and Turn Rate);
        Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Eye Position((Event Player).BotSeePlayer)), 1, To World, Replace existing throttle, Direction and Magnitude);
        Stop Holding Button(Event Player, Button(Jump));
    }
}

rule ("SUBROUTINE: ECHO - FLY TO PORTAL") {
    event {
        Subroutine;
        BotEchoFlyToPortal;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.BotEchoRespawnPosition), 100, To World, Direction and Turn Rate);
        Start Throttle In Direction(Event Player, Direction Towards(Eye Position(Event Player), Global.BotEchoRespawnPosition), 1, To World, Replace existing throttle, Direction and Magnitude);
        Start Holding Button(Event Player, Button(Jump));
    }
}

rule ("SUBROUTINE: ECHO - DETACH PLAYER") {
    event {
        Subroutine;
        BotEchoDetachPlayer;
    }
    actions {
        Detach Players((Event Player).BotEchoCapturedPlayer);
        Clear Status((Event Player).BotEchoCapturedPlayer, Hacked);
        "IF PLAYER INSIDE THE WALL"
        If(Is In Line of Sight(Eye Position(Event Player), Eye Position((Event Player).BotEchoCapturedPlayer), Barriers Do Not Block LOS));
            Teleport((Event Player).BotEchoCapturedPlayer, Position Of(Event Player));
        End;
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, False);
        Set Player Variable(Event Player, BotEchoCapturedPlayer, Null);
    }
}

disabled rule("=== REINHARDT ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: REIN - SET PLAYER AS TARGET") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        "@Condition eventPlayer.BotIsPathFinding == false\r\nBOT IS FAR FROM GATES\r\n@Condition distance(vect(eventPlayer.getPosition().x, 0, eventPlayer.getPosition().z), vect(GatePosition.x, 0, GatePosition.z)) > 20\r\nCAN SEE PLAYER"
        Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)) == True;
    }
    actions {
        Call Subroutine(BotResetPathFinding);
        "SET CLOSEST PLAYER TO BOT AS TARGET AND FOLLOW HIM"
        Set Player Variable(Event Player, BotTargetPlayer, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS))), Distance Between(Position Of(Event Player), Position Of(Current Array Element)))));
        Start Facing(Event Player, Direction Towards(Position Of(Event Player), Position Of((Event Player).BotTargetPlayer)), 360, To World, Direction and Turn Rate);
        Start Rule(BotStartPathFinding, Restart Rule);
    }
}

rule ("BOT: REIN - SET GATE AS TARGET") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        "BOT DOESN'T FOLLOW PLAYER"
        (Event Player).BotTargetPlayer == -1;
    }
    actions {
        "CAN'T SEE ANY PLAYER\r\n@Condition (any([not isInLoS(eventPlayer.getEyePosition(), i.getEyePosition(), BarrierLos.PASS_THROUGH_BARRIERS) for i in [player for player in getLivingPlayers(Team.1) if player.hasSpawned()]])) == true"
        Call Subroutine(BotResetPathFinding);
        "SET GATE AS TARGET"
        Set Player Variable(Event Player, BotTargetPosition, Global.GatePosition);
        Start Facing(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 360, To World, Direction and Turn Rate);
        Start Rule(BotStartPathFinding, Restart Rule);
    }
}

rule ("BOT: REIN - TARGET DEAD") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotTargetPlayer != -1;
        Is Dead((Event Player).BotTargetPlayer) == True;
    }
    actions {
        Call Subroutine(BotResetPathFinding);
    }
}

rule ("BOT: REIN - ATTACK TARGET") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        "CAN ATTACK TARGET"
        Distance Between(Position Of(Event Player), If-Then-Else(Compare((Event Player).BotTargetPlayer, !=, -1), Position Of((Event Player).BotTargetPlayer), Global.GatePosition)) < 4;
    }
    actions {
        "@Condition (distance(vect(eventPlayer.getPosition().x, 0, eventPlayer.getPosition().z), vect((eventPlayer.BotTargetPlayer.getPosition() if eventPlayer.BotTargetPlayer != -1 else GatePosition).x, 0, (eventPlayer.BotTargetPlayer.getPosition() if eventPlayer.BotTargetPlayer != -1 else GatePosition).z))) < 4"
        Start Holding Button(Event Player, Button(Primary Fire));
        Stop Holding Button(Event Player, Button(Secondary Fire));
        "TARGET IS PLAYER"
        Abort If(Compare((Event Player).BotTargetPlayer, !=, -1));
        If(Compare((Event Player).isBoss, ==, 1));
            Modify Global Variable(GateHealth, Subtract, 25);
        Else;
            Modify Global Variable(GateHealth, Subtract, 5);
        End;
        Start Rule(GateProgressBarColor, Restart Rule);
        Wait(0.9, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BOT: REIN - STOP ATTACK TARGET") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        "CAN ATTACK TARGET"
        Distance Between(Position Of(Event Player), If-Then-Else(Compare((Event Player).BotTargetPlayer, !=, -1), Position Of((Event Player).BotTargetPlayer), Global.GatePosition)) > 4;
    }
    actions {
        "@Condition (distance(vect(eventPlayer.getPosition().x, 0, eventPlayer.getPosition().z), vect((eventPlayer.BotTargetPlayer.getPosition() if eventPlayer.BotTargetPlayer != -1 else GatePosition).x, 0, (eventPlayer.BotTargetPlayer.getPosition() if eventPlayer.BotTargetPlayer != -1 else GatePosition).z))) > 4"
        Stop Holding Button(Event Player, Button(Primary Fire));
    }
}

rule ("BOT: REIN - USE SHIELD") {
    event {
        Player Took Damage;
        Team 2;
        Reinhardt;
    }
    conditions {
        Distance Between(Position Of(Event Player), Position Of((Event Player).BotTargetPlayer)) > 3;
    }
    actions {
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Attacker)), 200, To World, Direction and Turn Rate);
        Start Holding Button(Event Player, Button(Secondary Fire));
        Wait Until(Compare(Distance Between(Position Of(Event Player), Position Of((Event Player).BotTargetPlayer)), <, 3), 3);
        Stop Holding Button(Event Player, Button(Secondary Fire));
    }
}

rule ("BOT: REIN - CHARGE IN GATE") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotTargetPlayer == -1;
        Is Using Ability 1(Event Player) == False;
        Is In Line of Sight(Eye Position(Event Player), Global.GatePosition, Barriers Do Not Block LOS) == True;
        Is In View Angle(Event Player, Global.GatePosition, 7.5) == True;
    }
    actions {
        "wait(0.8, Wait.ABORT_WHEN_FALSE)"
        Start Holding Button(Event Player, Button(Ability 1));
        Wait Until(Is Using Ability 1(Event Player), 1);
        Stop Holding Button(Event Player, Button(Ability 1));
    }
}

rule ("BOT: REIN - DEATH") {
    event {
        Ongoing - Each Player;
        Team 2;
        Reinhardt;
    }
    actions {
        Stop Holding Button(Event Player, Button(Primary Fire));
        Stop Holding Button(Event Player, Button(Secondary Fire));
    }
}

rule ("SUBROUTINE: REIN - RESPAWN") {
    event {
        Subroutine;
        BotReinRespawn;
    }
    actions {
        Call Subroutine(BotApearFromUnderground);
        Start Facing(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 360, To World, Direction and Turn Rate);
    }
}

disabled rule("=== WIDOW ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: WIDOW - SEE PLAYER") {
    event {
        Ongoing - Each Player;
        Team 2;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotSeePlayer == Null;
        (Event Player).HasBadStatus == False;
        "CAN SEE PLAYER"
        Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)) == True;
    }
    actions {
        Set Player Variable(Event Player, BotSeePlayer, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS))), Distance Between(Position Of(Event Player), Position Of(Current Array Element)))));
        Set Player Variable(Event Player, BotWidowShotTime, Add(Total Time Elapsed, If-Then-Else(Compare(Global.TimeMin, >=, 9), Random Real(2, 5), Random Real(5, 10))));
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position((Event Player).BotSeePlayer)), 9999, To World, Direction and Turn Rate);
    }
}

rule ("BOT: WIDOW - SHOOT") {
    event {
        Ongoing - Each Player;
        Team 2;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotSeePlayer != Null;
        (Event Player).HasBadStatus == False;
        Total Time Elapsed >= (Event Player).BotWidowShotTime;
    }
    actions {
        Press Button(Event Player, Button(Primary Fire));
        Stop Facing(Event Player);
        Set Player Variable(Event Player, BotSeePlayer, Null);
    }
}

rule ("BOT: WIDOW - Aim Sound") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Is Alive(Event Player) == True;
        Is In Line of Sight(Eye Position(Players On Hero(Hero(Widowmaker), Team 2)), Eye Position(Event Player), Barriers Do Not Block LOS) == True;
        Is Alive(Players On Hero(Hero(Widowmaker), Team 2)) == True;
        (Players On Hero(Hero(Widowmaker), Team 2)).BotSeePlayer == True;
    }
    actions {
        Play Effect(Event Player, Explosion Sound, Color(White), Event Player, 100);
        Wait(1, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("BOT: WIDOW - TELEPORT TO NEW POSITION") {
    event {
        Ongoing - Each Player;
        Team 2;
        Widowmaker;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).HasBadStatus == False;
        Total Time Elapsed >= (Event Player).BotWidowTeleportTime;
    }
    actions {
        Set Player Variable(Event Player, BotWidowTeleportTime, Add(Total Time Elapsed, 28));
        Set Player Variable(Event Player, BotWidowShotTime, Add(Total Time Elapsed, Random Real(1, 1.6)));
        Play Effect(All Players(All Teams), Bad Pickup Effect, Color(White), Event Player, 1);
        Wait(0.016, Ignore Condition);
        Teleport(Event Player, Value In Array(Filtered Array(Global.SniperPositions, Compare(Distance Between((Event Player).BotEventPosition, Current Array Element), >, 5)), Random Integer(0, Subtract(Count Of(Global.SniperPositions), 2))));
        Wait(0.02, Ignore Condition);
        Set Player Variable(Event Player, BotEventPosition, Position Of(Event Player));
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Objective Position(2)), To World);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 2);
        Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 100);
    }
}

rule ("BOT: WIDOW - DEATH") {
    event {
        Player Died;
        Team 2;
        Widowmaker;
    }
    actions {
        Stop Holding Button(Event Player, Button(Secondary Fire));
        Wait(0.25, Ignore Condition);
        Destroy Effect((Event Player).BotEffects);
    }
}

rule ("SUBROUTINE: WIDOW - RESPAWN") {
    event {
        Subroutine;
        BotWidowRespawn;
    }
    actions {
        "RESPAWN ON RANDOM SNIPER POSITION"
        Teleport(Event Player, Value In Array(Filtered Array(Global.SniperPositions, Compare(Distance Between((Event Player).BotEventPosition, Current Array Element), >, 5)), Random Integer(0, Subtract(Count Of(Global.SniperPositions), 2))));
        Wait(0.02, Ignore Condition);
        Set Player Variable(Event Player, BotEventPosition, Position Of(Event Player));
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Event Player, 2);
        Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 100);
        Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Objective Position(2)), To World);
        Wait(0.7, Ignore Condition);
        Start Holding Button(Event Player, Button(Secondary Fire));
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Event Player), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 999)), Null, Event Player, False)), Color(Red), Visible To Position and Radius);
        Set Player Variable(Event Player, BotEffects, Last Created Entity);
        Wait Until(Is Dead(Event Player), 99999);
        Destroy Effect((Event Player).BotEffects);
    }
}

rule ("SUBROUTINE: WIDOW - BAD STATUS") {
    event {
        Subroutine;
        BotWidowBadStatus;
    }
    actions {
        Stop Facing(Event Player);
        Destroy Effect((Event Player).BotEffects);
        Wait Until(Not((Event Player).HasBadStatus), 15);
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Event Player), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 999)), Null, Event Player, False)), Color(Red), Visible To Position and Radius);
        Set Player Variable(Event Player, BotEffects, Last Created Entity);
    }
}

disabled rule("=== BASTION ===")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("BOT: BASTION - FLAME GUN")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.BotIsOrisaChild == False;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.BotSeePlayer == True;
		Is Reloading(Event Player) == False;
		Event Player.BotDoesUniqueBehaviour == False;
		Is In View Angle(Event Player, Position Of(Event Player.BotSeePlayer), 50) == True;
		Distance Between(Position Of(Event Player), Position Of(Event Player.BotSeePlayer)) < 8;
	}

	actions
	{
		Event Player.BotDoesUniqueBehaviour = True;
		Stop Holding Button(Event Player, Button(Primary Fire));
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Update Every Frame(Eye Position(Event Player) + World Vector Of(
			Vector(-1, -1.200, 1.800), Event Player, Rotation)), 1, Visible To Position and Radius);
		Event Player.BotEffects = Last Created Entity;
		Start Rule(BotBastionFlameGunDamage, Do Nothing);
		Wait(1.100, Ignore Condition);
		Destroy Effect(Event Player.BotEffects);
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("BOT: BASTION - CAN SEE PLAYER")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.BotIsOrisaChild == False;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		disabled Event Player.BotSeePlayer == Null;
		Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Is In Line of Sight(Eye Position(
			Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)) == True;
	}

	actions
	{
		Event Player.BotSeePlayer = Sorted Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)
			== True && Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)
			== True), Distance Between(Position Of(Event Player), Position Of(Current Array Element)))[0];
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Event Player.BotSeePlayer)), 100, To World,
			Direction and Turn Rate);
	}
}

disabled rule("BOT: BASTION - CAN'T SEE PLAYER")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.BotIsOrisaChild == False;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.BotSeePlayer != Null;
		Is True For Any(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Is In Line of Sight(Eye Position(
			Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS)) == False;
	}

	actions
	{
		Event Player.BotSeePlayer = Null;
		Start Facing(Event Player, Direction Towards(Position Of(Event Player), Event Player.BotNextNodePosition), 100, To World,
			Direction and Turn Rate);
	}
}

disabled rule("BOT: BASTION - MOVE TO BASTION'S TARGET (POSITION)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.BotIsOrisaChild == False;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.IsRespawning == False;
		Event Player.BotIsPathFinding == False;
		Event Player.BotDoesUniqueBehaviour == False;
	}

	actions
	{
		Event Player.BotTargetPosition = Random Value In Array(Filtered Array(Global.BastionTargetPositions, Distance Between(Position Of(
			Event Player), Current Array Element) > 3.500));
		Start Rule(BotStartPathFinding, Do Nothing);
	}
}

rule ("BOT: BASTION - MAIN LOGIC - LOOP") {
    event {
        Ongoing - Each Player;
        Team 2;
        Bastion;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        (Event Player).BotIsOrisaChild == False;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotDoesUniqueBehaviour == False;
    }
    actions {
        Set Player Variable(Event Player, BotSeePlayer, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Is In Line of Sight(Eye Position(Event Player), Eye Position(Current Array Element), Barriers Do Not Block LOS))), Distance Between(Position Of(Event Player), Position Of(Current Array Element)))));
        "SEE THE PLAYER"
        If(Compare((Event Player).BotSeePlayer, !=, Null));
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Subtract(Eye Position((Event Player).BotSeePlayer), Vector(0, 0.5, 0))), 100, To World, Direction and Turn Rate);
        Else If(And(Not(Is Firing Secondary(Event Player)), Compare(Health(Event Player), <, Max Health(Event Player))));
            Start Holding Button(Event Player, Button(Secondary Fire));
        End;
        "async(BotStartPathFinding, AsyncBehavior.NOOP)\r\nREACHED PATH TARGET\r\nelif distance(eventPlayer.getPosition(), eventPlayer.BotTargetPosition) <= 3:\r\nasync(BotResetPathFinding, AsyncBehavior.NOOP)\r\n__end__()"
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BOT: BASTION - ARTILLERY") {
    event {
        Ongoing - Each Player;
        Team 2;
        Bastion;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        (Event Player).BotIsOrisaChild == False;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).BotSeePlayer == True;
        Is Reloading(Event Player) == False;
        (Event Player).BotDoesUniqueBehaviour == False;
        Is In View Angle(Event Player, Position Of((Event Player).BotSeePlayer), 30) == True;
        Distance Between(Position Of(Event Player), Position Of((Event Player).BotSeePlayer)) > 18;
        Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Up, 99)), Null, Event Player, False)) >= 35;
    }
    actions {
        "TRYING TO CAPTURE TARGET"
        Wait(0.8, Abort When False);
        "CAPTURE TARGET"
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, True);
        Stop Throttle In Direction(Event Player);
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Update Every Frame(Eye Position(Event Player)), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 1000)), All Living Players(Team 1), Event Player, True)), Color(Sky Blue), Visible To Position and Radius);
        Set Player Variable(Event Player, BotEffects, Last Created Entity);
        Wait(1.4, Ignore Condition);
        Destroy Effect((Event Player).BotEffects);
        Abort If(Is Dead(Event Player));
        Set Player Variable(Event Player, BotEventPosition, Position Of((Event Player).BotSeePlayer));
        "SHOOT FROM ARTILLERY"
        Set Player Variable(Event Player, BotBastionArtilleryDidShotsCount, 0);
        For Player Variable(Event Player, BotLoopIterator1, 0, 4, 1);
            Modify Player Variable(Event Player, BotBastionArtilleryDidShotsCount, Add, 1);
            Play Effect(All Players(All Teams), Wrecking Ball Minefield Explosion Sound, Color(White), Eye Position(Event Player), 250);
            Play Effect(All Players(All Teams), Pharah Barrage Explosion Effect, Color(Orange), Add(Eye Position(Event Player), World Vector Of(Vector(0, 1.4, -0.7), Event Player, Rotation)), 2);
            Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Add(Eye Position(Event Player), World Vector Of(Vector(0, 1.4, -0.7), Event Player, Rotation)), Add(Eye Position(Event Player), World Vector Of(Vector(Random Real(-1, 1), Random Integer(40, 80), Random Real(0.5, 1.5)), Event Player, Rotation)), Color(Orange), Visible To);
            Set Player Variable(Event Player, BotEffects, Last Created Entity);
            Wait(0.05, Ignore Condition);
            Destroy Effect((Event Player).BotEffects);
            Wait(0.4, Ignore Condition);
            If(Is Dead(Event Player));
                Break;
            End;
        End;
        "BotResetPathFinding()\r\nasync(BotStartPathFinding, AsyncBehavior.NOOP)"
        Start Throttle In Direction(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 1, To World, Replace existing throttle, Direction and Magnitude);
        Wait(1.5, Ignore Condition);
        Start Rule(BotBastionArtilleryDamage, Do Nothing);
        Wait(4, Ignore Condition);
    }
}

rule ("BOT: BASTION - PRIMARY FIRE") {
    event {
        Ongoing - Each Player;
        Team 2;
        Bastion;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        (Event Player).BotIsOrisaChild == False;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).BotSeePlayer != Null;
        (Event Player).BotDoesUniqueBehaviour == False;
        Is In View Angle(Event Player, Position Of((Event Player).BotSeePlayer), 40) == True;
    }
    actions {
        Start Holding Button(Event Player, Button(Primary Fire));
        Wait(1, Ignore Condition);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("BOT: BASTION - DEATH") {
    event {
        Player Died;
        Team 2;
        Bastion;
    }
    actions {
        Stop Holding Button(Event Player, Button(Secondary Fire));
        For Player Variable(Event Player, BotLoopIterator1, 0, 3, 1);
            Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player, 1);
            Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Event Player, 100);
            Wait(0.25, Ignore Condition);
        End;
    }
}

rule ("SUBROUTINE: BASTION - RESPAWN") {
    event {
        Subroutine;
        BotBastionRespawn;
    }
    actions {
        Abort If(Compare((Event Player).BotIsOrisaChild, ==, True));
        Call Subroutine(BotLandingFromSky);
        Set Ammo(Event Player, 0, 0);
        Wait Until(Not(Is Reloading(Event Player)), 99999);
        Set Player Variable(Event Player, BotTargetPosition, Objective Position(2));
    }
}

rule ("SUBROUTINE: BASTION - ARTILLERY DAMAGE") {
    event {
        Subroutine;
        BotBastionArtilleryDamage;
    }
    actions {
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, False);
        "EXPLOSIONS OF ARTILLERY"
        For Player Variable(Event Player, BotLoopIterator2, 0, (Event Player).BotBastionArtilleryDidShotsCount, 1);
            Set Player Variable(Event Player, BotEventPosition, Ray Cast Hit Position(Add((Event Player).BotEventPosition, Vector(0, 50, 0)), Add((Event Player).BotEventPosition, Vector(Random Integer(-4, 4), -15, Random Integer(-4, 4))), Null, Event Player, True));
            Damage(Players Within Radius((Event Player).BotEventPosition, 8, Team 1, Surfaces And Enemy Barriers), Event Player, 50);
            Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), (Event Player).BotEventPosition, 150);
            Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Effect, Color(Orange), (Event Player).BotEventPosition, 5);
            Create Beam Effect(All Players(All Teams), Zarya Particle Beam, (Event Player).BotEventPosition, Add((Event Player).BotEventPosition, Vector(0, 60, 0)), Color(Orange), Visible To);
            Set Player Variable(Event Player, BotEffects, Last Created Entity);
            Wait(0.05, Ignore Condition);
            Destroy Effect((Event Player).BotEffects);
            Wait(0.4, Ignore Condition);
        End;
    }
}

disabled rule("SUBROUTINE: BASTION - FLAME GUN DAMAGE")
{
	event
	{
		Subroutine;
		BotBastionFlameGunDamage;
	}

	actions
	{
		Event Player.BotRayCastHitPosition = Eye Position(Event Player) + World Vector Of(Vector(-1, -1.200, 1.800), Event Player,
			Rotation);
		"FIRE PARTICLES OF FLAME GUN"
		For Player Variable(Event Player, BotLoopIterator1, 1, 13, 3);
			Event Player.BotEventPosition = Ray Cast Hit Position(Event Player.BotRayCastHitPosition,
				Event Player.BotRayCastHitPosition + Facing Direction Of(Event Player) * Event Player.BotLoopIterator1, Null, Event Player,
				True);
			Damage(Players Within Radius(Event Player.BotEventPosition, 4, Team 1, Surfaces And Enemy Barriers), Event Player, 20);
			Set Status(Players Within Radius(Event Player.BotEventPosition, 4, Team 1, Off), Event Player, Burning, 2);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player.BotEventPosition, 150);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player.BotEventPosition, 2.500);
			Wait(0.200, Ignore Condition);
		End;
		Event Player.BotDoesUniqueBehaviour = False;
	}
}

disabled rule("=== ORISA + BASTION ===")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("BOT: ORISA-BASTION - REACHED TARGET POSITION") {
    event {
        Ongoing - Each Player;
        Team 2;
        Orisa;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).BotIsPathFinding == True;
        Distance Between(Position Of(Event Player), Global.BotOrisaTargetPosition) < 1.5;
    }
    actions {
        Call Subroutine(BotResetPathFinding);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(X Component Of(Global.GatePosition), -999, Z Component Of(Global.GatePosition))), 80, To World, Direction and Turn Rate);
        Start Facing(Global.BotOrisaChild, Direction Towards(Eye Position(Event Player), If-Then-Else(Is In Line of Sight(Eye Position(Event Player), Global.GatePosition, Barriers Do Not Block LOS), Global.GatePosition, First Of(Sorted Array(All Living Players(Team 1), Distance Between(Eye Position(Event Player), Position Of(Current Array Element)))))), 200, To World, Direction and Turn Rate);
        "BotOrisaChild.startFacing(directionTowards(eventPlayer.getEyePosition(), GatePosition if isInLoS(eventPlayer.getEyePosition(), GatePosition, BarrierLos.PASS_THROUGH_BARRIERS) else (sorted([player for player in getPlayers(Team.1) if player.isAlive() and isInLoS(eventPlayer.getEyePosition(), player.getPosition(), BarrierLos.PASS_THROUGH_BARRIERS)], lambda i: distance(eventPlayer.getEyePosition(), i.getPosition())))[0]), 200, Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)"
        Press Button(Event Player, Button(Ability 1));
        Wait Until(Compare(Y Component Of(Facing Direction Of(Event Player)), <, -0.3), 99999);
        Press Button(Event Player, Button(Ability 2));
        Wait(0.8, Ignore Condition);
        Set Player Variable(Global.BotOrisaChild, BotDoesUniqueBehaviour, False);
        Disallow Button(Event Player, Button(Ability 2));
    }
}

rule ("BOT: ORISA-BASTION - SHOOT") {
    event {
        Ongoing - Each Player;
        Team 2;
        Bastion;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        (Event Player).BotIsOrisaChild == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotDoesUniqueBehaviour == False;
    }
    actions {
        Set Player Variable(Event Player, BotDoesUniqueBehaviour, True);
        While(Is Alive(Event Player));
            "createEffect(getAllPlayers(), Effect.BAD_AURA, Color.PURPLE, eventPlayer.getEyePosition() - vect(0, 0.7, 0) + eventPlayer.getFacingDirection() * 3.2, 1, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)\r\neventPlayer.BotEffects = getLastCreatedEntity()"
            Wait(1.5, Ignore Condition);
            Abort If(Is Dead(Event Player));
            Press Button(Event Player, Button(Primary Fire));
            Press Button(Event Player, Button(Reload));
            Set Player Variable(Event Player, BotRayCastHitPosition, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 999)), All Players(Team 1), All Players(Team 2), True));
            Modify Player Variable(Event Player, BotRayCastHitPosition, Add, Multiply(Direction Towards((Event Player).BotRayCastHitPosition, Eye Position(Event Player)), 0.2));
            Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Add(Subtract(Eye Position(Event Player), Vector(0, 0.7, 0)), Multiply(Facing Direction Of(Event Player), 3)), (Event Player).BotRayCastHitPosition, Color(Purple), Visible To Position and Radius);
            Set Player Variable(Event Player, BotEffects, Last Created Entity);
            Damage(Players Within Radius((Event Player).BotRayCastHitPosition, 4, Team 1, Surfaces And All Barriers), Event Player, 0.04);
            Play Effect(All Players(All Teams), Pharah Concussive Blast Effect, Color(Purple), (Event Player).BotRayCastHitPosition, 4);
            Play Effect(All Players(All Teams), Pharah Concussive Blast Sound, Color(Purple), (Event Player).BotRayCastHitPosition, 250);
            Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 3.3)), 2);
            Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(Purple), Eye Position(Event Player), 170);
            If(And(Compare(Distance Between((Event Player).BotRayCastHitPosition, Global.GatePosition), <, 4), Is In Line of Sight((Event Player).BotRayCastHitPosition, Global.GatePosition, Enemy Barriers Block LOS)));
                Modify Global Variable(GateHealth, Subtract, 80);
                Start Rule(GateProgressBarColor, Restart Rule);
            End;
            Wait(0.15, Ignore Condition);
            Destroy Effect((Event Player).BotEffects);
            Wait(0.06, Ignore Condition);
            Wait Until(Not(Is Reloading(Event Player)), 2.5);
        End;
    }
}

rule ("BOT: ORISA-BASTION - CAN'T SEE THE TARGET") {
    event {
        Ongoing - Each Player;
        Team 2;
        Orisa;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).IsRespawning == False;
        (Event Player).BotIsPathFinding == False;
        Is In Line of Sight(Eye Position(Event Player), Global.GatePosition, Barriers Do Not Block LOS) == False;
    }
    actions {
        Set Player Variable(Event Player, BotTargetPosition, Global.BotOrisaTargetPosition);
        Start Rule(BotStartPathFinding, Restart Rule);
    }
}

rule ("BOT: ORISA-BASTION - DEATH") {
    event {
        Player Died;
        Team 2;
        Orisa;
    }
    actions {
        Allow Button(Event Player, Button(Ability 2));
        Kill(Global.BotOrisaChild, Null);
        Detach Players(Global.BotOrisaChild);
        Clear Status(Global.BotOrisaChild, Phased Out);
        Set Damage Dealt(Global.BotOrisaChild, 100);
        Set Player Variable(Global.BotOrisaChild, BotIsOrisaChild, False);
        Set Global Variable(BotOrisaChild, Null);
        Set Global Variable(BotOrisaParent, Null);
        Start Forcing Player To Be Hero(Event Player, Hero(Widowmaker));
    }
}

rule ("SUBROUTINE: ORISA - RESPAWN") {
    event {
        Subroutine;
        BotOrisaRespawn;
    }
    actions {
        Set Global Variable(BotOrisaParent, Event Player);
        "WAITING FOR ANY BASTION TO DIE"
        Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Bastion)))), 99999);
        "SETUP BASTION AS CHILD"
        Set Global Variable(BotOrisaChild, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Bastion))))));
        Set Player Variable(Global.BotOrisaChild, BotIsOrisaChild, True);
        Set Player Variable(Global.BotOrisaChild, BotDoesUniqueBehaviour, True);
        Wait(2, Ignore Condition);
        Respawn(Global.BotOrisaChild);
        Start Scaling Player(Global.BotOrisaChild, 1.8, False);
        Set Damage Dealt(Global.BotOrisaChild, Absolute Value(2000));
        Set Status(Global.BotOrisaChild, Null, Phased Out, 9999);
        Disable Nameplates(Global.BotOrisaChild, All Players(All Teams));
        Set Facing(Global.BotOrisaChild, Vector(X Component Of(Facing Direction Of(Event Player)), 9999, Z Component Of(Facing Direction Of(Event Player))), To World);
        Start Holding Button(Global.BotOrisaChild, Button(Ability 1));
        Wait Until(Is In Alternate Form(Global.BotOrisaChild), 5);
        Stop Holding Button(Global.BotOrisaChild, Button(Ability 1));
        Teleport(Global.BotOrisaChild, Position Of(Event Player));
        Attach Players(Global.BotOrisaChild, Global.BotOrisaParent, Vector(0, 1.8, 0.23));
        "wait(1)\r\nBotOrisaChild.stopForcingButton(Button.PRIMARY_FIRE)\r\nwait(0.25)"
        Call Subroutine(BotLandingFromSky);
        Start Facing(Event Player, Direction Towards(Position Of(Event Player), (Event Player).BotNextNodePosition), 360, To World, Direction and Turn Rate);
        Set Player Variable(Event Player, BotTargetPosition, Global.BotOrisaTargetPosition);
        Start Rule(BotStartPathFinding, Do Nothing);
    }
}

rule ("GLOBAL: GAME LOGIC - MIN 0 - ZENS, REINS, BALL") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 0;
    }
    actions {
        "CREATE BOTS - ZEN"
        While(Compare(Number Of Players(Team 2), <, 13));
            Create Dummy Bot(Hero(Zenyatta), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
            Wait(1, Ignore Condition);
        End;
        "BALL"
        While(Compare(Number Of Heroes(Hero(Wrecking Ball), Team 2), ==, 0));
            Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
            Wait(1, Ignore Condition);
        End;
        "REPLACE DEAD ZEN TO REIN"
        While(Compare(Number Of Heroes(Hero(Reinhardt), Team 2), !=, 3));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(0.2, Ignore Condition);
            Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
    }
}

rule ("GLOBAL: GAME LOGIC - MIN 1 - WIDOW") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 1;
    }
    actions {
        Set Global Variable(IsNewWaveGameLogicProcessing, True);
        While(Compare(Number Of Heroes(Hero(Widowmaker), Team 2), ==, 0));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(0.2, Ignore Condition);
            Create Dummy Bot(Hero(Widowmaker), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        Set Global Variable(IsNewWaveGameLogicProcessing, False);
    }
}

rule ("GLOBAL: GAME LOGIC - MIN 3 - BALL") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 3;
    }
    actions {
        "WAITING FOR ANY ZEN TO DIE"
        Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
        "REPLACE HIM TO A NEW HERO"
        Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
        Wait(0.2, Ignore Condition);
        Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
        Wait(1, Ignore Condition);
        Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        "WAITING FOR ANY ZEN TO DIE"
        Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
        "REPLACE HIM TO A NEW HERO"
        Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
        Wait(0.2, Ignore Condition);
        Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
        Wait(1, Ignore Condition);
        Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
    }
}

rule ("GLOBAL: GAME LOGIC - MIN 5 - REINS WAVE") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 5;
    }
    actions {
        "PREPARE WAVE - DESTROY WIDOW AND BALLS"
        Destroy Dummy Bot(Team 2, Slot Of(First Of(Players On Hero(Hero(Widowmaker), Team 2))));
        While(Compare(Number Of Heroes(Hero(Wrecking Ball), Team 2), >, 0));
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Players On Hero(Hero(Wrecking Ball), Team 2)));
            Kill(Global.DefaultCurrentBot, Null);
            Wait(0.5, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
        End;
        "BOSS WAVE"
        Big Message(All Players(All Teams), Custom String("BOSS WAVE - {0} {1}", Hero(Reinhardt), Hero Icon String(Hero(Reinhardt)), Null));
        While(Compare(Number Of Heroes(Hero(Reinhardt), Team 2), <, 6));
            Wait Until(Is True For Any(All Players(Team 2), And(Compare(Distance Between(Position Of(Current Array Element), Global.GatePosition), >, 15), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        While(Compare(Number Of Heroes(Hero(Reinhardt), Team 2), >, 3));
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Reinhardt)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Reinhardt))))));
            Wait(0.5, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
        End;
        While(Compare(Number Of Heroes(Hero(Widowmaker), Team 2), ==, 0));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Widowmaker), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        While(Compare(Number Of Heroes(Hero(Wrecking Ball), Team 2), ==, 0));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        While(Compare(Number Of Players(Team 2), <, 13));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Zenyatta), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        Big Message(All Players(All Teams), Custom String("BOSS WAVE FINISHED!", Null, Null, Null));
    }
}

rule ("GLOBAL: GAME LOGIC - MIN 7 - BASTION") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 7;
    }
    actions {
        While(Compare(Number Of Heroes(Hero(Bastion), Team 2), ==, 0));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(1, Ignore Condition);
            Create Dummy Bot(Hero(Bastion), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        While(Compare(Number Of Heroes(Hero(Widowmaker), Team 2), ==, 0));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Widowmaker), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
    }
}

rule ("GLOBAL: GAME LOGIC - MIN 9 - ECHO, +1 BASTION") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 9;
    }
    actions {
        While(Compare(Number Of Heroes(Hero(Wrecking Ball), Team 2), >, 0));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Wrecking Ball)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Wrecking Ball))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
        End;
        While(Compare(Number Of Heroes(Hero(Echo), Team 2), ==, 0));
            Wait(1, Ignore Condition);
            Create Dummy Bot(Hero(Echo), Team 2, -1, Vector(0, 9999, 0), Vector(0, 0, 0));
        End;
        While(Compare(Number Of Heroes(Hero(Bastion), Team 2), <, 2));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Bastion), Team 2, -1, Vector(0, 9999, 0), Vector(0, 0, 0));
        End;
        While(Compare(Number Of Heroes(Hero(Wrecking Ball), Team 2), <, 2));
            "WAITING FOR ANY ZEN TO DIE"
            Wait Until(Is True For Any(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta)))), 99999);
            "REPLACE HIM TO A NEW HERO"
            Set Global Variable(DefaultCurrentBot, First Of(Filtered Array(All Players(Team 2), And(Is Dead(Current Array Element), Compare(Hero Of(Current Array Element), ==, Hero(Zenyatta))))));
            Wait(0.2, Ignore Condition);
            Destroy Dummy Bot(Team 2, Slot Of(Global.DefaultCurrentBot));
            Wait(0.5, Ignore Condition);
            Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
        "FILL EMPTY SLOTS BY ZENS"
        While(Compare(Number Of Players(Team 2), <, 12));
            Wait(1, Ignore Condition);
            Create Dummy Bot(Hero(Zenyatta), Team 2, -1, Vector(0, 999, 0), Vector(0, 0, 0));
        End;
    }
}

rule ("Ana Nano Variable") {
    event {
        Ongoing - Each Player;
        Team 1;
        Ana;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Set Player Variable(Player Closest To Reticle(Event Player, Team 1), IsNanoed, 1);
    }
}

rule ("IsNanoed") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        (Event Player).IsNanoed == True;
    }
    actions {
        If(Is Dead(Event Player));
            Set Player Variable(Event Player, IsNanoed, 0);
        End;
        Wait(8, Ignore Condition);
        Set Player Variable(Event Player, IsNanoed, 0);
    }
}

rule ("money on kill") {
    event {
        Player Dealt Final Blow;
        Team 1;
        All;
    }
    actions {
        If(Compare(Hero Of(Victim), ==, Hero(Zenyatta)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(5, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(5, If-Then-Else((Victim).isBoss, 3, 1)));
        Else If(Compare(Hero Of(Victim), ==, Hero(Reinhardt)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(15, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(15, If-Then-Else((Victim).isBoss, 3, 1)));
        Else If(Compare(Hero Of(Victim), ==, Hero(Wrecking Ball)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(20, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(20, If-Then-Else((Victim).isBoss, 3, 1)));
        Else If(Compare(Hero Of(Victim), ==, Hero(Widowmaker)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(25, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(25, If-Then-Else((Victim).isBoss, 3, 1)));
        Else If(Compare(Hero Of(Victim), ==, Hero(Bastion)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(50, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(50, If-Then-Else((Victim).isBoss, 3, 1)));
        Else If(Compare(Hero Of(Victim), ==, Hero(Echo)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(75, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(75, If-Then-Else((Victim).isBoss, 3, 1)));
        Else If(Compare(Hero Of(Victim), ==, Hero(Orisa)));
            Modify Player Variable At Index(All Players(Team 1), Money, 0, Add, Multiply(100, If-Then-Else((Victim).isBoss, 3, 1)));
            Modify Global Variable(StartMoney, Add, Multiply(100, If-Then-Else((Victim).isBoss, 3, 1)));
    }
}

rule ("Abilities and Hero Talents by Shingen and LemonAid") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    actions {
        Set Player Variable(Event Player, DamageDealt, 100);
        Set Player Variable(Event Player, PlayerHealth, 100);
        Set Player Variable At Index(Event Player, Money, 0, Add(2400, Global.StartMoney));
        If(Compare(Custom String("{0}", Event Player, Null, Null), ==, Custom String("ShuriZma", Null, Null, Null)));
            Create HUD Text(Event Player, Custom String("Serverload: {0}, AVG {1}, Peak {2}", Server Load, Server Load Average, Server Load Peak), Null, Null, Left, -10000, Color(Red), Null, Null, Visible To and String, Default Visibility);
    }
}

rule ("Team 1 (Ability): Headhunter") {
    event {
        Player Dealt Damage;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 1) == True;
        Event Was Critical Hit == True;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Divide(Multiply(Value In Array((Event Player).Abilities, 1), 40), (Event Player).DamageDealt), Event Damage));
    }
}

rule ("Team 1 (Ability): Ambush") {
    event {
        Player Dealt Damage;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 2) == True;
        Event Ability != Null;
        Or(Compare(Subtract(Y Component Of(Position Of(Event Player)), Y Component Of(Position Of(Victim))), >=, 3), Compare(Absolute Value(Horizontal Angle Towards(Victim, Event Player)), >=, 90)) == True;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Divide(Multiply(Value In Array((Event Player).Abilities, 2), 30), (Event Player).DamageDealt), Event Damage));
    }
}

rule ("Team 1 (Ability): Quick Fix") {
    event {
        Player Earned Elimination;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 3) == True;
    }
    actions {
        Heal(Event Player, Null, Multiply(Value In Array((Event Player).Abilities, 3), 50));
        Set Move Speed(Event Player, Add(100, Multiply(Value In Array((Event Player).Abilities, 3), 20)));
        Wait(5, Restart When True);
        Set Move Speed(Event Player, 100);
    }
}

rule ("Team 1 (Ability): Heavyweight") {
    event {
        Player Dealt Knockback;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 4) == True;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Divide(Multiply(Value In Array((Event Player).Abilities, 4), 25), (Event Player).DamageDealt), Event Damage));
    }
}

rule ("Team 1 (Ability): Charged") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 5) == True;
        Ultimate Charge Percent(Event Player) < Multiply(Value In Array((Event Player).Abilities, 5), 20);
    }
    actions {
        Set Ultimate Charge(Event Player, Multiply(Value In Array((Event Player).Abilities, 5), 20));
        If(Is Duplicating(Event Player));
            Wait(0.016, Ignore Condition);
            Set Ultimate Charge(Event Player, Multiply(Value In Array((Event Player).Abilities, 5), 20));
        End;
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Team 1 (Ability): Haste Primary Fire") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 6) == True;
        Ability Cooldown(Event Player, Button(Primary Fire)) > 0.1;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Primary Fire), Multiply(Subtract(1, Multiply(0.25, Value In Array((Event Player).Abilities, 6))), Ability Cooldown(Event Player, Button(Primary Fire))));
    }
}

rule ("Team 1 (Ability): Haste Secondary Fire") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 6) == True;
        Ability Cooldown(Event Player, Button(Secondary Fire)) > 0.1;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Secondary Fire), Multiply(Subtract(1, Multiply(0.25, Value In Array((Event Player).Abilities, 6))), Ability Cooldown(Event Player, Button(Secondary Fire))));
    }
}

rule ("Team 1 (Ability): Haste Ability 1") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 6) == True;
        Ability Cooldown(Event Player, Button(Ability 1)) > 0.1;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Ability 1), Multiply(Subtract(1, Multiply(0.25, Value In Array((Event Player).Abilities, 6))), Ability Cooldown(Event Player, Button(Ability 1))));
    }
}

rule ("Team 1 (Ability): Haste Ability 2") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 6) == True;
        Ability Cooldown(Event Player, Button(Ability 2)) > 0.1;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Ability 2), Multiply(Subtract(1, Multiply(0.25, Value In Array((Event Player).Abilities, 6))), Ability Cooldown(Event Player, Button(Ability 2))));
    }
}

rule ("Team 1 (Ability): Haste Jump") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 6) == True;
        Ability Cooldown(Event Player, Button(Jump)) > 0.1;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Jump), Multiply(Subtract(1, Multiply(0.25, Value In Array((Event Player).Abilities, 6))), Ability Cooldown(Event Player, Button(Jump))));
    }
}

rule ("Team 1 (Ability): Haste Crouch") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 6) == True;
        Ability Cooldown(Event Player, Button(Crouch)) > 0.1;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Crouch), Multiply(Subtract(1, Multiply(0.25, Value In Array((Event Player).Abilities, 6))), Ability Cooldown(Event Player, Button(Crouch))));
    }
}

rule ("Team 2 (Ability): Heavy Impact") {
    event {
        Player Took Damage;
        Team 2;
        All;
    }
    conditions {
        Value In Array((Attacker).Abilities, 7) == True;
    }
    actions {
        Abort If(Compare(Random Real(-0.02, 1), >, Divide(Event Damage, Max Health(Event Player))));
        Set Status(Event Player, Attacker, Stunned, Value In Array((Attacker).Abilities, 7));
        Wait(5, Ignore Condition);
    }
}

rule ("Team 1 (Ability): Binding Heal") {
    event {
        Player Dealt Healing;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 10) == True;
        Healee != Event Player;
    }
    actions {
        Set Player Health(Event Player, Add(Health(Event Player), Multiply(Multiply(Value In Array((Event Player).Abilities, 10), 0.25), Event Healing)));
    }
}

rule ("Team 1 (Ability): Resilience") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 11) == True;
        Normalized Health(Event Player) < Multiply(Value In Array((Event Player).Abilities, 11), 0.3);
    }
    actions {
        Set Damage Received(Event Player, 70);
        Wait Until(Not(And(Value In Array((Event Player).Abilities, 11), Compare(Normalized Health(Event Player), <, Multiply(Value In Array((Event Player).Abilities, 11), 0.3)))), 99999);
        Set Damage Received(Event Player, 100);
    }
}

rule ("Auto Repair") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.AutoRepair == True;
        Global.GateHealth < Global.GateMaxHealth;
    }
    actions {
        If(Compare(Global.UpgradeGateMaxHealthValue, >=, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 2)));
            Modify Global Variable(GateHealth, Add, Multiply(10, Global.AutoRepair));
            Modify Global Variable(UpgradeGateMaxHealthValue, Add, Multiply(10, Global.AutoRepair));
        Else;
            Modify Global Variable(GateHealth, Add, Multiply(5, Global.AutoRepair));
            Modify Global Variable(UpgradeGateMaxHealthValue, Add, Multiply(5, Global.AutoRepair));
        End;
        If(Compare(Global.GateHealth, >, Global.GateMaxHealth));
            Set Global Variable(GateHealth, Global.GateMaxHealth);
        End;
        "UPDATE GATE'S HEALTH BAR"
        Start Rule(GateProgressBarColor, Restart Rule);
        Wait(5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Ana Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Ana;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Ana), Button(Ability 1)), Custom String("Sleep Paralysis: Slept enemies cannot be woken up by damage", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Ana), Button(Ability 2)), Custom String("Multinade: Ana throws multiple Biotic Grenades", Null, Null, Null)));
    }
}

rule ("Brigitte Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Brigitte;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Brigitte), Button(Ability 1)), Custom String("Heavy Iron: Hitting enemies with Whip Flail will root them in pace", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Brigitte), Button(Ultimate)), Custom String("Endeavor: Gain a health, damage and speed boost when your barrier breaks", Null, Null, Null)));
    }
}

rule ("Mercy Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Mercy;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Mercy), Button(Ability 2)), Custom String("Angelic blessing: Healing an ally slowly charges their ultimate", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Mercy), Button(Ultimate)), Custom String("Holy light missiles: Unleash blasts of holy light missiles during valkyrie", Null, Null, Null)));
    }
}

rule ("Lúcio Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Lúcio;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Lúcio), Button(Secondary Fire)), Custom String("Healing Wave: Soundwave heals allies for 30% of their max HP", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Lúcio), Button(Ability 1)), Custom String("Reverse Amp: Amp It Up inflicts the opposite effect of the currently played song to enemies", Null, Null, Null)));
    }
}

rule ("Moira Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Moira;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Moira), Button(Secondary Fire)), Custom String("Hose: Biotic Grasp primary will damage and push enemies back", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Moira), Button(Ability 2)), Custom String("Flourish: Biotic Orbs are 3x more effective", Null, Null, Null)));
    }
}

rule ("Baptiste Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Baptiste;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Icon String(Poison), Custom String("Corrode: Regenerative Burst will damage and poison enemies", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Baptiste), Button(Ability 2)), Custom String("Breakthrough: Immortality Field HP threshold increased to 100%; allies inside gain ultimate", Null, Null, Null)));
    }
}

rule ("Ashe Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Ashe;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Ashe), Button(Ability 2)), Custom String("Wildfire: Shooting a burning enemy ignites other nearby enemies", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Icon String(Fire), Custom String("Flare trigger: Coach gun instantly damages all burning enemies", Null, Null, Null)));
    }
}

rule ("D.Va Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        D.Va;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(D.Va), Button(Secondary Fire)), Custom String("Voltage Grid: Defense Matrix will damage and root enemies it's casted over", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(D.Va), Button(Ability 1)), Custom String("Shooting Star: Boosters set enemies on fire", Null, Null, Null)));
    }
}

rule ("Genji Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Genji;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Genji), Button(Ability 1)), Custom String("Venomous Strike: Swift Strike poisons enemies; heal for poison damage", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Genji), Button(Ultimate)), Custom String("Dragon's Breath: Dragonblade fires large explosive energy charges", Null, Null, Null)));
    }
}

rule ("Hanzo Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Hanzo;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Icon String(Bolt), Custom String("Stormbreak: Enemies eliminated by hanzo unleash a thundercloud", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Hanzo), Button(Ability 2)), Custom String("Punch II: Storm Arrows deal more damage and stun and knockback enemies", Null, Null, Null)));
    }
}

rule ("Widowmaker Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Widowmaker;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Widowmaker), Button(Ultimate)), Custom String("Kiss Of Death: Scoped critical hits against enemies below 30% health explode and instantly die", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Widowmaker), Button(Ability 2)), Custom String("Epidemic: Enemies hurt by Venom Mine unleash toxic pulses; heal for dealt damage", Null, Null, Null)));
    }
}

rule ("McCree Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Cassidy;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Cassidy), Button(Ability 2)), Custom String("Panic: Flashbang puts enemies in fear; deal +120% more damage to enemies in fear", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Cassidy), Button(Ultimate)), Custom String("Clocked: Deadeye deals more damage and knocks enemies down", Null, Null, Null)));
    }
}

rule ("Reinhardt Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reinhardt;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Reinhardt), Button(Ability 2)), Custom String("Fire Blast: Fire Strike explodes as it deals damage, setting enemies on fire", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Reinhardt), Button(Ultimate)), Custom String("Epicenter: Earthshatter travels in all directions", Null, Null, Null)));
    }
}

rule ("Soldier: 76 Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Soldier: 76;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Pharah), Button(Ultimate)), Custom String("Triple Threat: 2 more rockets are fired alongside Helix Rockets", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Soldier: 76), Button(Ability 1)), Custom String("Shoulder Check: Sprinting into enemies will damage and tackle them to the ground", Null, Null, Null)));
    }
}

rule ("Torbjörn Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Torbjörn;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Torbjörn), Button(Ability 2)), Custom String("Melting point: Unleash heatwaves during overload and molten core", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Torbjörn), Button(Ultimate)), Custom String("Roots Of Magma: Enemies trapped in Molten Core blots cannot move", Null, Null, Null)));
    }
}

rule ("Tracer Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Tracer;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Tracer), Button(Ability 2)), Custom String("Vortex: Recall pulls and roots enemies towards the activation point", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Tracer), Button(Ultimate)), Custom String("Chain Reaction: Pulse Bomb creates chain explosions on enemies damaged by it", Null, Null, Null)));
    }
}

rule ("Winston Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Winston;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Winston), Button(Ability 2)), Custom String("Blast Barrier: Barrier Projector damages enemies inside the area", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Winston), Button(Ultimate)), Custom String("Next Generation: Eliminations during Primal Rage add +15% ultimate charge towards the next", Null, Null, Null)));
    }
}

rule ("Pharah Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Pharah;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Pharah), Button(Ability 2)), Custom String("Head Trauma: Concussive Blast stuns and damages enemies for 25% of their max health", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Pharah), Button(Ability 1)), Custom String("Thunderbird: Gain 150 shields and deal 4x the damage to barriers and objects", Null, Null, Null)));
    }
}

rule ("Bastion Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Bastion;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Echo), Button(Secondary Fire)), Custom String("Bomblets: Bullets shot during sentry configuration are explosive", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Symmetra), Button(Ability 1)), Custom String("Tesla: A powerful mounted laser will autmotically attack one enemy at a time", Null, Null, Null)));
    }
}

rule ("Doomfist Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Doomfist;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Pharah), Button(Jump)), Custom String("Phase Shifter: Immune to damage while any ability is active", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Doomfist), Button(Ultimate)), Custom String("Fissure: Meteor Strike leaves a large fissure behind that burns enemies over it", Null, Null, Null)));
    }
}

rule ("Echo Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Echo;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Echo), Button(Ability 2)), Custom String("Focusing Optics: Focusing Beam damage ramp starts at 90% health", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Echo), Button(Secondary Fire)), Custom String("Streamline: Fire many more sticky bombs per burst", Null, Null, Null)));
    }
}

rule ("Junkrat Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Junkrat;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Icon String(Fire), Custom String("Pyromania: All explosive attacks inflict fire damage", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Junkrat), Button(Ability 2)), Custom String("Short Fused: Steel Trap sets off violent explosions once triggered", Null, Null, Null)));
    }
}

rule ("Mei Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Mei;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Mei), Button(Ultimate)), Custom String("Cold Snap: Instantly freeze neaerby enemies once Cryo-Freeze expires", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Mei), Button(Ability 2)), Custom String("Icebound: While Ice Wall is up, Icicles freeze and deal much more damage", Null, Null, Null)));
    }
}

rule ("Orisa Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Orisa;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Orisa), Button(Ability 1)), Custom String("Immovable Object: During Fortify, become immune and convert 50% of taken damage to healing", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Orisa), Button(Secondary Fire)), Custom String("Unstoppable Force: Halt! is much larger and pushes enemies. When triggered, it explodes violently", Null, Null, Null)));
    }
}

rule ("Reaper Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reaper;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Reaper), Button(Ability 1)), Custom String("shadow streak: shadow step creates a beam that damages enemies who cross", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Reaper), Button(Ultimate)), Custom String("Loom: Traumatize enemies in front of you when using Wraith Form", Null, Null, Null)));
    }
}

rule ("Roadhog Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Roadhog;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Icon String(Poison), Custom String("Stench: Roadhog constantly damages enemies nearby", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Roadhog), Button(Ability 1)), Custom String("Rusted Anchor: Hook deals more damage; Eliminations will reset hook cooldown", Null, Null, Null)));
    }
}

rule ("Sig﻿ma Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sigma;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Sigma), Button(Ability 1)), Custom String("Gravity Well: Kinetic Grasp gives invincibility", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Sigma), Button(Ultimate)), Custom String("Gravity Channels: Gravitic Flux damages enemies for 75% of max hp instead of 50%", Null, Null, Null)));
    }
}

rule ("Sombra Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sombra;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Sombra), Button(Secondary Fire)), Custom String("Malware: Enemies hacked or in fear take +100% more damage", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Sombra), Button(Ultimate)), Custom String("Glitch: EMP leaves behind a large hack zone ", Null, Null, Null)));
    }
}

rule ("Symmetra Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Symmetra;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Icon String(Bolt), Custom String("High Voltage: Enemies eliminated by Symmetra explode and damage other enemies", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Symmetra), Button(Ultimate)), Custom String("Energy Source: While Photon Barrier is active, all players regenerate health and gain ultimate", Null, Null, Null)));
    }
}

rule ("Wrecking Ball Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Wrecking Ball;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Wrecking Ball), Button(Ultimate)), Custom String("Mirror Ball: Reflect 100% of taken damage to nearby enemies", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Wrecking Ball), Button(Ability 2)), Custom String("Distort: Adaptive Shields damages and hacks nearby enemies", Null, Null, Null)));
    }
}

rule ("Zarya Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Zarya;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Zarya), Button(Ability 1)), Custom String("Augment: Health and barrier hp increased by 50%; barrier sized doubled", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Echo), Button(Ability 2)), Custom String("Perpetual Energy: secondary inflicts burn damage that continues to last until the enemy dies", Null, Null, Null)));
    }
}

rule ("Zenyatta Hero Talent Text") {
    event {
        Ongoing - Each Player;
        Team 1;
        Zenyatta;
    }
    actions {
        Set Player Variable At Index(Event Player, HeroTalentText, 1, Array(Ability Icon String(Hero(Baptiste), Button(Ability 2)), Custom String("Vigor: The ally under the effect of Harmony Orb is immune to damage", Null, Null, Null)));
        Set Player Variable At Index(Event Player, HeroTalentText, 2, Array(Ability Icon String(Hero(Zenyatta), Button(Ultimate)), Custom String("Perfect Balance: Transcendence damages enemies in a large proximity", Null, Null, Null)));
    }
}

rule ("Ana: Sleep Paralysis") {
    event {
        Player Dealt Damage;
        Team 1;
        Ana;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Black), Victim, 1);
        Wait(0.25, Ignore Condition);
        Set Status(Victim, Null, Knocked Down, 5);
    }
}

rule ("Ana: Multinade") {
    event {
        Ongoing - Each Player;
        Team 1;
        Ana;
    }
    conditions {
        Is Using Ability 2(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Player Variable(Event Player, AbilityCountdown, 4);
        While(Compare((Event Player).AbilityCountdown, >, 0));
            Wait(0.03, Ignore Condition);
            Set Ability Cooldown(Event Player, Button(Ability 2), 0);
            Cancel Primary Action(Event Player);
            Wait(0.05, Ignore Condition);
            Press Button(Event Player, Button(Ability 2));
            Modify Player Variable(Event Player, AbilityCountdown, Subtract, 1);
        End;
        Wait(2, Ignore Condition);
    }
}

rule ("Brigitte: Heavy Iron") {
    event {
        Player Dealt Damage;
        Team 1;
        Brigitte;
    }
    conditions {
        Or(Compare(Event Ability, ==, Button(Primary Fire)), Compare(Event Ability, ==, Button(Ability 1))) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Victim, 1.5);
        Set Status(Victim, Null, Rooted, 0.5);
        Set Environment Credit Player(Victim, Event Player);
    }
}

rule ("Brigitte: Endeavor") {
    event {
        Ongoing - Each Player;
        Team 1;
        Brigitte;
    }
    conditions {
        Ability Cooldown(Event Player, Button(Secondary Fire)) >= 0.1;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Ring, Color(Orange), Event Player, 0.4, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Eye Position(Event Player), 15);
        Heal(Players Within Radius(Event Player, 15, Team Of(Event Player), Off), Event Player, 200);
        Modify Player Variable(Event Player, DamageDealt, Multiply, 2.5);
        Set Move Speed(Event Player, 175);
        Add Health Pool To Player(Event Player, Armor, Divide(Max Health(Event Player), 2), False, True);
        Set Player Variable At Index(Event Player, HP_Pool, 1, Last Created Health Pool);
        Wait Until(Is Dead(Event Player), 6);
        Set Player Variable(Event Player, DamageDealt, Add(Add(100, Global.DamageDone), Multiply(Value In Array((Event Player).Abilities, 13), 5)));
        Set Move Speed(Event Player, 100);
        Remove Health Pool From Player(Value In Array((Event Player).HP_Pool, 1));
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
    }
}

rule ("Mercy: Angelic Blessing") {
    event {
        Player Dealt Healing;
        All;
        Mercy;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Healee != Event Player;
        Normalized Health(Healee) < True;
    }
    actions {
        Set Ultimate Charge(Healee, Add(Ultimate Charge Percent(Healee), 1));
        Wait(0.4, Ignore Condition);
    }
}

rule ("Mercy: Aurora") {
    event {
        Ongoing - Each Player;
        Team 1;
        Mercy;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Wait(1.5, Ignore Condition);
        Set Player Variable(Event Player, Ability_Projectile1, Eye Position(Event Player));
        Set Player Variable(Event Player, Ability_End, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 60)), All Living Players(All Teams), Event Player, True));
        Create Beam Effect(All Players(All Teams), Mercy Heal Beam, Event Player, (Event Player).Ability_Projectile1, Color(White), Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 3, Last Created Entity);
        Chase Player Variable At Rate(Event Player, Ability_Projectile1, (Event Player).Ability_End, 70, Destination and Rate);
        While(Compare((Event Player).Ability_End, !=, (Event Player).Ability_Projectile1));
            Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), (Event Player).Ability_Projectile1, 1);
            Wait(0.032, Ignore Condition);
        End;
        Destroy Effect(Value In Array((Event Player).Effects__, 3));
        Play Effect(All Players(All Teams), Good Explosion, Color(White), (Event Player).Ability_Projectile1, 5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), (Event Player).Ability_Projectile1, 5);
        Damage(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 120);
        Loop If Condition Is True;
    }
}

rule ("Lucio: Healing Wave") {
    event {
        Ongoing - Each Player;
        Team 1;
        Lúcio;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 4)), 4);
        Heal(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 4)), 4, Team Of(Event Player), Surfaces), Event Player, Multiply(Max Health(Filtered Array(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 4)), 4, Team Of(Event Player), Surfaces), Is Alive(Current Array Element))), 0.3));
    }
}

rule ("Lucio: Reverse Amp") {
    event {
        Ongoing - Each Player;
        Team 1;
        Lúcio;
    }
    conditions {
        Is Using Ability 2(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        If(Is Using Ability 1(Event Player));
            Set Status(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Rooted, 4);
        Else;
            Damage(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 16.25);
        End;
        Play Effect(All Players(All Teams), Ring Explosion, If-Then-Else(Is Using Ability 1(Event Player), Color(Green), Color(Yellow)), Event Player, 1);
        Wait(0.4, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("[Moira] Hose") {
    event {
        Ongoing - Each Player;
        Team 1;
        Moira;
    }
    conditions {
        Is Firing Primary(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
        Ability Resource(Event Player, Button(Primary Fire)) > False;
    }
    actions {
        Apply Impulse(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 25), And(And(Compare(Distance Between(Event Player, Current Array Element), <=, 15), Is In Line of Sight(Event Player, Current Array Element, Enemy Barriers Block LOS)), Not(Has Status(Current Array Element, Phased Out)))), Facing Direction Of(Event Player), 15, To World, Cancel Contrary Motion);
        Apply Impulse(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 25), And(And(Compare(Distance Between(Event Player, Current Array Element), <=, 15), Not(Is In Line of Sight(Current Array Element, Event Player, Enemy Barriers Block LOS))), Not(Has Status(Current Array Element, Phased Out)))), Up, 8, To World, Cancel Contrary Motion);
        Start Damage Over Time(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 25), And(Compare(Distance Between(Event Player, Current Array Element), <=, 15), Is In Line of Sight(Event Player, Current Array Element, Enemy Barriers Block LOS))), Event Player, 1, 15);
        Wait(0.3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("[Moira] Flourish - Damage") {
    event {
        Player Dealt Damage;
        Team 1;
        Moira;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 2));
        Play Effect(All Players(All Teams), Good Explosion, Color(Violet), Victim, 0.1);
        Wait(0.25, Ignore Condition);
    }
}

rule ("[Moira] Flourish - Healing") {
    event {
        Player Dealt Healing;
        Team 1;
        Moira;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Heal(Healee, Event Player, Multiply(Event Healing, 2));
        Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Healee, 0.1);
        Wait(0.25, Ignore Condition);
    }
}

rule ("Baptiste: Corrode") {
    event {
        Ongoing - Each Player;
        Team 1;
        Baptiste;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Position Of(Event Player), 20);
        Damage(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 25);
        Start Damage Over Time(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 5, 20);
        Wait(0.2, Ignore Condition);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Violet), Position Of(Event Player), 18);
        Damage(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 25);
        Start Damage Over Time(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 5, 12);
    }
}

rule ("Baptiste: Breakthrough") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Has Status(Event Player, Unkillable) == True;
        Value In Array((If-Then-Else(Value In Array((Event Player).Abilities, 12), Players On Hero(Hero(Baptiste), Team Of(Event Player)), Empty Array)).Abilities, 12) == True;
    }
    actions {
        Heal(Event Player, Event Player, 10000);
        Set Status(Event Player, Null, Invincible, 0.8);
        Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 2));
        Wait(0.75, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Ashe: Firebourne") {
    event {
        Player Dealt Damage;
        Team 1;
        Ashe;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Event Ability == Button(Primary Fire);
        Has Status(Victim, Burning) == True;
    }
    actions {
        Set Status(Filtered Array(Players Within Radius(Victim, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Compare(Hero Of(Current Array Element), !=, Hero(Torbjörn))), Null, Burning, 10);
        Start Damage Over Time(Filtered Array(Players Within Radius(Victim, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Compare(Hero Of(Current Array Element), !=, Hero(Torbjörn))), Event Player, 10, 15);
        Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Victim, 5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Victim, 5);
        Wait(0.25, Ignore Condition);
    }
}

rule ("Ashe: Taunt") {
    event {
        Ongoing - Each Player;
        Team 1;
        Ashe;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Damage(Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), Has Status(Current Array Element, Burning)), Event Player, 125);
        Set Status(If-Then-Else(Has Status(Event Player, Burning), All Players(Opposite Team Of(Team Of(Event Player))), Empty Array), Null, Frozen, 0.016);
        Set Status(If-Then-Else(Has Status(Event Player, Burning), All Players(Opposite Team Of(Team Of(Event Player))), Empty Array), Null, Stunned, 2);
    }
}

rule ("D.Va: Voltage Grid") {
    event {
        Ongoing - Each Player;
        Team 1;
        D.Va;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Bad Explosion, Color(Turquoise), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 2)), 0.5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Turquoise), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 5)), 0.5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Turquoise), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 8)), 0.5);
        Wait(0.3, Ignore Condition);
        Damage(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 2)), 2.5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 25);
        Damage(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 5)), 2.5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 25);
        Damage(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 8)), 2.5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 25);
        Wait(0.016, Ignore Condition);
        Set Status(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 2)), 2.5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, Rooted, 0.5);
        Set Status(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 5)), 2.5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, Rooted, 0.5);
        Set Status(Players Within Radius(Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 8)), 2.5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, Rooted, 0.5);
        Loop If Condition Is True;
    }
}

rule ("D.Va: Shooting Star") {
    event {
        Player Dealt Knockback;
        Team 1;
        D.Va;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Damage(Victim, Event Player, 40);
        Set Status(Victim, Null, Burning, 3);
        Start Damage Over Time(Victim, Event Player, 3, 35);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Victim, 1);
    }
}

rule ("Genji: Venomous Strike") {
    event {
        Player Dealt Damage;
        Team 1;
        Genji;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Start Heal Over Time(Event Player, Event Player, 3, 25);
        Start Damage Over Time(Victim, Event Player, 3, 25);
        Damage(Victim, Event Player, 25);
        Heal(Event Player, Event Player, 25);
    }
}

rule ("Genji: Dragon's Breath") {
    event {
        Ongoing - Each Player;
        Team 1;
        Genji;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Is Firing Primary(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Good Aura, Color(Lime Green), (Event Player).Ability_Projectile1, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Set Player Variable(Event Player, Ability_Projectile1, Eye Position(Event Player));
        Chase Player Variable At Rate(Event Player, Ability_Projectile1, (Event Player).Ability_End, 80, Destination and Rate);
        Set Player Variable(Event Player, Ability_End, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 60)), All Living Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)), True));
        Wait Until(Compare((Event Player).Ability_End, ==, (Event Player).Ability_Projectile1), 1);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Green), (Event Player).Ability_Projectile1, 100);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Lime Green), (Event Player).Ability_Projectile1, 5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Green), (Event Player).Ability_Projectile1, 5);
        Damage(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 100);
    }
}

rule ("[Hanzo] Stormbreak (Storm_Effects6)") {
    event {
        Player Died;
        Team 2;
        All;
    }
    conditions {
        Value In Array((Attacker).Abilities, 8) == True;
        Hero Of(Attacker) == Hero(Hanzo);
    }
    actions {
        Set Player Variable(Event Player, Storm_Projectile, Eye Position(Event Player));
        Set Player Variable(Event Player, Storm_EndPoint, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Up, 12)), Null, All Players(All Teams), False));
        Chase Player Variable At Rate(Event Player, Storm_Projectile, (Event Player).Storm_EndPoint, 4, Destination and Rate);
        Create Effect(All Players(All Teams), Cloud, Color(White), Add(Vector(False, -0.5, False), (Event Player).Storm_Projectile), 4, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Storm_Effects, 3, Last Created Entity);
        Create Effect(All Players(All Teams), Bad Aura, Color(White), (Event Player).Storm_Projectile, 3, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Storm_Effects, 4, Last Created Entity);
        Create Effect(All Players(All Teams), Cloud, Color(White), (Event Player).Storm_Projectile, 3.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Storm_Effects, 5, Last Created Entity);
        Create Beam Effect(All Players(All Teams), Bad Beam, (Event Player).Storm_Projectile, Ray Cast Hit Position((Event Player).Storm_Projectile, Add(Add(Vector(0.1, 0, 0), (Event Player).Storm_Projectile), Multiply(Down, 1000)), Null, All Players(All Teams), False), Color(Aqua), Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Storm_Effects, 6, Last Created Entity);
        While(Compare(Distance Between((Event Player).Storm_Projectile, (Event Player).Storm_EndPoint), >, 1));
            Wait(0.6, Ignore Condition);
            Damage(Players Within Radius(Ray Cast Hit Position((Event Player).Storm_Projectile, Add((Event Player).Storm_Projectile, Multiply(Down, 1000)), Null, All Players(All Teams), False), 3, Team Of(Event Player), Surfaces), Attacker, 50);
            Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Aqua), Ray Cast Hit Position((Event Player).Storm_Projectile, Add((Event Player).Storm_Projectile, Multiply(Down, 1000)), Null, All Players(All Teams), False), 3);
            Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Ray Cast Hit Position((Event Player).Storm_Projectile, Add((Event Player).Storm_Projectile, Multiply(Down, 1000)), Null, All Players(All Teams), False), 3);
        End;
        Destroy Effect(Value In Array((Event Player).Storm_Effects, 3));
        Destroy Effect(Value In Array((Event Player).Storm_Effects, 4));
        Destroy Effect(Value In Array((Event Player).Storm_Effects, 5));
        Destroy Effect(Value In Array((Event Player).Storm_Effects, 6));
    }
}

rule ("Hanzo: Punch II") {
    event {
        Player Dealt Damage;
        Team 1;
        Hanzo;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Event Ability == Button(Ability 2);
        Hero Of(Victim) != Hero(Torbjörn);
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 0.8));
        Apply Impulse(Victim, Facing Direction Of(Event Player), 12, To World, Cancel Contrary Motion);
        Apply Impulse(Victim, Up, 5, To World, Cancel Contrary Motion);
        Set Environment Credit Player(Victim, Event Player);
        Set Status(Victim, Null, Stunned, 1);
    }
}

rule ("Widowmaker: Kiss Of Death") {
    event {
        Player Dealt Damage;
        Team 1;
        Widowmaker;
    }
    conditions {
        Or(Compare(Normalized Health(Victim), <=, 0.3), Compare(Event Damage, >=, Add(Normalized Health(Victim), Event Damage))) == True;
        Is Firing Secondary(Event Player) == True;
        Event Ability == Button(Primary Fire);
        Value In Array((Event Player).Abilities, 8) == True;
        Event Damage >= 40;
        Event Was Critical Hit == True;
    }
    actions {
        Kill(Victim, Event Player);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Team 2), Victim, 3);
        Damage(Players Within Radius(Victim, 3, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Multiply(Event Damage, 1.5));
    }
}

rule ("Widowmaker: Epidemic") {
    event {
        Player Dealt Damage;
        Team 1;
        Widowmaker;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Color(Violet), Victim, 8);
        Play Effect(All Players(All Teams), Good Explosion, Color(Purple), Victim, 4);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Violet), Victim, 16);
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), Victim, 3);
        Start Damage Over Time(Players Within Radius(Victim, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 3, 50);
        Start Heal Over Time(Event Player, Event Player, 3, 50);
        Wait(0.5, Ignore Condition);
    }
}

rule ("McCree: Panic") {
    event {
        Player Dealt Damage;
        Team 1;
        Cassidy;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Set Player Variable(Victim, Feared_until, Add(Total Time Elapsed, 3.5));
    }
}

rule ("McCree: Panic - Damage") {
    event {
        Ongoing - Each Player;
        Team 1;
        Cassidy;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Start Damage Modification(If-Then-Else(Compare((Event Player).Feared_until, >=, Total Time Elapsed), All Players(Opposite Team Of(Team Of(Event Player))), Empty Array), All Players(Team Of(Event Player)), 220, Receivers Damagers and Damage Percent);
        Set Player Variable At Index(Event Player, Modification_Damage, 1, Last Damage Modification ID);
        Wait Until(Not(Value In Array((Event Player).Abilities, 8)), 99999);
        Stop Damage Modification(Value In Array((Event Player).Modification_Damage, 1));
    }
}

rule ("McCree: Clocked") {
    event {
        Player Dealt Damage;
        Team 1;
        Cassidy;
    }
    conditions {
        Event Ability == Button(Ultimate);
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Victim, 1);
        Damage(Victim, Event Player, Multiply(Event Damage, 1.5));
        Set Status(Victim, Null, Knocked Down, 3);
    }
}

rule ("Reinhardt: Fire Blast") {
    event {
        Player Dealt Damage;
        Team 1;
        Reinhardt;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Victim, 5);
        Start Damage Over Time(Players Within Radius(Victim, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 5, 20);
        Set Status(Players Within Radius(Victim, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Burning, 5);
    }
}

rule ("Reinhardt: Epicenter") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reinhardt;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Is On Ground(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Status(Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Not(Has Status(Current Array Element, Knocked Down))), Event Player, Knocked Down, 2.5);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 10);
        Damage(Filtered Array(Players Within Radius(Event Player, 20, Opposite Team Of(Team Of(Event Player)), Surfaces), Not(Has Status(Current Array Element, Knocked Down))), Event Player, 50);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 20);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 30);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 40);
        Wait(5, Ignore Condition);
    }
}

rule ("[Soldier: 76] Rocket Assault Rifle") {
    event {
        Ongoing - Each Player;
        Team 1;
        Soldier: 76;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Set Player Variable(Event Player, Ability_Projectile2, Ray Cast Hit Position(Eye Position(Event Player), Add(Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 60)), Null, Null, False), World Vector Of(Vector(-2, 0, 0), Event Player, Rotation)), Null, Null, False));
        Set Player Variable(Event Player, Ability_Projectile1, Ray Cast Hit Position(Eye Position(Event Player), Add(Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 60)), Null, Null, False), World Vector Of(Vector(2, 0, 0), Event Player, Rotation)), Null, Null, False));
        Set Player Variable(Event Player, Ability_Position, Add(Add(Eye Position(Event Player), Facing Direction Of(Event Player)), World Vector Of(Vector(0, -0.25, 0), Event Player, Rotation)));
        Set Player Variable(Event Player, Ability_End, Add(Add(Eye Position(Event Player), Facing Direction Of(Event Player)), World Vector Of(Vector(0, -0.25, 0), Event Player, Rotation)));
        Chase Player Variable At Rate(Event Player, Ability_Position, (Event Player).Ability_Projectile1, 60, Destination and Rate);
        Chase Player Variable At Rate(Event Player, Ability_End, (Event Player).Ability_Projectile2, 60, Destination and Rate);
        Wait Until(And(Compare((Event Player).Ability_Position, ==, 0), Compare((Event Player).Ability_End, ==, 0)), 2.5);
    }
}

rule ("[Soldier: 76] First Rocket Effect") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        (Event Player).Ability_Projectile1 != (Event Player).Ability_Position;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Random Value In Array(Array(Color(Sky Blue), Color(Aqua))), (Event Player).Ability_Position, 0.4);
        Wait(0.05, Ignore Condition);
        Loop If Condition Is True;
        Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), (Event Player).Ability_Position, 100);
        Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), (Event Player).Ability_Position, 2.5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Team 1), (Event Player).Ability_Position, 2.5);
        Stop Chasing Player Variable(Event Player, Ability_Position);
        Wait(0.016, Ignore Condition);
        Damage(Players Within Radius((Event Player).Ability_Position, 4, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 80);
        Stop Chasing Player Variable(Event Player, Ability_Position);
        Set Player Variable(Event Player, Ability_Position, 0);
        Set Player Variable(Event Player, Ability_Projectile1, 0);
        Wait(0.016, Ignore Condition);
    }
}

rule ("[Soldier: 76] Second Rocket Effect") {
    event {
        Ongoing - Each Player;
        All;
        Soldier: 76;
    }
    conditions {
        (Event Player).Ability_Projectile2 != (Event Player).Ability_End;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Random Value In Array(Array(Color(Sky Blue), Color(Aqua))), (Event Player).Ability_End, 0.4);
        Wait(0.05, Ignore Condition);
        Loop If Condition Is True;
        Play Effect(All Players(All Teams), Explosion Sound, Color(Orange), (Event Player).Ability_End, 100);
        Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), (Event Player).Ability_End, 2.5);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Team 1), (Event Player).Ability_End, 2.5);
        Stop Chasing Player Variable(Event Player, Ability_End);
        Damage(Players Within Radius((Event Player).Ability_End, 4, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 80);
        Set Player Variable(Event Player, Ability_End, 0);
        Set Player Variable(Event Player, Ability_Projectile2, 0);
    }
}

rule ("Soldier: 76 - Init rockets") {
    event {
        Ongoing - Each Player;
        Team 1;
        Soldier: 76;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Set Player Variable(Event Player, Ability_Projectile1, (Event Player).Ability_Position);
        Set Player Variable(Event Player, Ability_Projectile2, (Event Player).Ability_End);
    }
}

rule ("[Soldier: 76] Shoulder Check") {
    event {
        Ongoing - Each Player;
        Team 1;
        Soldier: 76;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
        Distance Between(Event Player, Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player)))) <= 3;
        Is Alive(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player)))) == True;
    }
    actions {
        Damage(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), Event Player, 55);
        Set Status(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), Null, Knocked Down, 1.5);
        Apply Impulse(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), Facing Direction Of(Event Player), 15, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Vector(0, 8, 15), 15, To Player, Cancel Contrary Motion);
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), 1);
        Set Ability Cooldown(Event Player, Button(Melee), 0);
        Press Button(Event Player, Button(Melee));
        Wait(1, Ignore Condition);
    }
}

rule ("Torbjorn: Melting Point") {
    event {
        Ongoing - Each Player;
        Team 1;
        Torbjörn;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Or(Is Using Ability 2(Event Player), Is Using Ultimate(Event Player)) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Event Player, 8);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Event Player, 8);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 16);
        Start Damage Over Time(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 3, 25);
        Set Status(Players Within Radius(Event Player, 10, Opposite Team Of(Team Of(Event Player)), Off), Null, Burning, 3);
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 100);
        Wait(0.75, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Torbjorn: Roots of Mag﻿ma") {
    event {
        Player Dealt Damage;
        Team 1;
        Torbjörn;
    }
    conditions {
        Event Ability == Button(Ultimate);
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Victim, 1);
        Set Status(Victim, Null, Rooted, 1);
        Wait(1, Ignore Condition);
    }
}

rule ("Tracer: Vortex") {
    event {
        Ongoing - Each Player;
        Team 1;
        Tracer;
    }
    conditions {
        Is Using Ability 2(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Heal(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, 0);
        Damage(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 10);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Position Of(Event Player), 24);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Position Of(Event Player), 18);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Position Of(Event Player), 12);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Position Of(Event Player), 6);
        Set Environment Credit Player(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player);
    }
}

rule ("Tracer: Vortex 2") {
    event {
        Player Received Healing;
        Team 2;
        All;
    }
    conditions {
        Value In Array((Healer).Abilities, 8) == True;
        Hero Of(Healer) == Hero(Tracer);
        Is Using Ability 2(Healer) == True;
        Event Ability == Null;
        Event Damage <= 20;
    }
    actions {
        Apply Impulse(Event Player, Up, 5, To World, Cancel Contrary Motion);
        Wait(0.1, Ignore Condition);
        Apply Impulse(Event Player, Direction Towards(Event Player, Healer), Multiply(Distance Between(Event Player, Healer), 3.5), To World, Cancel Contrary Motion);
        Set Status(Event Player, Null, Rooted, 1.3);
    }
}

rule ("Tracer: Chain Reaction") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is True For Any(Filtered Array(All Players(Team Of(Event Player)), (Current Array Element).Chain_Reaction_On), Compare(Distance Between(Event Player, Current Array Element), <=, 8)) == True;
        (Event Player).Chain_Reaction_Immune == False;
        (Event Player).Chain_Reaction_On == False;
        Is Alive(Event Player) == True;
    }
    actions {
        Wait(0.25, Ignore Condition);
        Set Player Variable(Event Player, Chain_Reaction_On, True);
        Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), Event Player, 3);
    }
}

rule ("Tracer: Chain Reaction 2") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        (Event Player).Chain_Reaction_On == True;
    }
    actions {
        Wait(0.1, Ignore Condition);
        Play Effect(All Players(All Teams), Good Explosion, Color(Aqua), Event Player, 3);
        Damage(Event Player, Players On Hero(Hero(Tracer), Opposite Team Of(Team Of(Event Player))), 200);
        Wait(0.5, Ignore Condition);
        Set Player Variable(Event Player, Chain_Reaction_Immune, True);
        Set Player Variable(Event Player, Chain_Reaction_On, False);
        Wait(2, Ignore Condition);
        Set Player Variable(Event Player, Chain_Reaction_Immune, False);
    }
}

rule ("Tracer: Chain Reaction 3") {
    event {
        Player Dealt Damage;
        Team 1;
        Tracer;
    }
    conditions {
        Event Ability == Button(Ultimate);
        Event Damage > 20;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Player Variable(Victim, Chain_Reaction_On, True);
    }
}

rule ("[Winston] Electric Field") {
    event {
        Ongoing - Each Player;
        Team 1;
        Winston;
    }
    conditions {
        Is Using Ability 2(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Damage(Players Within Radius((Event Player).Ability_Projectile1, 6, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 65);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Set Player Variable(Event Player, Ability_Active, True);
        Create Effect(All Players(All Teams), Orb, Color(White), (Event Player).Ability_Projectile1, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Stop Chasing Player Variable(Event Player, Ability_Resource);
        Set Player Variable(Event Player, Ability_Projectile1, Eye Position(Event Player));
        Set Player Variable(Event Player, Ability_End, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Down, 1000)), Null, All Players(All Teams), False));
        Wait(0.1, Ignore Condition);
        Set Player Variable(Event Player, Ability_Resource, 5);
        Wait(0.25, Ignore Condition);
        Chase Player Variable At Rate(Event Player, Ability_Resource, 20, 7, Destination and Rate);
        Chase Player Variable At Rate(Event Player, Ability_Projectile1, (Event Player).Ability_End, (Event Player).Ability_Resource, Destination and Rate);
        Wait(8.65, Restart When True);
        Set Player Variable(Event Player, Ability_Active, False);
    }
}

rule ("[Winston] Electric Field 2") {
    event {
        Ongoing - Each Player;
        Team 1;
        Winston;
    }
    conditions {
        (Event Player).Ability_Active == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), (Event Player).Ability_Projectile1, 5);
        Damage(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 33);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), (Event Player).Ability_Projectile1, 10);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
        Damage(Players Within Radius((Event Player).Ability_Projectile1, 6, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 80);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Turquoise), (Event Player).Ability_Projectile1, 12);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), (Event Player).Ability_Projectile1, 125);
    }
}

rule ("Winston: Next Generation") {
    event {
        Player Earned Elimination;
        Team 1;
        Winston;
    }
    conditions {
        Ultimate Charge Percent(Event Player) <= 80;
        Is Using Ultimate(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 15));
    }
}

rule ("Pharah: Head Trauma") {
    event {
        Player Dealt Knockback;
        Team 1;
        Pharah;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 8) == True;
        Victim != Event Player;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Max Health(Victim), 0.3));
        Set Status(Victim, Event Player, Knocked Down, 1);
        Play Effect(All Players(All Teams), Good Explosion, Color(Team 1), Victim, 1);
    }
}

rule ("Pharah: Thunderbird") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Hero Of(Event Player) == Hero(Pharah);
    }
    actions {
        Modify Player Variable(Event Player, DamageDealt, Multiply, 4);
        Start Damage Modification(All Players(All Teams), Event Player, 25, Receivers Damagers and Damage Percent);
        Set Player Variable At Index(Event Player, Modification_Damage, 1, Last Damage Modification ID);
        Add Health Pool To Player(Event Player, Shields, 150, True, True);
        Set Player Variable At Index(Event Player, HP_Pool, 1, Last Created Health Pool);
        Wait Until(Or(Not(Value In Array((Event Player).Abilities, 12)), Compare(Hero Of(Event Player), !=, Hero(Pharah))), 99999);
        Set Player Variable(Event Player, DamageDealt, Add(Add(100, Global.DamageDone), Multiply(Value In Array((Event Player).Abilities, 13), 5)));
        Stop Damage Modification(Value In Array((Event Player).Modification_Damage, 1));
        Remove Health Pool From Player(Value In Array((Event Player).HP_Pool, 1));
    }
}

rule ("Orisa: Unstoppable Force") {
    event {
        Ongoing - Each Player;
        Team 1;
        Orisa;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Player Variable(Event Player, Gen_Direction, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, Ability_Active, True);
        Create Effect(All Players(All Teams), Sphere, Color(Green), (Event Player).Ability_Projectile1, 4, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Set Player Variable(Event Player, Ability_Projectile1, Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 0.5)));
        Set Player Variable(Event Player, Ability_End, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 100)), Null, All Players(All Teams), False));
        Chase Player Variable At Rate(Event Player, Ability_Projectile1, (Event Player).Ability_End, 25, Destination and Rate);
        Wait(0.25, Ignore Condition);
        Wait Until(Or(And(Not((Event Player).Gen_Available), Is Button Held(Event Player, Button(Secondary Fire))), Compare((Event Player).Ability_Projectile1, ==, (Event Player).Ability_End)), 99999);
        Stop Chasing Player Variable(Event Player, Ability_Projectile1);
        Wait(0.5, Ignore Condition);
        Damage(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 100);
        Play Effect(All Players(All Teams), Good Explosion, Color(Lime Green), (Event Player).Ability_Projectile1, 5);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Set Player Variable(Event Player, Ability_Active, False);
    }
}

rule ("Orisa: Availability for Halt!") {
    event {
        Ongoing - Each Player;
        Team 1;
        Orisa;
    }
    conditions {
        Is Firing Secondary(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Player Variable(Event Player, Gen_Available, True);
        Wait Until(Not(Is Button Held(Event Player, Button(Secondary Fire))), 99999);
        Set Player Variable(Event Player, Gen_Available, False);
    }
}

rule ("Orisa: Drag effect") {
    event {
        Ongoing - Each Player;
        Team 1;
        Orisa;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        (Event Player).Ability_Active == True;
    }
    actions {
        Apply Impulse(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Direction Towards(If-Then-Else(Is Alive(Event Player), Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Empty Array), (Event Player).Ability_Projectile1), 8, To World, Cancel Contrary Motion);
        Apply Impulse(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Direction Towards((Event Player).Ability_Projectile1, (Event Player).Ability_End), 20, To World, Cancel Contrary Motion);
        Apply Impulse(Players Within Radius((Event Player).Ability_Projectile1, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Up, 5, To Player, Cancel Contrary Motion);
        Wait(0.2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Orisa: Immoveable Object - Reduce dmg") {
    event {
        Ongoing - Each Player;
        Team 1;
        Orisa;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Set Damage Received(Event Player, 0.3);
        Wait Until(Not(Is Using Ability 1(Event Player)), 99999);
        Set Damage Received(Event Player, 100);
    }
}

rule ("Orisa: Immovable Object - Healing") {
    event {
        Player Took Damage;
        Team 1;
        Orisa;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Heal(Event Player, Null, Multiply(Event Damage, 3));
    }
}

rule ("[Reaper] Shadow Streak (Sethh)") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reaper;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Is Using Ability 2(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, Ability_Position, Add(Position Of(Event Player), Vector(0, 1, 0)));
        Wait(2, Abort When False);
        Set Player Variable(Event Player, Ability_End, Add(Position Of(Event Player), Vector(0, 1, 0)));
        Create Beam Effect(All Players(All Teams), Bad Beam, (Event Player).Ability_End, (Event Player).Ability_Position, Color(Black), Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Set Player Variable(Event Player, Ability_Active, True);
        Wait Until(Or(Is Dead(Event Player), Is Using Ability 2(Event Player)), 99999);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Set Player Variable(Event Player, Ability_Active, False);
        Loop If Condition Is True;
    }
}

rule ("[Reaper] Shadow Streak - Damage start to end (Sethh)") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reaper;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Ray Cast Hit Player((Event Player).Ability_Position, (Event Player).Ability_End, All Living Players(Opposite Team Of(Team Of(Event Player))), Event Player, False) != Null;
        Is Using Ability 2(Event Player) == False;
        (Event Player).Ability_Active == True;
    }
    actions {
        Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(White), Ray Cast Hit Player((Event Player).Ability_Position, (Event Player).Ability_End, All Living Players(All Teams), Event Player, True), 1);
        Damage(Players Within Radius(Ray Cast Hit Player((Event Player).Ability_Position, (Event Player).Ability_End, All Living Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)), True), 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 40);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("[Reaper] Shadow Streak - Damage end to start (Sethh)") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reaper;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Ray Cast Hit Player((Event Player).Ability_End, (Event Player).Ability_Position, All Players(Opposite Team Of(Team Of(Event Player))), Event Player, False) != Null;
        Is Using Ability 2(Event Player) == False;
        (Event Player).Ability_Active == True;
    }
    actions {
        Damage(Players Within Radius(Ray Cast Hit Player((Event Player).Ability_End, (Event Player).Ability_Position, All Living Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)), True), 4, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 40);
        Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(White), Ray Cast Hit Player((Event Player).Ability_End, (Event Player).Ability_Position, All Living Players(All Teams), Event Player, True), 1);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Reaper: Loom") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reaper;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Status(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 45), Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS)), Event Player, Hacked, 1.5);
        Set Status(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 45), Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS)), Event Player, Rooted, 1.5);
        Damage(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 45), Is In Line of Sight(Current Array Element, Event Player, Barriers Do Not Block LOS)), Event Player, 45);
    }
}

rule ("Sig﻿ma: Gravity Well") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sigma;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Damage(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 90), Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS)), Event Player, 25);
        Set Status(Filtered Array(Players in View Angle(Event Player, Opposite Team Of(Team Of(Event Player)), 90), Is In Line of Sight(Current Array Element, Event Player, Barriers Do Not Block LOS)), Null, Rooted, 2);
        Set Status(Event Player, Null, Invincible, 1);
        Play Effect(Event Player, Ring Explosion, Color(Blue), Eye Position(Event Player), 50);
        Wait(0.3, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Sig﻿ma: Gravity Channels") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sigma;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Start Damage Modification(If-Then-Else(Is Using Ultimate(Event Player), All Players(All Teams), Empty Array), Event Player, 150, Receivers Damagers and Damage Percent);
        Set Player Variable At Index(Event Player, Modification_Damage, 1, Last Damage Modification ID);
        Wait Until(Not(Value In Array((Event Player).Abilities, 12)), 99999);
        Stop Damage Modification(Value In Array((Event Player).Modification_Damage, 1));
    }
}

rule ("Echo: Focusing Optics") {
    event {
        Player Dealt Damage;
        Team 1;
        Echo;
    }
    conditions {
        Event Ability == Button(Ability 2);
        Value In Array((Event Player).Abilities, 8) == True;
        Normalized Health(Victim) > 0.5;
        Normalized Health(Victim) <= 0.9;
        Is Duplicating(Event Player) == False;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 3));
        Play Effect(All Players(All Teams), Bad Explosion, Color(Violet), Victim, 0.5);
    }
}

rule ("Echo: Streamline") {
    event {
        Ongoing - Each Player;
        Team 1;
        Echo;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Is Firing Secondary(Event Player) == True;
        Is Duplicating(Event Player) == False;
    }
    actions {
        Wait(0.7, Abort When False);
        Cancel Primary Action(Event Player);
    }
}

rule ("Echo: Streamline") {
    event {
        Ongoing - Each Player;
        Team 1;
        Echo;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Is Firing Secondary(Event Player) == True;
        Is Duplicating(Event Player) == False;
    }
    actions {
        Set Projectile Speed(Event Player, 100);
        Wait(0.15, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bastion: Bomblets") {
    event {
        Ongoing - Each Player;
        Team 1;
        Bastion;
    }
    conditions {
        Is Firing Primary(Event Player) == True;
        Is In Alternate Form(Event Player) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Add(Null, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 60)), All Living Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)), True)), 2);
        Damage(Players Within Radius(Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 60)), All Living Players(Opposite Team Of(Team Of(Event Player))), All Players(Team Of(Event Player)), True), 2, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 12);
        Wait(0.1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Bastion: Taser - Loop damage") {
    event {
        Ongoing - Each Player;
        Team 1;
        Bastion;
    }
    conditions {
        Is True For Any(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), And(And(And(Is Alive(Current Array Element), Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS)), Not(Has Status(Current Array Element, Phased Out))), Compare(Distance Between(Event Player, Current Array Element), <=, 25))) == True;
        Is Alive(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Explosion Sound, Color(White), (Event Player).Ability_Player, 80);
        Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Aqua), (Event Player).Ability_Player, 1);
        Set Player Variable(Event Player, Ability_Player, Filtered Array(Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), And(And(And(Is Alive(Current Array Element), Is In Line of Sight(Event Player, Current Array Element, Barriers Do Not Block LOS)), Not(Has Status(Current Array Element, Phased Out))), Compare(Distance Between(Event Player, Current Array Element), <=, 25))));
        Damage(Players Within Radius((Event Player).Ability_Player, 3, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 30);
        Wait(0.45, Ignore Condition);
        Loop If Condition Is True;
        Set Player Variable(Event Player, Ability_Player, Null);
    }
}

rule ("Bastion: Taser - Visual beam") {
    event {
        Ongoing - Each Player;
        Team 1;
        Bastion;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Create Beam Effect(All Players(All Teams), Bad Beam, Add(Event Player, Vector(False, 1, False)), If-Then-Else(Compare((Event Player).Ability_Player, !=, Null), (Event Player).Ability_Player, Event Player), Color(Aqua), Visible To Position Radius and Color);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Wait Until(Not(Value In Array((Event Player).Abilities, 12)), 99999);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
    }
}

rule ("Sombra: Malware") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sombra;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Start Damage Modification(Filtered Array(All Players(Opposite Team Of(Team Of(Event Player))), Or(Has Status(Current Array Element, Hacked), Compare((Current Array Element).Feared_until, >=, Total Time Elapsed))), All Players(Team Of(Event Player)), 200, Receivers Damagers and Damage Percent);
        Set Player Variable At Index(Event Player, Modification_Damage, 1, Last Damage Modification ID);
        Wait Until(Not(Value In Array((Event Player).Abilities, 8)), 99999);
        Stop Damage Modification(Value In Array((Event Player).Modification_Damage, 1));
    }
}

rule ("Sombra: Glitch") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sombra;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Set Player Variable(Event Player, Ability_Active, True);
        Set Player Variable(Event Player, Ability_Position, Position Of(Event Player));
        Create Effect(All Players(All Teams), Sphere, Color(Purple), (Event Player).Ability_Position, 15, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Wait(8, Ignore Condition);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Set Player Variable(Event Player, Ability_Active, False);
    }
}

rule ("Sombra: Glitch - Loop") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sombra;
    }
    conditions {
        (Event Player).Ability_Active == True;
    }
    actions {
        Set Status(Players Within Radius((Event Player).Ability_Position, 15, Opposite Team Of(Team Of(Event Player)), Off), Null, Hacked, 0.75);
        Wait(0.5, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Mei: Cold Snap") {
    event {
        Ongoing - Each Player;
        Team 1;
        Mei;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Bad Aura, Color(Sky Blue), Event Player, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Wait Until(Not(Is Using Ability 1(Event Player)), 99999);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Damage(Players Within Radius(Eye Position(Event Player), 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 5);
        Set Status(Players Within Radius(Eye Position(Event Player), 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Frozen, 2);
        Set Status(Players Within Radius(Eye Position(Event Player), 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Rooted, 2);
        Play Effect(All Players(All Teams), Ring Explosion, Color(White), Position Of(Event Player), 20);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Position Of(Event Player), 20);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Aqua), Add(Position Of(Event Player), Vector(0, 1, 0)), 20);
    }
}

rule ("Mei: Icebound") {
    event {
        Ongoing - Each Player;
        Team 1;
        Mei;
    }
    conditions {
        Is Using Ability 2(Event Player) == True;
        Is Firing Secondary(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Ring, Color(Aqua), Event Player, 0.4, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 2, Last Created Entity);
        Set Projectile Speed(Event Player, 200);
        Wait Until(Not(Is Firing Secondary(Event Player)), 99999);
        Destroy Effect(Value In Array((Event Player).Effects__, 2));
        Set Projectile Speed(Event Player, 100);
    }
}

rule ("Mei: Icebound - Icicles hit") {
    event {
        Player Dealt Damage;
        Team 1;
        Mei;
    }
    conditions {
        Event Ability == Button(Secondary Fire);
        Is Using Ability 2(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 1.25));
        Set Status(Victim, Null, Frozen, 1);
        Set Status(Victim, Null, Rooted, 1);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Victim, 1);
    }
}

rule ("Wrecking Ball: Mirror Ball") {
    event {
        Player Took Damage;
        Team 1;
        Wrecking Ball;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Damage(Players Within Radius(Event Player, 4.5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Event Damage);
        Wait(0.1, Ignore Condition);
    }
}

rule ("Wrecking Ball: Distort") {
    event {
        Ongoing - Each Player;
        Team 1;
        Wrecking Ball;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Is Using Ability 2(Event Player) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Position Of(Event Player), 20);
        Damage(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 80);
        Wait(0.1, Ignore Condition);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Violet), Position Of(Event Player), 18);
        Set Status(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Hacked, Multiply(Count Of(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces)), 1.5));
        Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Violet), Position Of(Event Player), 125);
        Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(Purple), Position Of(Event Player), 16);
        Play Effect(All Players(All Teams), Explosion Sound, Color(Violet), Position Of(Event Player), 80);
    }
}

rule ("Symmetra: High voltage") {
    event {
        Player Dealt Final Blow;
        Team 1;
        Symmetra;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Wait(0.25, Ignore Condition);
        Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 10);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Aqua), Victim, 8);
        Damage(Players Within Radius(Victim, 10, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 150);
    }
}

rule ("Symmetra: Energy Source") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Is True For Any(Players On Hero(Hero(Symmetra), Team Of(Event Player)), And(Is Using Ultimate(Current Array Element), Value In Array((Current Array Element).Abilities, 12))) == True;
    }
    actions {
        Start Heal Over Time(Event Player, Event Player, 1, 40);
        Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Event Player, 0.1);
        Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 2));
        Wait(0.9, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Junkrat: Pyromania") {
    event {
        Player Dealt Knockback;
        Team 1;
        Junkrat;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
        Event Ability != Button(Melee);
        Victim != Event Player;
    }
    actions {
        Start Damage Over Time(Victim, Event Player, 2, 30);
        Set Status(Victim, Null, Burning, 2);
    }
}

rule ("Junkrat: Short Fused") {
    event {
        Player Dealt Damage;
        Team 1;
        Junkrat;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
        Event Ability == Button(Ability 2);
    }
    actions {
        Set Player Variable(Event Player, Ability_Countdown, 4);
        While(Compare((Event Player).Ability_Countdown, >, 0));
            Modify Player Variable(Event Player, Ability_Countdown, Subtract, 1);
            Set Player Variable(Event Player, Ability_Position, Add(Position Of(Victim), Vector(Random Real(-2, 2), Random Real(-2, 2), Random Real(-2, 2))));
            Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), (Event Player).Ability_Position, 4);
            Play Effect(All Players(All Teams), Good Explosion, Color(White), (Event Player).Ability_Position, 4);
            Damage(Players Within Radius((Event Player).Ability_Position, 4, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 35);
            Set Status(Players Within Radius((Event Player).Ability_Position, 4, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, Stunned, 0.8);
            Wait(0.2, Ignore Condition);
        End;
    }
}

rule ("Zenyatta: Vigor") {
    event {
        Player Dealt Healing;
        Team 1;
        Zenyatta;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Set Status(Healee, Null, Invincible, 1);
        Wait(0.8, Ignore Condition);
    }
}

rule ("Zenyatta: Perfect Balance") {
    event {
        Ongoing - Each Player;
        Team 1;
        Zenyatta;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Start Damage Over Time(Players Within Radius(Event Player, 12, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 0.75, 200);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Event Player, 24);
        Wait(0.6, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Roadhog: Stench") {
    event {
        Ongoing - Each Player;
        Team 1;
        Roadhog;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Ring, Color(Violet), Event Player, 8, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Wait Until(Or(Not(Value In Array((Event Player).Abilities, 8)), Compare(Hero Of(Event Player), !=, Hero(Roadhog))), 99999);
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
    }
}

rule ("Roadhog: Stench effect") {
    event {
        Ongoing - Each Player;
        Team 1;
        Roadhog;
    }
    conditions {
        Distance Between(Event Player, Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player)))) <= 8;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Damage(Players Within Radius(Event Player, 8, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 9);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Roadhog: Rusted Anchor") {
    event {
        Ongoing - Each Player;
        Team 1;
        Roadhog;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Start Damage Modification(If-Then-Else(Is Using Ability 1(Event Player), All Players(All Teams), Empty Array), Event Player, 400, Receivers Damagers and Damage Percent);
        Set Player Variable At Index(Event Player, Modification_Damage, 1, Last Damage Modification ID);
        Wait Until(Or(Not(Value In Array((Event Player).Abilities, 8)), Compare(Hero Of(Event Player), !=, Hero(Roadhog))), 99999);
        Stop Damage Modification(Value In Array((Event Player).Modification_Damage, 1));
    }
}

rule ("Roadhog: Rusted Anchor - Reset cooldo﻿wn") {
    event {
        Player Earned Elimination;
        Team 1;
        Roadhog;
    }
    conditions {
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Wait Until(Not(Is Using Ability 1(Event Player)), 3);
        Set Ability Cooldown(Event Player, Button(Ability 1), False);
    }
}

rule ("Zarya: Aug﻿ment") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Start Scaling Barriers(Event Player, 2, True);
        Set Player Variable(Event Player, PlayerHealth, Add(Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)), 50));
        Set Max Health(Event Player, (Event Player).PlayerHealth);
        Wait Until(Or(Not(Value In Array((Event Player).Abilities, 8)), Compare(Hero Of(Event Player), !=, Hero(Zarya))), 99999);
        Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
        Set Max Health(Event Player, (Event Player).PlayerHealth);
        Stop Scaling Barriers(Event Player);
    }
}

rule ("Zarya: Perpetual Energy") {
    event {
        Player Dealt Knockback;
        Team 1;
        Zarya;
    }
    conditions {
        Event Ability == Button(Secondary Fire);
        Value In Array((Event Player).Abilities, 12) == True;
        Victim != Event Player;
    }
    actions {
        Start Damage Over Time(Victim, Event Player, 9999, 15);
        Set Status(Victim, Null, Burning, 9999);
    }
}

rule ("Doomfist: Phase Shifter") {
    event {
        Ongoing - Each Player;
        Team 1;
        Doomfist;
    }
    conditions {
        Or(Or(Is Firing Secondary(Event Player), Is Using Ability 1(Event Player)), Is Using Ability 2(Event Player)) == True;
        Value In Array((Event Player).Abilities, 8) == True;
    }
    actions {
        Set Status(Event Player, Null, Phased Out, 1);
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Doomfist: Fissure") {
    event {
        Ongoing - Each Player;
        Team 1;
        Doomfist;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Wait Until(Not(Is Using Ultimate(Event Player)), 99999);
        Set Player Variable(Event Player, Ability_Position, Position Of(Event Player));
        Set Player Variable(Event Player, Ability_Active, True);
        Wait Until(Is Dead(Event Player), 8);
        Set Player Variable(Event Player, Ability_Active, False);
    }
}

rule ("Doomfist: Fissure") {
    event {
        Ongoing - Each Player;
        Team 1;
        Doomfist;
    }
    conditions {
        (Event Player).Ability_Active == True;
        Value In Array((Event Player).Abilities, 12) == True;
    }
    actions {
        Create Effect(All Players(All Teams), Ring, Color(Orange), (Event Player).Ability_Position, 8, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 1, Last Created Entity);
        Create Effect(All Players(All Teams), Cloud, Color(Orange), (Event Player).Ability_Position, 8, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Effects__, 2, Last Created Entity);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), (Event Player).Ability_Position, 16);
        While(Compare((Event Player).Ability_Active, ==, True));
            Damage(Players Within Radius((Event Player).Ability_Position, 8, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 34);
            Wait(0.235, Ignore Condition);
        End;
        Destroy Effect(Value In Array((Event Player).Effects__, 1));
        Destroy Effect(Value In Array((Event Player).Effects__, 2));
    }
}

rule ("Team 1 (Perk): Sharpshooter") {
    event {
        Player Dealt Damage;
        Team 1;
        All;
    }
    conditions {
        First Of(Global.Perk) == True;
        Event Ability != Null;
        Distance Between(Event Player, Victim) >= 10;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Divide(50, (Event Player).DamageDealt), Event Damage));
    }
}

rule ("Team 1 (Perk): Bulletstorm") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array(Global.Perk, 1) == True;
        Or(Compare(Ammo(Event Player, 0), <, Max Ammo(Event Player, 0)), Compare(Ammo(Event Player, 1), <, Max Ammo(Event Player, 1))) == True;
    }
    actions {
        Set Ammo(Event Player, 0, 1000);
        Set Ammo(Event Player, 1, 1000);
    }
}

rule ("Team 1 Challenges") {
    event {
        Player Joined Match;
        Team 1;
        All;
    }
    actions {
        If(Compare(Value In Array(Global.Perk, 2), ==, 1));
            Create HUD Text(Event Player, Null, Null, Custom String("Up You Go", Null, Null, Null), Left, 917, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
            Set Player Variable At Index(Event Player, AbilityHUD, 17, Last Text ID);
        End;
        If(Compare(First Of(Global.Perk), ==, 1));
            Create HUD Text(Event Player, Null, Null, Custom String("Sharpshooter", Null, Null, Null), Left, 918, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
            Set Player Variable At Index(Event Player, AbilityHUD, 18, Last Text ID);
        End;
        If(Compare(Value In Array(Global.Perk, 1), ==, 1));
            Create HUD Text(Event Player, Null, Null, Custom String("Bulletstorm", Null, Null, Null), Left, 919, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
            Set Player Variable At Index(Event Player, AbilityHUD, 19, Last Text ID);
        End;
        If(Compare(Global.MaxHealthDone, ==, 50));
            Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
            Set Max Health(Event Player, (Event Player).PlayerHealth);
    }
}

rule ("Remove Auto Repair when Player leaves") {
    event {
        Player Left Match;
        Team 1;
        All;
    }
    actions {
        Modify Global Variable(AutoRepair, Subtract, Value In Array((Event Player).Abilities, 16));
    }
}

rule ("Refund") {
    event {
        Subroutine;
        Refund;
    }
    actions {
        "Refund Money"
        Modify Player Variable At Index(Event Player, Money, 0, Add, Value In Array((Event Player).Money, 1));
        Set Player Variable At Index(Event Player, Money, 1, 0);
        "Reset Headhunter"
        Set Player Variable At Index(Event Player, Abilities, 1, 0);
        "Reset Ambush"
        Set Player Variable At Index(Event Player, Abilities, 2, 0);
        "Reset QuickFix"
        Set Player Variable At Index(Event Player, Abilities, 3, 0);
        "Reset HeavyWeight"
        Set Player Variable At Index(Event Player, Abilities, 4, 0);
        "Reset Charged"
        Set Player Variable At Index(Event Player, Abilities, 5, 0);
        "Reset Haste"
        Set Player Variable At Index(Event Player, Abilities, 6, 0);
        "Reset HeavyImpact"
        Set Player Variable At Index(Event Player, Abilities, 7, 0);
        "Reset HeroTalent1"
        Set Player Variable At Index(Event Player, Abilities, 8, 0);
        "Reset SecondWind"
        Set Player Variable At Index(Event Player, Abilities, 9, 0);
        "Reset BindingHeal"
        Set Player Variable At Index(Event Player, Abilities, 10, 0);
        "Reset Resilience"
        Set Player Variable At Index(Event Player, Abilities, 11, 0);
        "Reset HeroTalent2"
        Set Player Variable At Index(Event Player, Abilities, 12, 0);
        "Reset Damage"
        Set Player Variable At Index(Event Player, Abilities, 13, 0);
        Set Player Variable(Event Player, DamageDealt, Add(Add(100, Global.DamageDone), Multiply(Value In Array((Event Player).Abilities, 13), 5)));
        Set Damage Dealt(Event Player, (Event Player).DamageDealt);
        "Reset Health"
        Set Player Variable At Index(Event Player, Abilities, 14, 0);
        Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
        Set Max Health(Event Player, (Event Player).PlayerHealth);
        If(Compare(Global.MaxHealthDone, ==, 0));
        End;
        "Reset Healing"
        Set Player Variable At Index(Event Player, Abilities, 15, 0);
        Set Healing Dealt(Event Player, Add(100, Multiply(Value In Array((Event Player).Abilities, 15), 5)));
        "Reset AutoRepair"
        Modify Global Variable(AutoRepair, Subtract, Value In Array((Event Player).Abilities, 16));
        Set Player Variable At Index(Event Player, Abilities, 16, 0);
    }
}

rule ("Lucio Dash HUD Creation") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Hero Of(Event Player) == Hero(Lúcio);
    }
    actions {
        If(Compare((Event Player).Lucio_Dash_Active, ==, False));
            Set Player Variable(Event Player, Lucio_Dash_Active, True);
            Create HUD Text(Event Player, Null, Null, Custom String("{0} Slam on ground - Press: {1}", Ability Icon String(Hero(Wrecking Ball), Button(Crouch)), Input Binding String(Button(Crouch)), Null), Left, 1000, Null, Null, Color(White), Visible To and String, Default Visibility);
            Set Player Variable(Event Player, Lucio_Dash_Icon, Last Text ID);
    }
}

rule ("Lucio Dash Remove HUD") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Hero Of(Event Player) != Hero(Lúcio);
        (Event Player).Lucio_Dash_Active == True;
    }
    actions {
        Destroy HUD Text((Event Player).Lucio_Dash_Icon);
        Set Player Variable(Event Player, Lucio_Dash_Active, False);
    }
}

rule ("Lucio Dash") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Hero Of(Event Player) == Hero(Lúcio);
        (Event Player).Lucio_Dash_Active == True;
        Is On Ground(Event Player) == False;
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        Apply Impulse(Event Player, Down, 20, To World, Cancel Contrary Motion);
    }
}

rule ("Ana Self-Nano") {
    event {
        Ongoing - Each Player;
        Team 1;
        Ana;
    }
    conditions {
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Ultimate Charge Percent(Event Player) == 100;
        Is Dummy Bot(Event Player) == False;
    }
    actions {
        Abort If(And(Compare(Global.SelfNanoWorkshopSetting, ==, False), Compare(Number Of Players(Team 1), >, 1)));
        Wait(0.1, Ignore Condition);
        If(Not(Is Using Ultimate(Event Player)));
            Create Dummy Bot(Hero(Ana), Team Of(Event Player), -1, Add(Position Of(Event Player), Backward), Eye Position(Event Player));
            Set Player Variable(Event Player, AnaEntityID, Last Created Entity);
            Wait(0.1, Ignore Condition);
            Set Ultimate Charge((Event Player).AnaEntityID, 100);
            Start Facing((Event Player).AnaEntityID, Direction Towards(Eye Position((Event Player).AnaEntityID), Add(Position Of(Event Player), Up)), 1000, To World, Direction and Turn Rate);
            Set Invisible((Event Player).AnaEntityID, All);
            Set Status((Event Player).AnaEntityID, Null, Phased Out, 9999);
            Wait(0.15, Ignore Condition);
            Press Button((Event Player).AnaEntityID, Button(Ultimate));
            Set Ultimate Charge(Event Player, 0);
            Wait(0.15, Ignore Condition);
            Teleport((Event Player).AnaEntityID, Position Of(First Of(Spawn Points(Team Of(Event Player)))));
            Wait(10, Ignore Condition);
            Destroy Dummy Bot(Team Of(Event Player), Slot Of((Event Player).AnaEntityID));
    }
}

rule ("Reinhard Charge Cancel") {
    event {
        Ongoing - Each Player;
        Team 1;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
    }
    actions {
        Wait(0.6, Ignore Condition);
        Wait Until(Is Button Held(Event Player, Button(Ability 1)), 5);
        Set Status(Event Player, Null, Rooted, 0.001);
        Wait Until((Event Player).ReinPin, 1);
        If(Compare((Event Player).ReinPin, !=, 0));
            Apply Impulse((Event Player).ReinPin, Facing Direction Of(Event Player), 15, To World, Cancel Contrary Motion);
    }
}

disabled rule("Map Editor Walls")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("Initial Global") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(AllPos, Empty Array);
        Set Global Variable(AllDir, Empty Array);
        Set Global Variable(firstpos, Empty Array);
        Set Global Variable(secondpos, Empty Array);
        Set Global Variable(firstpoint2, Empty Array);
        Set Global Variable(secondpoint2, Empty Array);
        Set Global Variable(second, Empty Array);
        Set Global Variable(z, Empty Array);
        Set Global Variable(Wall_ID, Empty Array);
        Set Global Variable(g_beamType, Empty Array);
    }
}

rule ("Initial Player") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    actions {
        Set Player Variable(Event Player, filterpos, 0);
        Set Player Variable(Event Player, lastsavedpos, 0);
        Set Player Variable(Event Player, closestbodypos, 0);
        Set Player Variable(Event Player, fullbodypos, 0);
        Set Player Variable(Event Player, prevpos_intersection, 0);
        Set Player Variable(Event Player, active_wall, Empty Array);
        Set Player Variable(Event Player, closestwall, Empty Array);
    }
}

rule ("Collision Logic") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, lastsavedpos, Divide(Add(Eye Position(Event Player), Position Of(Event Player)), 2));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, closestwall, Filtered Array(Global.AllPos, Or(Or(Compare(Distance Between(Value In Array(Global.AllPos, Current Array Index), Event Player), <=, Distance Between(Value In Array(Global.AllPos, Current Array Index), Value In Array(Global.firstpos, Current Array Index))), Compare(Value In Array((Event Player).active_wall, Current Array Index), ==, 1)), Compare(Compare(Dot Product(Direction Towards(Current Array Element, (Event Player).lastsavedpos), Value In Array(Global.AllDir, Current Array Index)), >, 0), !=, Compare(Dot Product(Direction Towards(Current Array Element, Event Player), Value In Array(Global.AllDir, Current Array Index)), >, 0)))));
        For Player Variable(Event Player, x_, 0, Count Of((Event Player).closestwall), 1);
            Set Global Variable(z, Index Of Array Value(Global.AllPos, Value In Array((Event Player).closestwall, (Event Player).x_)));
            If(Or(Or(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 1), Compare(Value In Array(Global.Wall_ID, Global.z), ==, 3)), Compare(Value In Array(Global.Wall_ID, Global.z), ==, 5)));
                If(And(Compare(Y Component Of(Value In Array(Global.firstpos, Global.z)), >=, Y Component Of(Position Of(Event Player))), Compare(Y Component Of(Value In Array(Global.firstpos, Global.z)), <=, Y Component Of(Add(Eye Position(Event Player), Vector(Empty Array, 0.2, Empty Array))))));
                    Set Player Variable(Event Player, closestbodypos, Value In Array(Global.firstpos, Global.z));
                Else If(And(Compare(Y Component Of(Value In Array(Global.secondpos, Global.z)), >=, Y Component Of(Position Of(Event Player))), Compare(Y Component Of(Value In Array(Global.secondpos, Global.z)), <=, Y Component Of(Add(Eye Position(Event Player), Vector(Empty Array, 0.2, Empty Array))))));
                    Set Player Variable(Event Player, closestbodypos, Value In Array(Global.secondpos, Global.z));
                Else;
                    Set Player Variable(Event Player, closestbodypos, Position Of(Event Player));
                End;
                Set Player Variable(Event Player, fullbodypos, Vector(X Component Of(Eye Position(Event Player)), Y Component Of((Event Player).closestbodypos), Z Component Of(Eye Position(Event Player))));
                Set Player Variable(Event Player, filterpos, Add((Event Player).fullbodypos, Divide(Multiply(Value In Array(Global.AllDir, Global.z), Dot Product(Subtract(Value In Array(Global.AllPos, Global.z), (Event Player).fullbodypos), Value In Array(Global.AllDir, Global.z))), Dot Product(Value In Array(Global.AllDir, Global.z), Value In Array(Global.AllDir, Global.z)))));
                If(Or(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 1), Compare(Value In Array(Global.Wall_ID, Global.z), ==, 3)));
                    If(Compare(Compare(Dot Product(Direction Towards(Value In Array(Global.AllPos, Global.z), (Event Player).lastsavedpos), Value In Array(Global.AllDir, Global.z)), >, 0), !=, Compare(Dot Product(Direction Towards(Value In Array(Global.AllPos, Global.z), (Event Player).fullbodypos), Value In Array(Global.AllDir, Global.z)), >, 0)));
                        Set Player Variable(Event Player, intersection_length, Divide(Dot Product(Subtract(Value In Array(Global.AllPos, Global.z), (Event Player).fullbodypos), Value In Array(Global.AllDir, Global.z)), Dot Product(Direction Towards((Event Player).lastsavedpos, (Event Player).fullbodypos), Value In Array(Global.AllDir, Global.z))));
                        Set Player Variable(Event Player, prevpos_intersection, Add((Event Player).fullbodypos, Multiply(Multiply(Direction Towards((Event Player).lastsavedpos, (Event Player).fullbodypos), Vector(1, Empty Array, 1)), (Event Player).intersection_length)));
                        If(And(And(And(Compare(Dot Product(Direction Towards(Value In Array(Global.firstpos, Global.z), Vector(X Component Of(Value In Array(Global.secondpos, Global.z)), Y Component Of(Value In Array(Global.firstpos, Global.z)), Z Component Of(Value In Array(Global.secondpos, Global.z)))), Direction Towards(Value In Array(Global.firstpos, Global.z), (Event Player).prevpos_intersection)), >=, 0), Compare(Dot Product(Direction Towards(Value In Array(Global.firstpos, Global.z), Vector(X Component Of(Value In Array(Global.firstpos, Global.z)), Y Component Of(Value In Array(Global.secondpos, Global.z)), Z Component Of(Value In Array(Global.firstpos, Global.z)))), Direction Towards(Value In Array(Global.firstpos, Global.z), (Event Player).prevpos_intersection)), >=, 0)), Compare(Dot Product(Direction Towards(Value In Array(Global.secondpos, Global.z), Vector(X Component Of(Value In Array(Global.secondpos, Global.z)), Y Component Of(Value In Array(Global.firstpos, Global.z)), Z Component Of(Value In Array(Global.secondpos, Global.z)))), Direction Towards(Value In Array(Global.secondpos, Global.z), (Event Player).prevpos_intersection)), >=, 0)), Compare(Dot Product(Direction Towards(Value In Array(Global.secondpos, Global.z), Vector(X Component Of(Value In Array(Global.firstpos, Global.z)), Y Component Of(Value In Array(Global.secondpos, Global.z)), Z Component Of(Value In Array(Global.firstpos, Global.z)))), Direction Towards(Value In Array(Global.secondpos, Global.z), (Event Player).prevpos_intersection)), >=, 0)));
                            Cancel Primary Action(Event Player);
                            Teleport(Event Player, Add((Event Player).prevpos_intersection, Multiply(Multiply(Direction Towards((Event Player).prevpos_intersection, (Event Player).lastsavedpos), Vector(1, Empty Array, 1)), 2)));
                        End;
                    End;
                End;
                Set Player Variable(Event Player, thickness, 0);
                If(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 5));
                    Set Player Variable(Event Player, thickness, 4);
                Else;
                    Set Player Variable(Event Player, thickness, 1);
                End;
                If(And(And(And(And(Compare(Distance Between((Event Player).fullbodypos, (Event Player).filterpos), <=, (Event Player).thickness), Compare(Dot Product(Direction Towards(Value In Array(Global.firstpos, Global.z), Vector(X Component Of(Value In Array(Global.secondpos, Global.z)), Y Component Of(Value In Array(Global.firstpos, Global.z)), Z Component Of(Value In Array(Global.secondpos, Global.z)))), Direction Towards(Value In Array(Global.firstpos, Global.z), (Event Player).filterpos)), >=, 0)), Compare(Dot Product(Direction Towards(Value In Array(Global.firstpos, Global.z), Vector(X Component Of(Value In Array(Global.firstpos, Global.z)), Y Component Of(Value In Array(Global.secondpos, Global.z)), Z Component Of(Value In Array(Global.firstpos, Global.z)))), Direction Towards(Value In Array(Global.firstpos, Global.z), (Event Player).filterpos)), >=, 0)), Compare(Dot Product(Direction Towards(Value In Array(Global.secondpos, Global.z), Vector(X Component Of(Value In Array(Global.secondpos, Global.z)), Y Component Of(Value In Array(Global.firstpos, Global.z)), Z Component Of(Value In Array(Global.secondpos, Global.z)))), Direction Towards(Value In Array(Global.secondpos, Global.z), (Event Player).filterpos)), >=, 0)), Compare(Dot Product(Direction Towards(Value In Array(Global.secondpos, Global.z), Vector(X Component Of(Value In Array(Global.firstpos, Global.z)), Y Component Of(Value In Array(Global.secondpos, Global.z)), Z Component Of(Value In Array(Global.firstpos, Global.z)))), Direction Towards(Value In Array(Global.secondpos, Global.z), (Event Player).filterpos)), >=, 0)));
                    If(Not(Global.is_Grounded));
                        Set Gravity(Event Player, 100);
                    End;
                    If(Compare(Value In Array((Event Player).active_wall, Global.z), ==, False));
                        Set Player Variable At Index(Event Player, active_wall, Global.z, 1);
                        If(And(Or(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 1), Compare(Value In Array(Global.Wall_ID, Global.z), ==, 3)), Compare(Global.is_Grounded, ==, False)));
                            Set Gravity(Event Player, 100);
                        Else If(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 5));
                            Disable Movement Collision With Environment(Event Player, False);
                        End;
                    End;
                    If(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 1));
                        Apply Impulse(Event Player, Multiply(Direction Towards((Event Player).filterpos, (Event Player).fullbodypos), Vector(1, Empty Array, 1)), 0.001, To World, Cancel Contrary Motion);
                        Set Move Speed(Event Player, Subtract(100, Multiply(Dot Product(Direction Towards(Eye Position(Event Player), Add(Eye Position(Event Player), World Vector Of(Throttle Of(Event Player), Event Player, Rotation))), Multiply(Direction Towards((Event Player).filterpos, (Event Player).fullbodypos), -1)), 100)));
                    Else If(Compare(Value In Array(Global.Wall_ID, Global.z), ==, 3));
                        Apply Impulse(Event Player, Direction Towards((Event Player).filterpos, (Event Player).fullbodypos), Speed Of(Event Player), To World, Cancel Contrary Motion);
                    End;
                Else;
                    Set Player Variable At Index(Event Player, active_wall, Global.z, 0);
                    Set Move Speed(Event Player, 100);
                End;
            End;
        End;
        Loop;
    }
}

rule ("Reset") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Count Of(Remove From Array((Event Player).active_wall, 0)) == 0;
    }
    actions {
        Enable Movement Collision With Environment(Event Player);
    }
}

rule ("Wall Data") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(AllPos, Array(Vector(155.968, 12.47, -30.507), Vector(155.962, 12.472, -62.5), Vector(81.153, 6.453, -103.851), Vector(69.148, 6.474, -104.548)));
        Set Global Variable(AllDir, Array(Vector(-1, 0, -0.002), Vector(1, 0, -0.001), Vector(0, 0, 1), Vector(0.001, 0, 1)));
        Set Global Variable(firstpos, Array(Vector(155.971, 11.047, -31.771), Vector(155.964, 11.05, -61.229), Vector(79.761, 5.03, -103.852), Vector(67.738, 5.022, -104.547)));
        Set Global Variable(secondpos, Array(Vector(155.965, 13.894, -29.242), Vector(155.96, 13.894, -63.771), Vector(82.544, 7.876, -103.851), Vector(70.558, 7.925, -104.55)));
        Set Global Variable(firstpoint2, Array(Vector(155.971, 13.894, -31.771), Vector(155.964, 13.894, -61.229), Vector(79.761, 7.876, -103.852), Vector(67.738, 7.925, -104.547)));
        Set Global Variable(secondpoint2, Array(Vector(155.965, 11.047, -29.242), Vector(155.96, 11.05, -63.771), Vector(82.544, 5.03, -103.851), Vector(70.558, 5.022, -104.55)));
        Set Global Variable(z, 3);
        Set Global Variable(g_beamType, Array(1, 1, 1, 1));
        Set Global Variable(showwalls, True);
        Set Global Variable(Wall_ID, Array(5, 5, 5, 5));
    }
}

disabled rule("NEW SHOP")
{
	event
	{
		Ongoing - Global;
	}
}

rule ("Setting Shop Position") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(ShopCamPos, Multiply(900, Up));
        Set Global Variable At Index(ShopPosAngle, 1, Direction From Angles(Horizontal Angle From Direction(Forward), Subtract(Vertical Angle From Direction(Forward), 90)));
        Set Global Variable At Index(ShopPosAngle, 0, Cross Product(Value In Array(Global.ShopPosAngle, 1), Forward));
        Set Global Variable(ShopBasePos, Add(Subtract(Global.ShopCamPos, Multiply(9, Value In Array(Global.ShopPosAngle, 1))), Multiply(142, Forward)));
    }
}

rule ("Create Shop Buttons") {
    event {
        Ongoing - Global;
    }
    actions {
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃", Null, Null, Null), Add(Subtract(Global.ShopBasePos, Multiply(41, Value In Array(Global.ShopPosAngle, 1))), Multiply(90, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To, Color(White), Default Visibility);
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃", Null, Null, Null), Subtract(Subtract(Global.ShopBasePos, Multiply(41, Value In Array(Global.ShopPosAngle, 1))), Multiply(90, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To, Color(White), Default Visibility);
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("Refund", Null, Null, Null), Add(Add(Global.ShopBasePos, Multiply(45, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 3, Do Not Clip, Visible To, Color(Green), Default Visibility);
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("[{0}] Leave", Input Binding String(Button(Reload)), Null, Null), Subtract(Add(Global.ShopBasePos, Multiply(45, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 3, Do Not Clip, Visible To and String, Color(Green), Default Visibility);
        Create In-World Text(If-Then-Else((Local Player).isInMenu, Local Player, Empty Array), Custom String("{0}$\n", First Of((Local Player).Money), Null, Null), Add(Global.ShopBasePos, Multiply(36.5, Value In Array(Global.ShopPosAngle, 1))), 3, Do Not Clip, Visible To and String, Color(White), Default Visibility);
        Create In-World Text(If-Then-Else((Local Player).isInMenu, Local Player, Empty Array), Custom String("▲", Null, Null, Null), Update Every Frame(Add(Subtract(Global.ShopBasePos, Multiply(Add(4, Vertical Facing Angle Of(Local Player)), Value In Array(Global.ShopPosAngle, 1))), Multiply(Horizontal Facing Angle Of(Local Player), First Of(Global.ShopPosAngle)))), 4, Do Not Clip, Visible To Position and Color, Custom Color(Add(245, Multiply(10, Sine From Radians(Multiply(4, Total Time Elapsed)))), Add(205, Multiply(50, Sine From Radians(Multiply(4, Total Time Elapsed)))), Multiply(200, Sine From Radians(Multiply(4, Total Time Elapsed))), 255), Default Visibility);
        "Headhunter"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 1), Custom String("Headhunter II\n  800$", Null, Null, Null), Custom String("Headhunter I\n  800$", Null, Null, Null)), Add(Add(Global.ShopBasePos, Multiply(20, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 1), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Ambush"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 2), Custom String("Ambush II\n    800$", Null, Null, Null), Custom String("Ambush I\n    800$", Null, Null, Null)), Add(Subtract(Global.ShopBasePos, Multiply(2.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 2), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Quick Fix"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 3), Custom String("Quick Fix II\n  700$", Null, Null, Null), Custom String("Quick Fix I\n  700$", Null, Null, Null)), Add(Subtract(Global.ShopBasePos, Multiply(25, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 3), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Heavyweight"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 4), Custom String("Heavyweight II\n  1000$", Null, Null, Null), Custom String("Heavyweight I\n  1000$", Null, Null, Null)), Add(Subtract(Global.ShopBasePos, Multiply(47.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 4), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Charged"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 5), Custom String("Charged II\n  700$", Null, Null, Null), Custom String("Charged I\n  700$", Null, Null, Null)), Add(Add(Global.ShopBasePos, Multiply(20, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 5), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Haste"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 6), Custom String("Haste II\n  700$", Null, Null, Null), Custom String("Haste I\n  700$", Null, Null, Null)), Add(Subtract(Global.ShopBasePos, Multiply(2.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 6), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Heavy Impact"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 7), Custom String("Heavy Impact II\n  1000$", Null, Null, Null), Custom String("Heavy Impact I\n  1000$", Null, Null, Null)), Add(Subtract(Global.ShopBasePos, Multiply(25, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 7), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Hero Talent 1"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("Hero Talent 1\n  1200$", Null, Null, Null), Add(Subtract(Global.ShopBasePos, Multiply(47.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 8), <, 1), Color(Green), Color(Gray)), Default Visibility);
        "Second Wind"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 9), Custom String("Second Wind II\n   900$", Null, Null, Null), Custom String("Second Wind I\n   900$", Null, Null, Null)), Subtract(Add(Global.ShopBasePos, Multiply(20, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 9), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Binding Heal"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 10), Custom String("Binding Heal II\n   700$", Null, Null, Null), Custom String("Binding Heal I\n   700$", Null, Null, Null)), Subtract(Subtract(Global.ShopBasePos, Multiply(2.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 10), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Resilience"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), If-Then-Else(Value In Array((Local Player).Abilities, 11), Custom String("Resilience II\n   800$", Null, Null, Null), Custom String("Resilience I\n   800$", Null, Null, Null)), Subtract(Subtract(Global.ShopBasePos, Multiply(25, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 11), <, 2), Color(Green), Color(Gray)), Default Visibility);
        "Hero Talent 2"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("Hero Talent 2\n  1200$", Null, Null, Null), Subtract(Subtract(Global.ShopBasePos, Multiply(47.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(22.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Value In Array((Local Player).Abilities, 12), <, 1), Color(Green), Color(Gray)), Default Visibility);
        "PlusDamage"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("+5% Damage\n  400$", Null, Null, Null), Subtract(Add(Global.ShopBasePos, Multiply(20, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, Color(Green), Default Visibility);
        "PlusHealth"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("+5% Health\n       400$", Null, Null, Null), Subtract(Subtract(Global.ShopBasePos, Multiply(2.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, Color(Green), Default Visibility);
        "PlusHealing"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("+5% Healing\n  400$", Null, Null, Null), Subtract(Subtract(Global.ShopBasePos, Multiply(25, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To and String, Color(Green), Default Visibility);
        "PlusHealing"
        Create In-World Text(Filtered Array(All Players(Team 1), (Current Array Element).isInMenu), Custom String("+{0} Auto-Repair\n    400$", If-Then-Else(Compare(Global.UpgradeGateMaxHealthValue, >=, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 2)), 10, 5), Null, Null), Subtract(Subtract(Global.ShopBasePos, Multiply(47.5, Value In Array(Global.ShopPosAngle, 1))), Multiply(67.5, First Of(Global.ShopPosAngle))), 2.5, Do Not Clip, Visible To String and Color, If-Then-Else(Compare(Global.AutoRepair, <, 5), Color(Green), Color(Gray)), Default Visibility);
        "Use Update Every Frame to avoid showing the String when the cursor is out of bounds, resulting in 0\r\n	ROW 0"
        Create In-World Text(Update Every Frame(If-Then-Else(And(And((Local Player).isInMenu, Compare(Absolute Value(Horizontal Facing Angle Of(Local Player)), <, 90)), Compare(Absolute Value(Add(Vertical Facing Angle Of(Local Player), 11.25)), <, 47.5)), Local Player, Empty Array)), Update Every Frame(If-Then-Else(Compare(Vertical Facing Angle Of(Local Player), <, -33.75), Value In Array(Array(Custom String("Leave Buy Menu\n", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Refund your money\n", Null, Null, Null)), Round To Integer(Divide(Add(Horizontal Facing Angle Of(Local Player), 90), 45), Down)), Custom String("", Null, Null, Null))), Subtract(Global.ShopBasePos, Multiply(75, Value In Array(Global.ShopPosAngle, 1))), 2.5, Do Not Clip, Visible To and String, Color(White), Default Visibility);
        "ROW 1"
        Create In-World Text(Update Every Frame(If-Then-Else(And(And((Local Player).isInMenu, Compare(Absolute Value(Horizontal Facing Angle Of(Local Player)), <, 90)), Compare(Absolute Value(Add(Vertical Facing Angle Of(Local Player), 11.25)), <, 22.5)), Local Player, Empty Array)), Update Every Frame(If-Then-Else(Compare(Vertical Facing Angle Of(Local Player), <, -11.25), Value In Array(Array(Custom String("Increase your damage by 5%\n", Null, Null, Null), If-Then-Else(Value In Array((Local Player).Abilities, 9), Custom String("Second Wind II: 60% chance to revive yourself after going down\n   This cannot occur more than once every 30 seconds", Null, Null, Null), Custom String("Second Wind I: 30% chance to revive yourself after going down\n     This cannot occur more than once every 30 seconds", Null, Null, Null)), If-Then-Else(Value In Array((Local Player).Abilities, 5), Custom String("Charged II: Ultimates cost 40% less\n", Null, Null, Null), Custom String("Charged I: Ultimates cost 20% less\n", Null, Null, Null)), If-Then-Else(Value In Array((Local Player).Abilities, 1), Custom String("Headhunter II: Critical hits deal 80% more damage\n", Null, Null, Null), Custom String("Headhunter I: Critical hits deal 40% more damage\n", Null, Null, Null))), Round To Integer(Divide(Add(Horizontal Facing Angle Of(Local Player), 90), 45), Down)), Custom String("", Null, Null, Null))), Subtract(Global.ShopBasePos, Multiply(75, Value In Array(Global.ShopPosAngle, 1))), 2.5, Do Not Clip, Visible To and String, Color(White), Default Visibility);
        "ROW 2"
        Create In-World Text(Update Every Frame(If-Then-Else(And(And((Local Player).isInMenu, Compare(Absolute Value(Horizontal Facing Angle Of(Local Player)), <, 90)), Compare(Absolute Value(Subtract(Vertical Facing Angle Of(Local Player), 36.25)), <, 47.5)), Local Player, Empty Array)), Update Every Frame(If-Then-Else(Compare(Vertical Facing Angle Of(Local Player), <, 11.25), Value In Array(Array(Custom String("Increase your health by 5%\n", Null, Null, Null), If-Then-Else(Value In Array((Local Player).Abilities, 10), Custom String("Binding Heal II: Heal yourself for 50% the amount when healing allies\n", Null, Null, Null), Custom String("Binding Heal I: Heal yourself for 25% the amount when healing allies\n", Null, Null, Null)), If-Then-Else(Value In Array((Local Player).Abilities, 6), Custom String("  Haste II: Ability cooldown is reduced by 50%\nDoes not affect abilities with multiple charges", Null, Null, Null), Custom String("  Haste I: Ability cooldown is reduced by 25%\nDoes not affect abilities with multiple charges", Null, Null, Null)), If-Then-Else(Value In Array((Local Player).Abilities, 2), Custom String("Ambush II: Deal 60% more damage when attacking enemies from behind or above\n", Null, Null, Null), Custom String("Ambush I: Deal 30% more damage when attacking enemies from behind or above\n", Null, Null, Null))), Round To Integer(Divide(Add(Horizontal Facing Angle Of(Local Player), 90), 45), Down)), Custom String("", Null, Null, Null))), Subtract(Global.ShopBasePos, Multiply(75, Value In Array(Global.ShopPosAngle, 1))), 2.5, Do Not Clip, Visible To and String, Color(White), Default Visibility);
        "ROW 3"
        Create In-World Text(Update Every Frame(If-Then-Else(And(And((Local Player).isInMenu, Compare(Absolute Value(Horizontal Facing Angle Of(Local Player)), <, 90)), Compare(Absolute Value(Subtract(Vertical Facing Angle Of(Local Player), 83.75)), <, 72.5)), Local Player, Empty Array)), Update Every Frame(If-Then-Else(Compare(Vertical Facing Angle Of(Local Player), <, 33.75), Value In Array(Array(Custom String("Increase your healing by 5%\n", Null, Null, Null), If-Then-Else(Value In Array((Local Player).Abilities, 11), Custom String("Resilience II: Take 30% less damage while below 60% health\n", Null, Null, Null), Custom String("Resilience I: Take 30% less damage while below 30% health\n", Null, Null, Null)), If-Then-Else(Value In Array((Local Player).Abilities, 7), Custom String("Heavy Impact II: Every hit has a chance to stun the enemy for 2 seconds\n", Null, Null, Null), Custom String("Heavy Impact I: Every hit has a chance to stun the enemy for 1 second\n", Null, Null, Null)), If-Then-Else(Value In Array((Local Player).Abilities, 3), Custom String("Quick Fix II: Eliminations restore 100 HP and shortly increase speed by 40%\n", Null, Null, Null), Custom String("Quick Fix I: Eliminations restore 50 HP and shortly increase speed by 20%\n", Null, Null, Null))), Round To Integer(Divide(Add(Horizontal Facing Angle Of(Local Player), 90), 45), Down)), Custom String("", Null, Null, Null))), Subtract(Global.ShopBasePos, Multiply(75, Value In Array(Global.ShopPosAngle, 1))), 2.5, Do Not Clip, Visible To and String, Color(White), Default Visibility);
        "ROW 4"
        Create In-World Text(Update Every Frame(If-Then-Else(And(And((Local Player).isInMenu, Compare(Absolute Value(Horizontal Facing Angle Of(Local Player)), <, 90)), Compare(Absolute Value(Subtract(Vertical Facing Angle Of(Local Player), 133)), <, 99.25)), Local Player, Empty Array)), Update Every Frame(If-Then-Else(Compare(Vertical Facing Angle Of(Local Player), <, 56.25), Value In Array(Array(Custom String("Increase your auto-repair by {0}/5s\n", If-Then-Else(Compare(Global.UpgradeGateMaxHealthValue, >=, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 2)), 10, 5), Null, Null), Custom String("{0}", Value In Array(Value In Array((Local Player).HeroTalentText, 2), 1), Null, Null), Custom String("{0}", Value In Array(Value In Array((Local Player).HeroTalentText, 1), 1), Null, Null), If-Then-Else(Value In Array((Local Player).Abilities, 4), Custom String("Heavyweight II: Your knock back attacks deal 50% more damage and knock back\n            You receive 33% less knock back", Null, Null, Null), Custom String("Heavyweight I: Your knock back attacks deal 25% more damage and knock back\n            You receive 20% less knock back", Null, Null, Null))), Round To Integer(Divide(Add(Horizontal Facing Angle Of(Local Player), 90), 45), Down)), Custom String("", Null, Null, Null))), Subtract(Global.ShopBasePos, Multiply(75, Value In Array(Global.ShopPosAngle, 1))), 2.5, Do Not Clip, Visible To and String, Color(White), Default Visibility);
    }
}

rule ("Toggle Shop") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == False;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Communicating Any Emote(Event Player) == False;
    }
    actions {
        If(Compare((Event Player).isInMenu, ==, False));
            Wait Until(Not(Is Button Held(Event Player, Button(Reload))), 0.5);
            Abort If(Not(Is Button Held(Event Player, Button(Reload))));
        End;
        Set Player Variable(Event Player, isInMenu, Not((Event Player).isInMenu));
    }
}

rule ("Open Shop") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        "Open Shop"
        (Event Player).isInMenu == True;
    }
    actions {
        Set Player Variable(Event Player, PlayerFacing, Facing Direction Of(Event Player));
        Start Camera(Event Player, Global.ShopCamPos, Add(Global.ShopCamPos, Forward), 0);
        Disable Hero HUD(Event Player);
        Call Subroutine(DisablePlayer);
        Set Aim Speed(Event Player, 200);
    }
}

rule ("Close Shop") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        "Open Shop"
        (Event Player).isInMenu == False;
    }
    actions {
        Stop Camera(Event Player);
        Enable Hero HUD(Event Player);
        Call Subroutine(EnablePlayer);
        Set Aim Speed(Event Player, 100);
        Set Facing(Event Player, (Event Player).PlayerFacing, To World);
    }
}

rule ("Subroutine: Disable Player") {
    event {
        Subroutine;
        DisablePlayer;
    }
    actions {
        Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
        Set Primary Fire Enabled(Event Player, False);
        Set Secondary Fire Enabled(Event Player, False);
        Set Ability 1 Enabled(Event Player, False);
        Set Ability 2 Enabled(Event Player, False);
        Set Melee Enabled(Event Player, False);
        Set Jump Enabled(Event Player, False);
        Set Crouch Enabled(Event Player, False);
        Disallow Button(Event Player, Button(Ultimate));
    }
}

rule ("Subroutine: Enable Player") {
    event {
        Subroutine;
        EnablePlayer;
    }
    actions {
        Stop Forcing Throttle(Event Player);
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
        Set Melee Enabled(Event Player, True);
        Set Jump Enabled(Event Player, True);
        Set Crouch Enabled(Event Player, True);
        Allow Button(Event Player, Button(Ultimate));
    }
}

rule ("Buy Ability") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        (Event Player).isInMenu == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Absolute Value(Horizontal Facing Angle Of(Event Player)) < 90;
        Add(Absolute Value(Vertical Facing Angle Of(Event Player)), 11.25) < 67;
    }
    actions {
        "ROW 0"
        If(Compare(Vertical Facing Angle Of(Event Player), <, -33.75));
            "LEAVE SHOP"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                Set Player Variable(Event Player, isInMenu, Not((Event Player).isInMenu));
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Money, 1), !=, 0));
                    Call Subroutine(Refund);
                Else;
                    Small Message(Local Player, Custom String("You don't have anything to refund!", Null, Null, Null));
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, -11.25));
            "+5% DAMAGE"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(First Of((Event Player).Money), >=, 400));
                    Modify Player Variable At Index(Event Player, Money, 0, Subtract, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Add, 400);
                    Modify Player Variable At Index(Event Player, Abilities, 13, Add, 1);
                    Set Player Variable(Event Player, DamageDealt, Add(Add(100, Global.DamageDone), Multiply(Value In Array((Event Player).Abilities, 13), 5)));
                    Set Damage Dealt(Event Player, (Event Player).DamageDealt);
                Else;
                    Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 9), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 900));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 900);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 900);
                        Modify Player Variable At Index(Event Player, Abilities, 9, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 5), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 700));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 700);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 700);
                        Modify Player Variable At Index(Event Player, Abilities, 5, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 1), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 800));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 800);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 800);
                        Modify Player Variable At Index(Event Player, Abilities, 1, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, 11.25));
            "+5% HEALTH"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(First Of((Event Player).Money), >=, 400));
                    Modify Player Variable At Index(Event Player, Money, 0, Subtract, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Add, 400);
                    Modify Player Variable At Index(Event Player, Abilities, 14, Add, 1);
                    Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
                    Set Max Health(Event Player, (Event Player).PlayerHealth);
                Else;
                    Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 10), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 700));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 700);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 700);
                        Modify Player Variable At Index(Event Player, Abilities, 10, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 6), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 700));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 700);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 700);
                        Modify Player Variable At Index(Event Player, Abilities, 6, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 2), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 800));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 800);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 800);
                        Modify Player Variable At Index(Event Player, Abilities, 2, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, 33.75));
            "+5% HEALING"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(First Of((Event Player).Money), >=, 400));
                    Modify Player Variable At Index(Event Player, Money, 0, Subtract, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Add, 400);
                    Modify Player Variable At Index(Event Player, Abilities, 15, Add, 1);
                    Set Healing Dealt(Event Player, Add(100, Multiply(Value In Array((Event Player).Abilities, 15), 5)));
                Else;
                    Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 11), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 800));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 800);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 800);
                        Modify Player Variable At Index(Event Player, Abilities, 11, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 7), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 1000));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 1000);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 1000);
                        Modify Player Variable At Index(Event Player, Abilities, 7, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 3), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 700));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 700);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 700);
                        Modify Player Variable At Index(Event Player, Abilities, 3, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, 56.25));
            "+5 AUTO-REPAIR"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(Global.AutoRepair, !=, 5));
                    If(Compare(First Of((Event Player).Money), >=, 400));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 400);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 400);
                        Modify Global Variable(AutoRepair, Add, 1);
                        Modify Player Variable At Index(Event Player, Abilities, 16, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 12), !=, 1));
                    If(Compare(First Of((Event Player).Money), >=, 1200));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 1200);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 1200);
                        Modify Player Variable At Index(Event Player, Abilities, 12, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 8), !=, 1));
                    If(Compare(First Of((Event Player).Money), >=, 1200));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 1200);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 1200);
                        Modify Player Variable At Index(Event Player, Abilities, 8, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
                    End;
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 4), !=, 2));
                    If(Compare(First Of((Event Player).Money), >=, 1000));
                        Modify Player Variable At Index(Event Player, Money, 0, Subtract, 1000);
                        Modify Player Variable At Index(Event Player, Money, 1, Add, 1000);
                        Modify Player Variable At Index(Event Player, Abilities, 4, Add, 1);
                    Else;
                        Small Message(Event Player, Custom String("Not enough money!", Null, Null, Null));
    }
}

rule ("Refund Single Ability") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        (Event Player).isInMenu == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Absolute Value(Horizontal Facing Angle Of(Event Player)) < 90;
        Add(Absolute Value(Vertical Facing Angle Of(Event Player)), 11.25) < 67;
    }
    actions {
        "ROW 0"
        If(Compare(Vertical Facing Angle Of(Event Player), <, -33.75));
            "LEAVE SHOP"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, -11.25));
            "+5% DAMAGE"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(Value In Array((Event Player).Abilities, 13), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 400);
                    Modify Player Variable At Index(Event Player, Abilities, 13, Subtract, 1);
                    Set Player Variable(Event Player, DamageDealt, Add(Add(100, Global.DamageDone), Multiply(Value In Array((Event Player).Abilities, 13), 5)));
                    Set Damage Dealt(Event Player, (Event Player).DamageDealt);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 9), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 900);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 900);
                    Modify Player Variable At Index(Event Player, Abilities, 9, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 5), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 700);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 700);
                    Modify Player Variable At Index(Event Player, Abilities, 5, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 1), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 800);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 800);
                    Modify Player Variable At Index(Event Player, Abilities, 1, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, 11.25));
            "+5% HEALTH"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(Value In Array((Event Player).Abilities, 14), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 400);
                    Modify Player Variable At Index(Event Player, Abilities, 14, Subtract, 1);
                    Set Player Variable(Event Player, PlayerHealth, Add(Add(100, Global.MaxHealthDone), Multiply(Value In Array((Event Player).Abilities, 14), 5)));
                    Set Max Health(Event Player, (Event Player).PlayerHealth);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 10), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 700);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 700);
                    Modify Player Variable At Index(Event Player, Abilities, 10, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 6), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 700);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 700);
                    Modify Player Variable At Index(Event Player, Abilities, 6, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 2), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 800);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 800);
                    Modify Player Variable At Index(Event Player, Abilities, 2, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, 33.75));
            "+5% HEALING"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(Value In Array((Event Player).Abilities, 15), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 400);
                    Modify Player Variable At Index(Event Player, Abilities, 15, Subtract, 1);
                    Set Healing Dealt(Event Player, Add(100, Multiply(Value In Array((Event Player).Abilities, 15), 5)));
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 11), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 800);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 800);
                    Modify Player Variable At Index(Event Player, Abilities, 11, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 7), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 1000);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 1000);
                    Modify Player Variable At Index(Event Player, Abilities, 7, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 3), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 700);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 700);
                    Modify Player Variable At Index(Event Player, Abilities, 3, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            End;
        Else If(Compare(Vertical Facing Angle Of(Event Player), <, 56.25));
            "+5 AUTO-REPAIR"
            If(Compare(Add(Horizontal Facing Angle Of(Event Player), 99.75), <, 55));
                If(Compare(Value In Array((Event Player).Abilities, 16), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 400);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 400);
                    Modify Global Variable(AutoRepair, Subtract, 1);
                    Modify Player Variable At Index(Event Player, Abilities, 16, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 22.5), <, 22.5));
                If(Compare(Value In Array((Event Player).Abilities, 12), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 1200);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 1200);
                    Modify Player Variable At Index(Event Player, Abilities, 12, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Add(Horizontal Facing Angle Of(Event Player), 11.25), <, 56));
                If(Compare(Value In Array((Event Player).Abilities, 8), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 1200);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 1200);
                    Modify Player Variable At Index(Event Player, Abilities, 8, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
                End;
            Else If(Compare(Horizontal Facing Angle Of(Event Player), >, 45));
                If(Compare(Value In Array((Event Player).Abilities, 4), !=, 0));
                    Modify Player Variable At Index(Event Player, Money, 0, Add, 1000);
                    Modify Player Variable At Index(Event Player, Money, 1, Subtract, 1000);
                    Modify Player Variable At Index(Event Player, Abilities, 4, Subtract, 1);
                Else;
                    Small Message(Event Player, Custom String("You don't have that ability!", Null, Null, Null));
    }
}

rule ("Create Player HUD") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        Create HUD Text(All Players(Team 1), Custom String("{0}", Hero Icon String(Hero Of(Event Player)), Null, Null), Custom String("{0}{1}", Event Player, If-Then-Else((Event Player).isInMenu, Custom String("(In Shop)", Null, Null, Null), Custom String("", Null, Null, Null)), Null), Custom String("{0}{1}", If-Then-Else(Is Alive(Event Player), Custom String("{0} HP", Round To Integer(Health(Event Player), Up), Null, Null), Custom String("Dead", Null, Null, Null)), Custom String(", {0}$", (Event Player).Money, Null, Null), Null), Left, If-Then-Else(Compare(Local Player, ==, Event Player), -1, Slot Of(Event Player)), If-Then-Else(Is Dead(Event Player), Color(Red), If-Then-Else(Compare(Health(Event Player), >, Multiply(Max Health(Event Player), 0.5)), Color(Green), Color(Orange))), If-Then-Else(Is Dead(Event Player), Color(Red), If-Then-Else(Compare(Health(Event Player), >, Multiply(Max Health(Event Player), 0.5)), Color(Green), Color(Orange))), If-Then-Else(Is Dead(Event Player), Color(Red), If-Then-Else(Compare(Health(Event Player), >, Multiply(Max Health(Event Player), 0.5)), Color(Green), Color(Orange))), Visible To Sort Order String and Color, Default Visibility);
        Create HUD Text(If-Then-Else(Or(Value In Array((Event Player).Abilities, 13), Global.DamageDone), Event Player, Null), Null, Null, Custom String("+{0}% Damage", Add(Global.DamageDone, Multiply(Value In Array((Event Player).Abilities, 13), 5)), Null, Null), Left, 913, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 9), Event Player, Null), Null, Null, Custom String("Second Wind {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 9), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 908, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 5), Event Player, Null), Null, Null, Custom String("Charged {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 5), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 905, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 1), Event Player, Null), Null, Null, Custom String("Headhunter {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 1), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 901, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Or(Value In Array((Event Player).Abilities, 14), Global.MaxHealthDone), Event Player, Null), Null, Null, Custom String("+{0}% Health", Add(Global.MaxHealthDone, Multiply(Value In Array((Event Player).Abilities, 14), 5)), Null, Null), Left, 914, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 10), Event Player, Null), Null, Null, Custom String("Binding Heal {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 10), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 909, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 6), Event Player, Null), Null, Null, Custom String("Haste {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 6), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 906, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 2), Event Player, Null), Null, Null, Custom String("Ambush {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 2), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 902, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 15), Event Player, Null), Null, Null, Custom String("+{0}% Healing", Multiply(Value In Array((Event Player).Abilities, 15), 5), Null, Null), Left, 915, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 11), Event Player, Null), Null, Null, Custom String("Resilience {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 11), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 910, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 7), Event Player, Null), Null, Null, Custom String("Heavy Impact {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 7), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 907, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 3), Event Player, Null), Null, Null, Custom String("Quick Fix {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 3), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 903, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Global.AutoRepair, Event Player, Null), Null, Null, Custom String("{0} total Auto-Repair/5s", Multiply(Global.AutoRepair, If-Then-Else(Compare(Global.UpgradeGateMaxHealthValue, >=, Value In Array(Global.UpgradeGateMaxHealthMaxValue, 2)), 10, 5)), Null, Null), Left, 916, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 12), Event Player, Null), Null, Null, Custom String("{0} {1}", First Of(Value In Array((Event Player).HeroTalentText, 2)), Value In Array(Value In Array((Event Player).HeroTalentText, 2), 1), Null), Top, 902, Null, Null, Color(Green), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 12), Event Player, Null), Null, Null, Custom String("Hero Talent 2", Null, Null, Null), Left, 912, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 8), Event Player, Null), Null, Null, Custom String("{0} {1}", First Of(Value In Array((Event Player).HeroTalentText, 1)), Value In Array(Value In Array((Event Player).HeroTalentText, 1), 1), Null), Top, 901, Null, Null, Color(Green), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 8), Event Player, Null), Null, Null, Custom String("Hero Talent 1", Null, Null, Null), Left, 911, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Value In Array((Event Player).Abilities, 4), Event Player, Null), Null, Null, Custom String("Heavyweight {0}", If-Then-Else(Compare(Value In Array((Event Player).Abilities, 4), ==, 1), Custom String("I", Null, Null, Null), Custom String("II", Null, Null, Null)), Null, Null), Left, 904, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
    }
}

rule ("Rein Pin detect") {
    event {
        Player Dealt Knockback;
        Team 1;
        Reinhardt;
    }
    conditions {
        Event Ability == Button(Ability 1);
        Has Status(Victim, Stunned) == True;
    }
    actions {
        Set Player Variable(Event Player, ReinPin, Victim);
        Wait(1, Ignore Condition);
        Set Player Variable(Event Player, ReinPin, Null);
    }
}

rule ("Boss Rotation") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.activeBoss == True;
    }
    actions {
        If(Or(Compare(Global.bossRotation, ==, 0), Compare(Global.bossRotation, ==, 3)));
            Set Global Variable(bossRotation, 1);
            Set Global Variable At Index(lastBoss, 1, Hero Of(Global.activeBoss));
        Else If(Compare(Global.bossRotation, ==, 1));
            Set Global Variable(bossRotation, 2);
            Set Global Variable At Index(lastBoss, 2, Hero Of(Global.activeBoss));
        Else If(Compare(Global.bossRotation, ==, 2));
            Set Global Variable(bossRotation, 3);
            Set Global Variable At Index(lastBoss, 3, Hero Of(Global.activeBoss));
    }
}

rule ("15 minutes hud") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.TimeMin == 10;
    }
    actions {
        Create HUD Text(All Players(Team 1), If-Then-Else(Global.activeBoss, Custom String("Boss: {0}, HP:  {1}/{2}", Hero Of(Global.activeBoss), Health(Global.activeBoss), Max Health(Global.activeBoss)), Custom String("", Null, Null, Null)), Null, Null, Top, 900, Color(Red), Null, Null, Visible To and String, Default Visibility);
    }
}

rule ("debug") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Global.IsDebug == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        Set Global Variable(TimeSec, 59);
    }
}

rule ("ending 1 part 1") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.challengeCount == 12;
    }
    actions {
        Big Message(All Players(Team 1), Custom String("Exfiltration available! (optional - ends the mode)", Null, Null, Null));
        Create In-World Text(All Players(Team 1), Custom String("Exfiltration available! Gather here!\n{0}/{1} Players ready to exfiltrate!", Count Of(Filtered Array(All Players(Team 1), Compare(Distance Between(Vector(186, 11, -46.5), Current Array Element), <=, 9))), Number Of Players(Team 1), Null), Vector(186, 15, -46.5), 1.2, Do Not Clip, Visible To and String, Color(Green), Default Visibility);
    }
}

rule ("ending 1 part 2") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
        Global.challengeCount == 12;
        Distance Between(Vector(186, 11, -46.5), All Players(Team 1)) <= 9;
    }
    actions {
        Big Message(All Players(Team 1), Custom String("GG! YOU DID IT!", Null, Null, Null));
        Destroy All Dummy Bots;
        Disable Movement Collision With Environment(All Players(Team 1), True);
        Start Accelerating(All Players(Team 1), Up, 100, 5, To World, Direction Rate and Max Speed);
        Wait(5, Ignore Condition);
        Declare Team Victory(Team 1);
    }
}

rule ("Team 1 (Ability): Second Wind save life") {
    event {
        Player Took Damage;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 9) == True;
        (Event Player).secondWindActive == True;
        Health(Event Player) == 1;
    }
    actions {
        Small Message(All Players(All Teams), Custom String("{0} received a second wind!", Event Player, Null, Null));
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
        Clear Status(Event Player, Unkillable);
        Set Player Health(Event Player, Max Health(Event Player));
        Set Player Variable(Event Player, lastSecondWind, 30);
        Set Player Variable(Event Player, secondWindActive, 0);
    }
}

rule ("Team 1 (Ability): Second Wind after buying") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Value In Array((Event Player).Abilities, 9) == True;
        (Event Player).secondWindActive == False;
        (Event Player).lastSecondWind == 0;
    }
    actions {
        If(Compare(Random Integer(1, 100), >, Multiply(Value In Array((Event Player).Abilities, 9), 30)));
            Wait(30, Ignore Condition);
            Loop;
        End;
        Set Status(Event Player, Null, Unkillable, 9999);
        Set Player Variable(Event Player, secondWindActive, 1);
    }
}

rule ("Team 1 (Ability): Second Wind counter") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Is Game In Progress == True;
        (Event Player).lastSecondWind > 0;
    }
    actions {
        Wait(1, Ignore Condition);
        Modify Player Variable(Event Player, lastSecondWind, Subtract, 1);
        Loop If Condition Is True;
    }
}

